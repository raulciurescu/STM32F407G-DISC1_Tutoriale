
Ex1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a65c  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800a7e4  0800a7e4  0000b7e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a808  0800a808  0000c07c  2**0
                  CONTENTS
  4 .ARM          00000008  0800a808  0800a808  0000b808  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a810  0800a810  0000c07c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a810  0800a810  0000b810  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a814  0800a814  0000b814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000007c  20000000  0800a818  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c07c  2**0
                  CONTENTS
 10 .bss          00000b58  2000007c  2000007c  0000c07c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000bd4  20000bd4  0000c07c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c07c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a7cb  00000000  00000000  0000c0ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000040d8  00000000  00000000  00026877  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001760  00000000  00000000  0002a950  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001216  00000000  00000000  0002c0b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000050ee  00000000  00000000  0002d2c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f00c  00000000  00000000  000323b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d428d  00000000  00000000  000513c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012564d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006688  00000000  00000000  00125690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004b  00000000  00000000  0012bd18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000007c 	.word	0x2000007c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800a7cc 	.word	0x0800a7cc

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000080 	.word	0x20000080
 80001c4:	0800a7cc 	.word	0x0800a7cc

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b084      	sub	sp, #16
 80004bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004be:	f000 feed 	bl	800129c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c2:	f000 f853 	bl	800056c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  HAL_Init();
 80004c6:	f000 fee9 	bl	800129c <HAL_Init>
  __HAL_RCC_TIM2_CLK_ENABLE();
 80004ca:	2300      	movs	r3, #0
 80004cc:	607b      	str	r3, [r7, #4]
 80004ce:	4b24      	ldr	r3, [pc, #144]	@ (8000560 <main+0xa8>)
 80004d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004d2:	4a23      	ldr	r2, [pc, #140]	@ (8000560 <main+0xa8>)
 80004d4:	f043 0301 	orr.w	r3, r3, #1
 80004d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80004da:	4b21      	ldr	r3, [pc, #132]	@ (8000560 <main+0xa8>)
 80004dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	607b      	str	r3, [r7, #4]
 80004e4:	687b      	ldr	r3, [r7, #4]

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e6:	f000 fac1 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 80004ea:	f000 fa9f 	bl	8000a2c <MX_DMA_Init>
  MX_I2C1_Init();
 80004ee:	f000 f8a7 	bl	8000640 <MX_I2C1_Init>
  MX_I2S3_Init();
 80004f2:	f000 f8d3 	bl	800069c <MX_I2S3_Init>
  MX_SPI1_Init();
 80004f6:	f000 f901 	bl	80006fc <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004fa:	f009 fd11 	bl	8009f20 <MX_USB_HOST_Init>
  MX_TIM2_Init();
 80004fe:	f000 f9d3 	bl	80008a8 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000502:	f000 f931 	bl	8000768 <MX_TIM1_Init>
  MX_TIM4_Init();
 8000506:	f000 fa1b 	bl	8000940 <MX_TIM4_Init>
//  pwmData[8] = 90;
//  pwmData[9] = 100;
//
//  HAL_TIM_PWM_Start_DMA(&htim1 , TIM_CHANNEL_1 , (uint32_t *) pwmData , 10);

  HAL_TIM_PWM_Start(&htim4,TIM_CHANNEL_4);
 800050a:	210c      	movs	r1, #12
 800050c:	4815      	ldr	r0, [pc, #84]	@ (8000564 <main+0xac>)
 800050e:	f005 fbb1 	bl	8005c74 <HAL_TIM_PWM_Start>

  // Start Timer
  HAL_TIM_Base_Start_IT(&htim2);
 8000512:	4815      	ldr	r0, [pc, #84]	@ (8000568 <main+0xb0>)
 8000514:	f005 fae4 	bl	8005ae0 <HAL_TIM_Base_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 8000518:	f009 fd28 	bl	8009f6c <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */

    for(int i = 0 ; i <100 ; i++)
 800051c:	2300      	movs	r3, #0
 800051e:	60fb      	str	r3, [r7, #12]
 8000520:	e009      	b.n	8000536 <main+0x7e>
    {
    	__HAL_TIM_SET_COMPARE(&htim4 , TIM_CHANNEL_4 , i);
 8000522:	4b10      	ldr	r3, [pc, #64]	@ (8000564 <main+0xac>)
 8000524:	681b      	ldr	r3, [r3, #0]
 8000526:	68fa      	ldr	r2, [r7, #12]
 8000528:	641a      	str	r2, [r3, #64]	@ 0x40
    	HAL_Delay(5);
 800052a:	2005      	movs	r0, #5
 800052c:	f000 ff28 	bl	8001380 <HAL_Delay>
    for(int i = 0 ; i <100 ; i++)
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	3301      	adds	r3, #1
 8000534:	60fb      	str	r3, [r7, #12]
 8000536:	68fb      	ldr	r3, [r7, #12]
 8000538:	2b63      	cmp	r3, #99	@ 0x63
 800053a:	ddf2      	ble.n	8000522 <main+0x6a>
    }
    for(int i = 100 ; i >0 ; i--)
 800053c:	2364      	movs	r3, #100	@ 0x64
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	e009      	b.n	8000556 <main+0x9e>
        {
        	__HAL_TIM_SET_COMPARE(&htim4 , TIM_CHANNEL_4 , i);
 8000542:	4b08      	ldr	r3, [pc, #32]	@ (8000564 <main+0xac>)
 8000544:	681b      	ldr	r3, [r3, #0]
 8000546:	68ba      	ldr	r2, [r7, #8]
 8000548:	641a      	str	r2, [r3, #64]	@ 0x40
        	HAL_Delay(5);
 800054a:	2005      	movs	r0, #5
 800054c:	f000 ff18 	bl	8001380 <HAL_Delay>
    for(int i = 100 ; i >0 ; i--)
 8000550:	68bb      	ldr	r3, [r7, #8]
 8000552:	3b01      	subs	r3, #1
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
 8000558:	2b00      	cmp	r3, #0
 800055a:	dcf2      	bgt.n	8000542 <main+0x8a>
    MX_USB_HOST_Process();
 800055c:	e7dc      	b.n	8000518 <main+0x60>
 800055e:	bf00      	nop
 8000560:	40023800 	.word	0x40023800
 8000564:	2000021c 	.word	0x2000021c
 8000568:	200001d4 	.word	0x200001d4

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f00a f898 	bl	800a6b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b28      	ldr	r3, [pc, #160]	@ (8000638 <SystemClock_Config+0xcc>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a27      	ldr	r2, [pc, #156]	@ (8000638 <SystemClock_Config+0xcc>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b25      	ldr	r3, [pc, #148]	@ (8000638 <SystemClock_Config+0xcc>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b22      	ldr	r3, [pc, #136]	@ (800063c <SystemClock_Config+0xd0>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a21      	ldr	r2, [pc, #132]	@ (800063c <SystemClock_Config+0xd0>)
 80005b6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b1f      	ldr	r3, [pc, #124]	@ (800063c <SystemClock_Config+0xd0>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005c8:	2301      	movs	r3, #1
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005d0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d2:	2302      	movs	r3, #2
 80005d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005d6:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005e0:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80005e4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e6:	2302      	movs	r3, #2
 80005e8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005ea:	2307      	movs	r3, #7
 80005ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ee:	f107 0320 	add.w	r3, r7, #32
 80005f2:	4618      	mov	r0, r3
 80005f4:	f004 fbd6 	bl	8004da4 <HAL_RCC_OscConfig>
 80005f8:	4603      	mov	r3, r0
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d001      	beq.n	8000602 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005fe:	f000 fb45 	bl	8000c8c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000602:	230f      	movs	r3, #15
 8000604:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000606:	2302      	movs	r3, #2
 8000608:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800060a:	2300      	movs	r3, #0
 800060c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800060e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000612:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000614:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000618:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800061a:	f107 030c 	add.w	r3, r7, #12
 800061e:	2105      	movs	r1, #5
 8000620:	4618      	mov	r0, r3
 8000622:	f004 fe37 	bl	8005294 <HAL_RCC_ClockConfig>
 8000626:	4603      	mov	r3, r0
 8000628:	2b00      	cmp	r3, #0
 800062a:	d001      	beq.n	8000630 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 800062c:	f000 fb2e 	bl	8000c8c <Error_Handler>
  }
}
 8000630:	bf00      	nop
 8000632:	3750      	adds	r7, #80	@ 0x50
 8000634:	46bd      	mov	sp, r7
 8000636:	bd80      	pop	{r7, pc}
 8000638:	40023800 	.word	0x40023800
 800063c:	40007000 	.word	0x40007000

08000640 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000640:	b580      	push	{r7, lr}
 8000642:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000644:	4b12      	ldr	r3, [pc, #72]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000646:	4a13      	ldr	r2, [pc, #76]	@ (8000694 <MX_I2C1_Init+0x54>)
 8000648:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800064a:	4b11      	ldr	r3, [pc, #68]	@ (8000690 <MX_I2C1_Init+0x50>)
 800064c:	4a12      	ldr	r2, [pc, #72]	@ (8000698 <MX_I2C1_Init+0x58>)
 800064e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000650:	4b0f      	ldr	r3, [pc, #60]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000656:	4b0e      	ldr	r3, [pc, #56]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000658:	2200      	movs	r2, #0
 800065a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800065c:	4b0c      	ldr	r3, [pc, #48]	@ (8000690 <MX_I2C1_Init+0x50>)
 800065e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000662:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000664:	4b0a      	ldr	r3, [pc, #40]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000666:	2200      	movs	r2, #0
 8000668:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800066a:	4b09      	ldr	r3, [pc, #36]	@ (8000690 <MX_I2C1_Init+0x50>)
 800066c:	2200      	movs	r2, #0
 800066e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000670:	4b07      	ldr	r3, [pc, #28]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000672:	2200      	movs	r2, #0
 8000674:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000676:	4b06      	ldr	r3, [pc, #24]	@ (8000690 <MX_I2C1_Init+0x50>)
 8000678:	2200      	movs	r2, #0
 800067a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800067c:	4804      	ldr	r0, [pc, #16]	@ (8000690 <MX_I2C1_Init+0x50>)
 800067e:	f003 fdad 	bl	80041dc <HAL_I2C_Init>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000688:	f000 fb00 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800068c:	bf00      	nop
 800068e:	bd80      	pop	{r7, pc}
 8000690:	20000098 	.word	0x20000098
 8000694:	40005400 	.word	0x40005400
 8000698:	000186a0 	.word	0x000186a0

0800069c <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 800069c:	b580      	push	{r7, lr}
 800069e:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80006a0:	4b13      	ldr	r3, [pc, #76]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006a2:	4a14      	ldr	r2, [pc, #80]	@ (80006f4 <MX_I2S3_Init+0x58>)
 80006a4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80006a6:	4b12      	ldr	r3, [pc, #72]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006ac:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80006ae:	4b10      	ldr	r3, [pc, #64]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80006b4:	4b0e      	ldr	r3, [pc, #56]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006b6:	2200      	movs	r2, #0
 80006b8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80006ba:	4b0d      	ldr	r3, [pc, #52]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006bc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80006c0:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 80006c2:	4b0b      	ldr	r3, [pc, #44]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006c4:	4a0c      	ldr	r2, [pc, #48]	@ (80006f8 <MX_I2S3_Init+0x5c>)
 80006c6:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 80006c8:	4b09      	ldr	r3, [pc, #36]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 80006ce:	4b08      	ldr	r3, [pc, #32]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80006d4:	4b06      	ldr	r3, [pc, #24]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 80006da:	4805      	ldr	r0, [pc, #20]	@ (80006f0 <MX_I2S3_Init+0x54>)
 80006dc:	f003 fec2 	bl	8004464 <HAL_I2S_Init>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d001      	beq.n	80006ea <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 80006e6:	f000 fad1 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	200000ec 	.word	0x200000ec
 80006f4:	40003c00 	.word	0x40003c00
 80006f8:	00017700 	.word	0x00017700

080006fc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000702:	4a18      	ldr	r2, [pc, #96]	@ (8000764 <MX_SPI1_Init+0x68>)
 8000704:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000706:	4b16      	ldr	r3, [pc, #88]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000708:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800070c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800070e:	4b14      	ldr	r3, [pc, #80]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000714:	4b12      	ldr	r3, [pc, #72]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800071a:	4b11      	ldr	r3, [pc, #68]	@ (8000760 <MX_SPI1_Init+0x64>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000722:	2200      	movs	r2, #0
 8000724:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000726:	4b0e      	ldr	r3, [pc, #56]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000728:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800072c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800072e:	4b0c      	ldr	r3, [pc, #48]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000730:	2200      	movs	r2, #0
 8000732:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000734:	4b0a      	ldr	r3, [pc, #40]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000736:	2200      	movs	r2, #0
 8000738:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800073a:	4b09      	ldr	r3, [pc, #36]	@ (8000760 <MX_SPI1_Init+0x64>)
 800073c:	2200      	movs	r2, #0
 800073e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000740:	4b07      	ldr	r3, [pc, #28]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000742:	2200      	movs	r2, #0
 8000744:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000746:	4b06      	ldr	r3, [pc, #24]	@ (8000760 <MX_SPI1_Init+0x64>)
 8000748:	220a      	movs	r2, #10
 800074a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800074c:	4804      	ldr	r0, [pc, #16]	@ (8000760 <MX_SPI1_Init+0x64>)
 800074e:	f005 f8ef 	bl	8005930 <HAL_SPI_Init>
 8000752:	4603      	mov	r3, r0
 8000754:	2b00      	cmp	r3, #0
 8000756:	d001      	beq.n	800075c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000758:	f000 fa98 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800075c:	bf00      	nop
 800075e:	bd80      	pop	{r7, pc}
 8000760:	20000134 	.word	0x20000134
 8000764:	40013000 	.word	0x40013000

08000768 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b096      	sub	sp, #88	@ 0x58
 800076c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800076e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000772:	2200      	movs	r2, #0
 8000774:	601a      	str	r2, [r3, #0]
 8000776:	605a      	str	r2, [r3, #4]
 8000778:	609a      	str	r2, [r3, #8]
 800077a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800077c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800078a:	2200      	movs	r2, #0
 800078c:	601a      	str	r2, [r3, #0]
 800078e:	605a      	str	r2, [r3, #4]
 8000790:	609a      	str	r2, [r3, #8]
 8000792:	60da      	str	r2, [r3, #12]
 8000794:	611a      	str	r2, [r3, #16]
 8000796:	615a      	str	r2, [r3, #20]
 8000798:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800079a:	1d3b      	adds	r3, r7, #4
 800079c:	2220      	movs	r2, #32
 800079e:	2100      	movs	r1, #0
 80007a0:	4618      	mov	r0, r3
 80007a2:	f009 ff85 	bl	800a6b0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007a6:	4b3e      	ldr	r3, [pc, #248]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007a8:	4a3e      	ldr	r2, [pc, #248]	@ (80008a4 <MX_TIM1_Init+0x13c>)
 80007aa:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84 - 1;
 80007ac:	4b3c      	ldr	r3, [pc, #240]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007ae:	2253      	movs	r2, #83	@ 0x53
 80007b0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007b2:	4b3b      	ldr	r3, [pc, #236]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100 - 1;
 80007b8:	4b39      	ldr	r3, [pc, #228]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007ba:	2263      	movs	r2, #99	@ 0x63
 80007bc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007be:	4b38      	ldr	r3, [pc, #224]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80007c4:	4b36      	ldr	r3, [pc, #216]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ca:	4b35      	ldr	r3, [pc, #212]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007cc:	2200      	movs	r2, #0
 80007ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80007d0:	4833      	ldr	r0, [pc, #204]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007d2:	f005 f936 	bl	8005a42 <HAL_TIM_Base_Init>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 80007dc:	f000 fa56 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007e0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007e4:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80007e6:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80007ea:	4619      	mov	r1, r3
 80007ec:	482c      	ldr	r0, [pc, #176]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007ee:	f005 fcbb 	bl	8006168 <HAL_TIM_ConfigClockSource>
 80007f2:	4603      	mov	r3, r0
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d001      	beq.n	80007fc <MX_TIM1_Init+0x94>
  {
    Error_Handler();
 80007f8:	f000 fa48 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80007fc:	4828      	ldr	r0, [pc, #160]	@ (80008a0 <MX_TIM1_Init+0x138>)
 80007fe:	f005 f9df 	bl	8005bc0 <HAL_TIM_PWM_Init>
 8000802:	4603      	mov	r3, r0
 8000804:	2b00      	cmp	r3, #0
 8000806:	d001      	beq.n	800080c <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8000808:	f000 fa40 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800080c:	2300      	movs	r3, #0
 800080e:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000810:	2300      	movs	r3, #0
 8000812:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000814:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000818:	4619      	mov	r1, r3
 800081a:	4821      	ldr	r0, [pc, #132]	@ (80008a0 <MX_TIM1_Init+0x138>)
 800081c:	f006 f8b0 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0xc2>
  {
    Error_Handler();
 8000826:	f000 fa31 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800082a:	2360      	movs	r3, #96	@ 0x60
 800082c:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 800082e:	2300      	movs	r3, #0
 8000830:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000832:	2300      	movs	r3, #0
 8000834:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000836:	2300      	movs	r3, #0
 8000838:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800083a:	2300      	movs	r3, #0
 800083c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800083e:	2300      	movs	r3, #0
 8000840:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000842:	2300      	movs	r3, #0
 8000844:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000846:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800084a:	2200      	movs	r2, #0
 800084c:	4619      	mov	r1, r3
 800084e:	4814      	ldr	r0, [pc, #80]	@ (80008a0 <MX_TIM1_Init+0x138>)
 8000850:	f005 fbc8 	bl	8005fe4 <HAL_TIM_PWM_ConfigChannel>
 8000854:	4603      	mov	r3, r0
 8000856:	2b00      	cmp	r3, #0
 8000858:	d001      	beq.n	800085e <MX_TIM1_Init+0xf6>
  {
    Error_Handler();
 800085a:	f000 fa17 	bl	8000c8c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000866:	2300      	movs	r3, #0
 8000868:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800086e:	2300      	movs	r3, #0
 8000870:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000872:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000876:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	4619      	mov	r1, r3
 8000880:	4807      	ldr	r0, [pc, #28]	@ (80008a0 <MX_TIM1_Init+0x138>)
 8000882:	f006 f8f9 	bl	8006a78 <HAL_TIMEx_ConfigBreakDeadTime>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d001      	beq.n	8000890 <MX_TIM1_Init+0x128>
  {
    Error_Handler();
 800088c:	f000 f9fe 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000890:	4803      	ldr	r0, [pc, #12]	@ (80008a0 <MX_TIM1_Init+0x138>)
 8000892:	f000 fbbf 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000896:	bf00      	nop
 8000898:	3758      	adds	r7, #88	@ 0x58
 800089a:	46bd      	mov	sp, r7
 800089c:	bd80      	pop	{r7, pc}
 800089e:	bf00      	nop
 80008a0:	2000018c 	.word	0x2000018c
 80008a4:	40010000 	.word	0x40010000

080008a8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b086      	sub	sp, #24
 80008ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
 80008b6:	605a      	str	r2, [r3, #4]
 80008b8:	609a      	str	r2, [r3, #8]
 80008ba:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008bc:	463b      	mov	r3, r7
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
 80008c2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008c4:	4b1d      	ldr	r3, [pc, #116]	@ (800093c <MX_TIM2_Init+0x94>)
 80008c6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80008ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8;
 80008cc:	4b1b      	ldr	r3, [pc, #108]	@ (800093c <MX_TIM2_Init+0x94>)
 80008ce:	2208      	movs	r2, #8
 80008d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008d2:	4b1a      	ldr	r3, [pc, #104]	@ (800093c <MX_TIM2_Init+0x94>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10000 - 1;
 80008d8:	4b18      	ldr	r3, [pc, #96]	@ (800093c <MX_TIM2_Init+0x94>)
 80008da:	f242 720f 	movw	r2, #9999	@ 0x270f
 80008de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008e0:	4b16      	ldr	r3, [pc, #88]	@ (800093c <MX_TIM2_Init+0x94>)
 80008e2:	2200      	movs	r2, #0
 80008e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80008e6:	4b15      	ldr	r3, [pc, #84]	@ (800093c <MX_TIM2_Init+0x94>)
 80008e8:	2280      	movs	r2, #128	@ 0x80
 80008ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008ec:	4813      	ldr	r0, [pc, #76]	@ (800093c <MX_TIM2_Init+0x94>)
 80008ee:	f005 f8a8 	bl	8005a42 <HAL_TIM_Base_Init>
 80008f2:	4603      	mov	r3, r0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d001      	beq.n	80008fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008f8:	f000 f9c8 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008fc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000900:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4619      	mov	r1, r3
 8000908:	480c      	ldr	r0, [pc, #48]	@ (800093c <MX_TIM2_Init+0x94>)
 800090a:	f005 fc2d 	bl	8006168 <HAL_TIM_ConfigClockSource>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8000914:	f000 f9ba 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000918:	2300      	movs	r3, #0
 800091a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800091c:	2300      	movs	r3, #0
 800091e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000920:	463b      	mov	r3, r7
 8000922:	4619      	mov	r1, r3
 8000924:	4805      	ldr	r0, [pc, #20]	@ (800093c <MX_TIM2_Init+0x94>)
 8000926:	f006 f82b 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 800092a:	4603      	mov	r3, r0
 800092c:	2b00      	cmp	r3, #0
 800092e:	d001      	beq.n	8000934 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8000930:	f000 f9ac 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000934:	bf00      	nop
 8000936:	3718      	adds	r7, #24
 8000938:	46bd      	mov	sp, r7
 800093a:	bd80      	pop	{r7, pc}
 800093c:	200001d4 	.word	0x200001d4

08000940 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b08e      	sub	sp, #56	@ 0x38
 8000944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000946:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000954:	f107 0320 	add.w	r3, r7, #32
 8000958:	2200      	movs	r2, #0
 800095a:	601a      	str	r2, [r3, #0]
 800095c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800095e:	1d3b      	adds	r3, r7, #4
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
 8000964:	605a      	str	r2, [r3, #4]
 8000966:	609a      	str	r2, [r3, #8]
 8000968:	60da      	str	r2, [r3, #12]
 800096a:	611a      	str	r2, [r3, #16]
 800096c:	615a      	str	r2, [r3, #20]
 800096e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000970:	4b2c      	ldr	r3, [pc, #176]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 8000972:	4a2d      	ldr	r2, [pc, #180]	@ (8000a28 <MX_TIM4_Init+0xe8>)
 8000974:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 84-1;
 8000976:	4b2b      	ldr	r3, [pc, #172]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 8000978:	2253      	movs	r2, #83	@ 0x53
 800097a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800097c:	4b29      	ldr	r3, [pc, #164]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 800097e:	2200      	movs	r2, #0
 8000980:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 8000982:	4b28      	ldr	r3, [pc, #160]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 8000984:	2263      	movs	r2, #99	@ 0x63
 8000986:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000988:	4b26      	ldr	r3, [pc, #152]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 800098a:	2200      	movs	r2, #0
 800098c:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800098e:	4b25      	ldr	r3, [pc, #148]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 8000990:	2200      	movs	r2, #0
 8000992:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8000994:	4823      	ldr	r0, [pc, #140]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 8000996:	f005 f854 	bl	8005a42 <HAL_TIM_Base_Init>
 800099a:	4603      	mov	r3, r0
 800099c:	2b00      	cmp	r3, #0
 800099e:	d001      	beq.n	80009a4 <MX_TIM4_Init+0x64>
  {
    Error_Handler();
 80009a0:	f000 f974 	bl	8000c8c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009a4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80009aa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80009ae:	4619      	mov	r1, r3
 80009b0:	481c      	ldr	r0, [pc, #112]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 80009b2:	f005 fbd9 	bl	8006168 <HAL_TIM_ConfigClockSource>
 80009b6:	4603      	mov	r3, r0
 80009b8:	2b00      	cmp	r3, #0
 80009ba:	d001      	beq.n	80009c0 <MX_TIM4_Init+0x80>
  {
    Error_Handler();
 80009bc:	f000 f966 	bl	8000c8c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80009c0:	4818      	ldr	r0, [pc, #96]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 80009c2:	f005 f8fd 	bl	8005bc0 <HAL_TIM_PWM_Init>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d001      	beq.n	80009d0 <MX_TIM4_Init+0x90>
  {
    Error_Handler();
 80009cc:	f000 f95e 	bl	8000c8c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009d0:	2300      	movs	r3, #0
 80009d2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009d4:	2300      	movs	r3, #0
 80009d6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80009d8:	f107 0320 	add.w	r3, r7, #32
 80009dc:	4619      	mov	r1, r3
 80009de:	4811      	ldr	r0, [pc, #68]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 80009e0:	f005 ffce 	bl	8006980 <HAL_TIMEx_MasterConfigSynchronization>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <MX_TIM4_Init+0xae>
  {
    Error_Handler();
 80009ea:	f000 f94f 	bl	8000c8c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ee:	2360      	movs	r3, #96	@ 0x60
 80009f0:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009f2:	2300      	movs	r3, #0
 80009f4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009f6:	2300      	movs	r3, #0
 80009f8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009fa:	2300      	movs	r3, #0
 80009fc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80009fe:	1d3b      	adds	r3, r7, #4
 8000a00:	220c      	movs	r2, #12
 8000a02:	4619      	mov	r1, r3
 8000a04:	4807      	ldr	r0, [pc, #28]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 8000a06:	f005 faed 	bl	8005fe4 <HAL_TIM_PWM_ConfigChannel>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d001      	beq.n	8000a14 <MX_TIM4_Init+0xd4>
  {
    Error_Handler();
 8000a10:	f000 f93c 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000a14:	4803      	ldr	r0, [pc, #12]	@ (8000a24 <MX_TIM4_Init+0xe4>)
 8000a16:	f000 fafd 	bl	8001014 <HAL_TIM_MspPostInit>

}
 8000a1a:	bf00      	nop
 8000a1c:	3738      	adds	r7, #56	@ 0x38
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	2000021c 	.word	0x2000021c
 8000a28:	40000800 	.word	0x40000800

08000a2c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	b082      	sub	sp, #8
 8000a30:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000a32:	2300      	movs	r3, #0
 8000a34:	607b      	str	r3, [r7, #4]
 8000a36:	4b0c      	ldr	r3, [pc, #48]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a3c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000a40:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a42:	4b09      	ldr	r3, [pc, #36]	@ (8000a68 <MX_DMA_Init+0x3c>)
 8000a44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000a4a:	607b      	str	r3, [r7, #4]
 8000a4c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	2039      	movs	r0, #57	@ 0x39
 8000a54:	f000 fd93 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a58:	2039      	movs	r0, #57	@ 0x39
 8000a5a:	f000 fdac 	bl	80015b6 <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40023800 	.word	0x40023800

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08c      	sub	sp, #48	@ 0x30
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 031c 	add.w	r3, r7, #28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a82:	2300      	movs	r3, #0
 8000a84:	61bb      	str	r3, [r7, #24]
 8000a86:	4b76      	ldr	r3, [pc, #472]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000a88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a8a:	4a75      	ldr	r2, [pc, #468]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000a8c:	f043 0310 	orr.w	r3, r3, #16
 8000a90:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a92:	4b73      	ldr	r3, [pc, #460]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a96:	f003 0310 	and.w	r3, r3, #16
 8000a9a:	61bb      	str	r3, [r7, #24]
 8000a9c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a9e:	2300      	movs	r3, #0
 8000aa0:	617b      	str	r3, [r7, #20]
 8000aa2:	4b6f      	ldr	r3, [pc, #444]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000aa4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aa6:	4a6e      	ldr	r2, [pc, #440]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000aa8:	f043 0304 	orr.w	r3, r3, #4
 8000aac:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aae:	4b6c      	ldr	r3, [pc, #432]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000ab0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ab2:	f003 0304 	and.w	r3, r3, #4
 8000ab6:	617b      	str	r3, [r7, #20]
 8000ab8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	613b      	str	r3, [r7, #16]
 8000abe:	4b68      	ldr	r3, [pc, #416]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ac2:	4a67      	ldr	r2, [pc, #412]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000ac4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ac8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000aca:	4b65      	ldr	r3, [pc, #404]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ace:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ad2:	613b      	str	r3, [r7, #16]
 8000ad4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ad6:	2300      	movs	r3, #0
 8000ad8:	60fb      	str	r3, [r7, #12]
 8000ada:	4b61      	ldr	r3, [pc, #388]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ade:	4a60      	ldr	r2, [pc, #384]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000ae0:	f043 0301 	orr.w	r3, r3, #1
 8000ae4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ae6:	4b5e      	ldr	r3, [pc, #376]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000ae8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000aea:	f003 0301 	and.w	r3, r3, #1
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60bb      	str	r3, [r7, #8]
 8000af6:	4b5a      	ldr	r3, [pc, #360]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000afa:	4a59      	ldr	r2, [pc, #356]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000afc:	f043 0302 	orr.w	r3, r3, #2
 8000b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b02:	4b57      	ldr	r3, [pc, #348]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b06:	f003 0302 	and.w	r3, r3, #2
 8000b0a:	60bb      	str	r3, [r7, #8]
 8000b0c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	607b      	str	r3, [r7, #4]
 8000b12:	4b53      	ldr	r3, [pc, #332]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b16:	4a52      	ldr	r2, [pc, #328]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000b18:	f043 0308 	orr.w	r3, r3, #8
 8000b1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b1e:	4b50      	ldr	r3, [pc, #320]	@ (8000c60 <MX_GPIO_Init+0x1f4>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b22:	f003 0308 	and.w	r3, r3, #8
 8000b26:	607b      	str	r3, [r7, #4]
 8000b28:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	2108      	movs	r1, #8
 8000b2e:	484d      	ldr	r0, [pc, #308]	@ (8000c64 <MX_GPIO_Init+0x1f8>)
 8000b30:	f001 f9e2 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000b34:	2201      	movs	r2, #1
 8000b36:	2101      	movs	r1, #1
 8000b38:	484b      	ldr	r0, [pc, #300]	@ (8000c68 <MX_GPIO_Init+0x1fc>)
 8000b3a:	f001 f9dd 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|LD3_Pin|LD5_Pin|Audio_RST_Pin, GPIO_PIN_RESET);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	f247 0110 	movw	r1, #28688	@ 0x7010
 8000b44:	4849      	ldr	r0, [pc, #292]	@ (8000c6c <MX_GPIO_Init+0x200>)
 8000b46:	f001 f9d7 	bl	8001ef8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000b4a:	2308      	movs	r3, #8
 8000b4c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b52:	2300      	movs	r3, #0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b56:	2300      	movs	r3, #0
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000b5a:	f107 031c 	add.w	r3, r7, #28
 8000b5e:	4619      	mov	r1, r3
 8000b60:	4840      	ldr	r0, [pc, #256]	@ (8000c64 <MX_GPIO_Init+0x1f8>)
 8000b62:	f001 f82d 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 8000b66:	2301      	movs	r3, #1
 8000b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b6a:	2301      	movs	r3, #1
 8000b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b72:	2300      	movs	r3, #0
 8000b74:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000b76:	f107 031c 	add.w	r3, r7, #28
 8000b7a:	4619      	mov	r1, r3
 8000b7c:	483a      	ldr	r0, [pc, #232]	@ (8000c68 <MX_GPIO_Init+0x1fc>)
 8000b7e:	f001 f81f 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 8000b82:	2308      	movs	r3, #8
 8000b84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b86:	2302      	movs	r3, #2
 8000b88:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000b92:	2305      	movs	r3, #5
 8000b94:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 8000b96:	f107 031c 	add.w	r3, r7, #28
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	4832      	ldr	r0, [pc, #200]	@ (8000c68 <MX_GPIO_Init+0x1fc>)
 8000b9e:	f001 f80f 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ba2:	2301      	movs	r3, #1
 8000ba4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ba6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000baa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bb0:	f107 031c 	add.w	r3, r7, #28
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	482e      	ldr	r0, [pc, #184]	@ (8000c70 <MX_GPIO_Init+0x204>)
 8000bb8:	f001 f802 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000bbc:	2304      	movs	r3, #4
 8000bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000bc8:	f107 031c 	add.w	r3, r7, #28
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4829      	ldr	r0, [pc, #164]	@ (8000c74 <MX_GPIO_Init+0x208>)
 8000bd0:	f000 fff6 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 8000bd4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000bd8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bda:	2302      	movs	r3, #2
 8000bdc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bde:	2300      	movs	r3, #0
 8000be0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000be6:	2305      	movs	r3, #5
 8000be8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000bea:	f107 031c 	add.w	r3, r7, #28
 8000bee:	4619      	mov	r1, r3
 8000bf0:	4820      	ldr	r0, [pc, #128]	@ (8000c74 <MX_GPIO_Init+0x208>)
 8000bf2:	f000 ffe5 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 LD3_Pin LD5_Pin Audio_RST_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_12|LD3_Pin|LD5_Pin|Audio_RST_Pin;
 8000bf6:	f247 0310 	movw	r3, #28688	@ 0x7010
 8000bfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bfc:	2301      	movs	r3, #1
 8000bfe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c00:	2300      	movs	r3, #0
 8000c02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c04:	2300      	movs	r3, #0
 8000c06:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c08:	f107 031c 	add.w	r3, r7, #28
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4817      	ldr	r0, [pc, #92]	@ (8000c6c <MX_GPIO_Init+0x200>)
 8000c10:	f000 ffd6 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000c14:	2320      	movs	r3, #32
 8000c16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c18:	2300      	movs	r3, #0
 8000c1a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c20:	f107 031c 	add.w	r3, r7, #28
 8000c24:	4619      	mov	r1, r3
 8000c26:	4811      	ldr	r0, [pc, #68]	@ (8000c6c <MX_GPIO_Init+0x200>)
 8000c28:	f000 ffca 	bl	8001bc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c30:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000c34:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c36:	2300      	movs	r3, #0
 8000c38:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c3a:	f107 031c 	add.w	r3, r7, #28
 8000c3e:	4619      	mov	r1, r3
 8000c40:	4808      	ldr	r0, [pc, #32]	@ (8000c64 <MX_GPIO_Init+0x1f8>)
 8000c42:	f000 ffbd 	bl	8001bc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2100      	movs	r1, #0
 8000c4a:	2006      	movs	r0, #6
 8000c4c:	f000 fc97 	bl	800157e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c50:	2006      	movs	r0, #6
 8000c52:	f000 fcb0 	bl	80015b6 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000c56:	bf00      	nop
 8000c58:	3730      	adds	r7, #48	@ 0x30
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	bd80      	pop	{r7, pc}
 8000c5e:	bf00      	nop
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40021000 	.word	0x40021000
 8000c68:	40020800 	.word	0x40020800
 8000c6c:	40020c00 	.word	0x40020c00
 8000c70:	40020000 	.word	0x40020000
 8000c74:	40020400 	.word	0x40020400

08000c78 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
//		HAL_GPIO_TogglePin(GPIOD , LD3_Pin);
//		HAL_GPIO_TogglePin(GPIOD , LD4_Pin);
//		HAL_GPIO_TogglePin(GPIOD , LD5_Pin);                 //pentru timer cu intrerupere
//		HAL_GPIO_TogglePin(GPIOD , LD6_Pin);
	}
}
 8000c80:	bf00      	nop
 8000c82:	370c      	adds	r7, #12
 8000c84:	46bd      	mov	sp, r7
 8000c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8a:	4770      	bx	lr

08000c8c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c90:	b672      	cpsid	i
}
 8000c92:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c94:	bf00      	nop
 8000c96:	e7fd      	b.n	8000c94 <Error_Handler+0x8>

08000c98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ca6:	4a0f      	ldr	r2, [pc, #60]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ca8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cac:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cae:	4b0d      	ldr	r3, [pc, #52]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cb2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
 8000cbe:	4b09      	ldr	r3, [pc, #36]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cc2:	4a08      	ldr	r2, [pc, #32]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000cc4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000cc8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000cca:	4b06      	ldr	r3, [pc, #24]	@ (8000ce4 <HAL_MspInit+0x4c>)
 8000ccc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000cd2:	603b      	str	r3, [r7, #0]
 8000cd4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000cd6:	2007      	movs	r0, #7
 8000cd8:	f000 fc46 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cdc:	bf00      	nop
 8000cde:	3708      	adds	r7, #8
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	bd80      	pop	{r7, pc}
 8000ce4:	40023800 	.word	0x40023800

08000ce8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	@ 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	@ (8000d6c <HAL_I2C_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12c      	bne.n	8000d64 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d12:	4a17      	ldr	r2, [pc, #92]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d14:	f043 0302 	orr.w	r3, r3, #2
 8000d18:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1a:	4b15      	ldr	r3, [pc, #84]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d1e:	f003 0302 	and.w	r3, r3, #2
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = Audio_SCL_Pin|Audio_SDA_Pin;
 8000d26:	f44f 7310 	mov.w	r3, #576	@ 0x240
 8000d2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000d2c:	2312      	movs	r3, #18
 8000d2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d30:	2301      	movs	r3, #1
 8000d32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000d38:	2304      	movs	r3, #4
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	4619      	mov	r1, r3
 8000d42:	480c      	ldr	r0, [pc, #48]	@ (8000d74 <HAL_I2C_MspInit+0x8c>)
 8000d44:	f000 ff3c 	bl	8001bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000d48:	2300      	movs	r3, #0
 8000d4a:	60fb      	str	r3, [r7, #12]
 8000d4c:	4b08      	ldr	r3, [pc, #32]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d50:	4a07      	ldr	r2, [pc, #28]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d52:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000d56:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d58:	4b05      	ldr	r3, [pc, #20]	@ (8000d70 <HAL_I2C_MspInit+0x88>)
 8000d5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d5c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000d60:	60fb      	str	r3, [r7, #12]
 8000d62:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	@ 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40005400 	.word	0x40005400
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020400 	.word	0x40020400

08000d78 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b08e      	sub	sp, #56	@ 0x38
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d80:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000d84:	2200      	movs	r2, #0
 8000d86:	601a      	str	r2, [r3, #0]
 8000d88:	605a      	str	r2, [r3, #4]
 8000d8a:	609a      	str	r2, [r3, #8]
 8000d8c:	60da      	str	r2, [r3, #12]
 8000d8e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000d90:	f107 0314 	add.w	r3, r7, #20
 8000d94:	2200      	movs	r2, #0
 8000d96:	601a      	str	r2, [r3, #0]
 8000d98:	605a      	str	r2, [r3, #4]
 8000d9a:	609a      	str	r2, [r3, #8]
 8000d9c:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	4a31      	ldr	r2, [pc, #196]	@ (8000e68 <HAL_I2S_MspInit+0xf0>)
 8000da4:	4293      	cmp	r3, r2
 8000da6:	d15a      	bne.n	8000e5e <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000da8:	2301      	movs	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000dac:	23c0      	movs	r3, #192	@ 0xc0
 8000dae:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000db0:	2302      	movs	r3, #2
 8000db2:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000db4:	f107 0314 	add.w	r3, r7, #20
 8000db8:	4618      	mov	r0, r3
 8000dba:	f004 fc77 	bl	80056ac <HAL_RCCEx_PeriphCLKConfig>
 8000dbe:	4603      	mov	r3, r0
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d001      	beq.n	8000dc8 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000dc4:	f7ff ff62 	bl	8000c8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000dc8:	2300      	movs	r3, #0
 8000dca:	613b      	str	r3, [r7, #16]
 8000dcc:	4b27      	ldr	r3, [pc, #156]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000dce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd0:	4a26      	ldr	r2, [pc, #152]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000dd2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000dd6:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dd8:	4b24      	ldr	r3, [pc, #144]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ddc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000de0:	613b      	str	r3, [r7, #16]
 8000de2:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de4:	2300      	movs	r3, #0
 8000de6:	60fb      	str	r3, [r7, #12]
 8000de8:	4b20      	ldr	r3, [pc, #128]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dec:	4a1f      	ldr	r2, [pc, #124]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000dee:	f043 0301 	orr.w	r3, r3, #1
 8000df2:	6313      	str	r3, [r2, #48]	@ 0x30
 8000df4:	4b1d      	ldr	r3, [pc, #116]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000df6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000df8:	f003 0301 	and.w	r3, r3, #1
 8000dfc:	60fb      	str	r3, [r7, #12]
 8000dfe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e00:	2300      	movs	r3, #0
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	4b19      	ldr	r3, [pc, #100]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e08:	4a18      	ldr	r2, [pc, #96]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000e0a:	f043 0304 	orr.w	r3, r3, #4
 8000e0e:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e10:	4b16      	ldr	r3, [pc, #88]	@ (8000e6c <HAL_I2S_MspInit+0xf4>)
 8000e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e14:	f003 0304 	and.w	r3, r3, #4
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000e1c:	2310      	movs	r3, #16
 8000e1e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e20:	2302      	movs	r3, #2
 8000e22:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e24:	2300      	movs	r3, #0
 8000e26:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e28:	2300      	movs	r3, #0
 8000e2a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e2c:	2306      	movs	r3, #6
 8000e2e:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e34:	4619      	mov	r1, r3
 8000e36:	480e      	ldr	r0, [pc, #56]	@ (8000e70 <HAL_I2S_MspInit+0xf8>)
 8000e38:	f000 fec2 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000e3c:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000e40:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e42:	2302      	movs	r3, #2
 8000e44:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000e56:	4619      	mov	r1, r3
 8000e58:	4806      	ldr	r0, [pc, #24]	@ (8000e74 <HAL_I2S_MspInit+0xfc>)
 8000e5a:	f000 feb1 	bl	8001bc0 <HAL_GPIO_Init>

  /* USER CODE END SPI3_MspInit 1 */

  }

}
 8000e5e:	bf00      	nop
 8000e60:	3738      	adds	r7, #56	@ 0x38
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	40003c00 	.word	0x40003c00
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000
 8000e74:	40020800 	.word	0x40020800

08000e78 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b08a      	sub	sp, #40	@ 0x28
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e80:	f107 0314 	add.w	r3, r7, #20
 8000e84:	2200      	movs	r2, #0
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	605a      	str	r2, [r3, #4]
 8000e8a:	609a      	str	r2, [r3, #8]
 8000e8c:	60da      	str	r2, [r3, #12]
 8000e8e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	4a19      	ldr	r2, [pc, #100]	@ (8000efc <HAL_SPI_MspInit+0x84>)
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d12b      	bne.n	8000ef2 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	613b      	str	r3, [r7, #16]
 8000e9e:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ea2:	4a17      	ldr	r2, [pc, #92]	@ (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ea4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000ea8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000eaa:	4b15      	ldr	r3, [pc, #84]	@ (8000f00 <HAL_SPI_MspInit+0x88>)
 8000eac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000eae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000eb2:	613b      	str	r3, [r7, #16]
 8000eb4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
 8000eba:	4b11      	ldr	r3, [pc, #68]	@ (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000ebe:	4a10      	ldr	r2, [pc, #64]	@ (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ec6:	4b0e      	ldr	r3, [pc, #56]	@ (8000f00 <HAL_SPI_MspInit+0x88>)
 8000ec8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	60fb      	str	r3, [r7, #12]
 8000ed0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000ed2:	23e0      	movs	r3, #224	@ 0xe0
 8000ed4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed6:	2302      	movs	r3, #2
 8000ed8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000ee2:	2305      	movs	r3, #5
 8000ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ee6:	f107 0314 	add.w	r3, r7, #20
 8000eea:	4619      	mov	r1, r3
 8000eec:	4805      	ldr	r0, [pc, #20]	@ (8000f04 <HAL_SPI_MspInit+0x8c>)
 8000eee:	f000 fe67 	bl	8001bc0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000ef2:	bf00      	nop
 8000ef4:	3728      	adds	r7, #40	@ 0x28
 8000ef6:	46bd      	mov	sp, r7
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	40013000 	.word	0x40013000
 8000f00:	40023800 	.word	0x40023800
 8000f04:	40020000 	.word	0x40020000

08000f08 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f08:	b580      	push	{r7, lr}
 8000f0a:	b086      	sub	sp, #24
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a3a      	ldr	r2, [pc, #232]	@ (8001000 <HAL_TIM_Base_MspInit+0xf8>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d13e      	bne.n	8000f98 <HAL_TIM_Base_MspInit+0x90>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
 8000f1e:	4b39      	ldr	r3, [pc, #228]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000f20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f22:	4a38      	ldr	r2, [pc, #224]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000f2a:	4b36      	ldr	r3, [pc, #216]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000f2e:	f003 0301 	and.w	r3, r3, #1
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	697b      	ldr	r3, [r7, #20]

    /* TIM1 DMA Init */
    /* TIM1_CH1 Init */
    hdma_tim1_ch1.Instance = DMA2_Stream1;
 8000f36:	4b34      	ldr	r3, [pc, #208]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f38:	4a34      	ldr	r2, [pc, #208]	@ (800100c <HAL_TIM_Base_MspInit+0x104>)
 8000f3a:	601a      	str	r2, [r3, #0]
    hdma_tim1_ch1.Init.Channel = DMA_CHANNEL_6;
 8000f3c:	4b32      	ldr	r3, [pc, #200]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f3e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8000f42:	605a      	str	r2, [r3, #4]
    hdma_tim1_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f44:	4b30      	ldr	r3, [pc, #192]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f46:	2240      	movs	r2, #64	@ 0x40
 8000f48:	609a      	str	r2, [r3, #8]
    hdma_tim1_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f4a:	4b2f      	ldr	r3, [pc, #188]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	60da      	str	r2, [r3, #12]
    hdma_tim1_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8000f50:	4b2d      	ldr	r3, [pc, #180]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f52:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000f56:	611a      	str	r2, [r3, #16]
    hdma_tim1_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000f58:	4b2b      	ldr	r3, [pc, #172]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f5a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000f5e:	615a      	str	r2, [r3, #20]
    hdma_tim1_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000f60:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f66:	619a      	str	r2, [r3, #24]
    hdma_tim1_ch1.Init.Mode = DMA_NORMAL;
 8000f68:	4b27      	ldr	r3, [pc, #156]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	61da      	str	r2, [r3, #28]
    hdma_tim1_ch1.Init.Priority = DMA_PRIORITY_LOW;
 8000f6e:	4b26      	ldr	r3, [pc, #152]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	621a      	str	r2, [r3, #32]
    hdma_tim1_ch1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f74:	4b24      	ldr	r3, [pc, #144]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_tim1_ch1) != HAL_OK)
 8000f7a:	4823      	ldr	r0, [pc, #140]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f7c:	f000 fb36 	bl	80015ec <HAL_DMA_Init>
 8000f80:	4603      	mov	r3, r0
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d001      	beq.n	8000f8a <HAL_TIM_Base_MspInit+0x82>
    {
      Error_Handler();
 8000f86:	f7ff fe81 	bl	8000c8c <Error_Handler>
    }

    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_CC1],hdma_tim1_ch1);
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a1e      	ldr	r2, [pc, #120]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f8e:	625a      	str	r2, [r3, #36]	@ 0x24
 8000f90:	4a1d      	ldr	r2, [pc, #116]	@ (8001008 <HAL_TIM_Base_MspInit+0x100>)
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	6393      	str	r3, [r2, #56]	@ 0x38
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000f96:	e02e      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM2)
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000fa0:	d116      	bne.n	8000fd0 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000fa2:	2300      	movs	r3, #0
 8000fa4:	613b      	str	r3, [r7, #16]
 8000fa6:	4b17      	ldr	r3, [pc, #92]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000faa:	4a16      	ldr	r2, [pc, #88]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000fac:	f043 0301 	orr.w	r3, r3, #1
 8000fb0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fb2:	4b14      	ldr	r3, [pc, #80]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fb6:	f003 0301 	and.w	r3, r3, #1
 8000fba:	613b      	str	r3, [r7, #16]
 8000fbc:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	201c      	movs	r0, #28
 8000fc4:	f000 fadb 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fc8:	201c      	movs	r0, #28
 8000fca:	f000 faf4 	bl	80015b6 <HAL_NVIC_EnableIRQ>
}
 8000fce:	e012      	b.n	8000ff6 <HAL_TIM_Base_MspInit+0xee>
  else if(htim_base->Instance==TIM4)
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	681b      	ldr	r3, [r3, #0]
 8000fd4:	4a0e      	ldr	r2, [pc, #56]	@ (8001010 <HAL_TIM_Base_MspInit+0x108>)
 8000fd6:	4293      	cmp	r3, r2
 8000fd8:	d10d      	bne.n	8000ff6 <HAL_TIM_Base_MspInit+0xee>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
 8000fde:	4b09      	ldr	r3, [pc, #36]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000fe0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fe2:	4a08      	ldr	r2, [pc, #32]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000fe4:	f043 0304 	orr.w	r3, r3, #4
 8000fe8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000fea:	4b06      	ldr	r3, [pc, #24]	@ (8001004 <HAL_TIM_Base_MspInit+0xfc>)
 8000fec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000fee:	f003 0304 	and.w	r3, r3, #4
 8000ff2:	60fb      	str	r3, [r7, #12]
 8000ff4:	68fb      	ldr	r3, [r7, #12]
}
 8000ff6:	bf00      	nop
 8000ff8:	3718      	adds	r7, #24
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40010000 	.word	0x40010000
 8001004:	40023800 	.word	0x40023800
 8001008:	20000264 	.word	0x20000264
 800100c:	40026428 	.word	0x40026428
 8001010:	40000800 	.word	0x40000800

08001014 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	@ 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a25      	ldr	r2, [pc, #148]	@ (80010c8 <HAL_TIM_MspPostInit+0xb4>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d11f      	bne.n	8001076 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b24      	ldr	r3, [pc, #144]	@ (80010cc <HAL_TIM_MspPostInit+0xb8>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800103e:	4a23      	ldr	r2, [pc, #140]	@ (80010cc <HAL_TIM_MspPostInit+0xb8>)
 8001040:	f043 0310 	orr.w	r3, r3, #16
 8001044:	6313      	str	r3, [r2, #48]	@ 0x30
 8001046:	4b21      	ldr	r3, [pc, #132]	@ (80010cc <HAL_TIM_MspPostInit+0xb8>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800104a:	f003 0310 	and.w	r3, r3, #16
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001052:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001056:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	2302      	movs	r3, #2
 800105a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105c:	2300      	movs	r3, #0
 800105e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001060:	2300      	movs	r3, #0
 8001062:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001064:	2301      	movs	r3, #1
 8001066:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001068:	f107 0314 	add.w	r3, r7, #20
 800106c:	4619      	mov	r1, r3
 800106e:	4818      	ldr	r0, [pc, #96]	@ (80010d0 <HAL_TIM_MspPostInit+0xbc>)
 8001070:	f000 fda6 	bl	8001bc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001074:	e023      	b.n	80010be <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM4)
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4a16      	ldr	r2, [pc, #88]	@ (80010d4 <HAL_TIM_MspPostInit+0xc0>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d11e      	bne.n	80010be <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001080:	2300      	movs	r3, #0
 8001082:	60fb      	str	r3, [r7, #12]
 8001084:	4b11      	ldr	r3, [pc, #68]	@ (80010cc <HAL_TIM_MspPostInit+0xb8>)
 8001086:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001088:	4a10      	ldr	r2, [pc, #64]	@ (80010cc <HAL_TIM_MspPostInit+0xb8>)
 800108a:	f043 0308 	orr.w	r3, r3, #8
 800108e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001090:	4b0e      	ldr	r3, [pc, #56]	@ (80010cc <HAL_TIM_MspPostInit+0xb8>)
 8001092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001094:	f003 0308 	and.w	r3, r3, #8
 8001098:	60fb      	str	r3, [r7, #12]
 800109a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800109c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80010a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010a2:	2302      	movs	r3, #2
 80010a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a6:	2300      	movs	r3, #0
 80010a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010aa:	2300      	movs	r3, #0
 80010ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80010ae:	2302      	movs	r3, #2
 80010b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80010b2:	f107 0314 	add.w	r3, r7, #20
 80010b6:	4619      	mov	r1, r3
 80010b8:	4807      	ldr	r0, [pc, #28]	@ (80010d8 <HAL_TIM_MspPostInit+0xc4>)
 80010ba:	f000 fd81 	bl	8001bc0 <HAL_GPIO_Init>
}
 80010be:	bf00      	nop
 80010c0:	3728      	adds	r7, #40	@ 0x28
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	40010000 	.word	0x40010000
 80010cc:	40023800 	.word	0x40023800
 80010d0:	40021000 	.word	0x40021000
 80010d4:	40000800 	.word	0x40000800
 80010d8:	40020c00 	.word	0x40020c00

080010dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <NMI_Handler+0x4>

080010e4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <HardFault_Handler+0x4>

080010ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <MemManage_Handler+0x4>

080010f4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010f8:	bf00      	nop
 80010fa:	e7fd      	b.n	80010f8 <BusFault_Handler+0x4>

080010fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001100:	bf00      	nop
 8001102:	e7fd      	b.n	8001100 <UsageFault_Handler+0x4>

08001104 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001108:	bf00      	nop
 800110a:	46bd      	mov	sp, r7
 800110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001110:	4770      	bx	lr

08001112 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001112:	b480      	push	{r7}
 8001114:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001116:	bf00      	nop
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr

0800112e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001132:	f000 f905 	bl	8001340 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	 clk++;
 8001140:	4b0d      	ldr	r3, [pc, #52]	@ (8001178 <EXTI0_IRQHandler+0x3c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	3301      	adds	r3, #1
 8001146:	4a0c      	ldr	r2, [pc, #48]	@ (8001178 <EXTI0_IRQHandler+0x3c>)
 8001148:	6013      	str	r3, [r2, #0]
//		HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_RESET);
//		HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_RESET);
//		//HAL_GPIO_WritePin(GPIOD, LD6_Pin, GPIO_PIN_RESET);

		if(clk == 4){
 800114a:	4b0b      	ldr	r3, [pc, #44]	@ (8001178 <EXTI0_IRQHandler+0x3c>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	2b04      	cmp	r3, #4
 8001150:	d102      	bne.n	8001158 <EXTI0_IRQHandler+0x1c>
			clk = 0;
 8001152:	4b09      	ldr	r3, [pc, #36]	@ (8001178 <EXTI0_IRQHandler+0x3c>)
 8001154:	2200      	movs	r2, #0
 8001156:	601a      	str	r2, [r3, #0]
		}

	if (clk == 0) {
 8001158:	4b07      	ldr	r3, [pc, #28]	@ (8001178 <EXTI0_IRQHandler+0x3c>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	2b00      	cmp	r3, #0
 800115e:	d006      	beq.n	800116e <EXTI0_IRQHandler+0x32>
		//HAL_GPIO_WritePin(GPIOD, LD3_Pin, GPIO_PIN_SET);   // LED LD3 ON
	} else if (clk == 1) {
 8001160:	4b05      	ldr	r3, [pc, #20]	@ (8001178 <EXTI0_IRQHandler+0x3c>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	2b01      	cmp	r3, #1
 8001166:	d002      	beq.n	800116e <EXTI0_IRQHandler+0x32>
		//HAL_GPIO_WritePin(GPIOD, LD4_Pin, GPIO_PIN_SET);   // LED LD4 ON
	} else if (clk == 2) {
 8001168:	4b03      	ldr	r3, [pc, #12]	@ (8001178 <EXTI0_IRQHandler+0x3c>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	2b02      	cmp	r3, #2
	} else if (clk == 3) {
		//HAL_GPIO_WritePin(GPIOD, LD5_Pin, GPIO_PIN_SET);   // LED LD5 ON
	}

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800116e:	2001      	movs	r0, #1
 8001170:	f000 fedc 	bl	8001f2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001174:	bf00      	nop
 8001176:	bd80      	pop	{r7, pc}
 8001178:	200002c4 	.word	0x200002c4

0800117c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <TIM2_IRQHandler+0x10>)
 8001182:	f004 fe3f 	bl	8005e04 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	200001d4 	.word	0x200001d4

08001190 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim1_ch1);
 8001194:	4802      	ldr	r0, [pc, #8]	@ (80011a0 <DMA2_Stream1_IRQHandler+0x10>)
 8001196:	f000 fad7 	bl	8001748 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800119a:	bf00      	nop
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000264 	.word	0x20000264

080011a4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 80011a8:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <OTG_FS_IRQHandler+0x10>)
 80011aa:	f001 f9c3 	bl	8002534 <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	200006ac 	.word	0x200006ac

080011b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b086      	sub	sp, #24
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80011c0:	4a14      	ldr	r2, [pc, #80]	@ (8001214 <_sbrk+0x5c>)
 80011c2:	4b15      	ldr	r3, [pc, #84]	@ (8001218 <_sbrk+0x60>)
 80011c4:	1ad3      	subs	r3, r2, r3
 80011c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <_sbrk+0x64>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d102      	bne.n	80011da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80011d4:	4b11      	ldr	r3, [pc, #68]	@ (800121c <_sbrk+0x64>)
 80011d6:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <_sbrk+0x68>)
 80011d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80011da:	4b10      	ldr	r3, [pc, #64]	@ (800121c <_sbrk+0x64>)
 80011dc:	681a      	ldr	r2, [r3, #0]
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4413      	add	r3, r2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	429a      	cmp	r2, r3
 80011e6:	d207      	bcs.n	80011f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80011e8:	f009 fa7a 	bl	800a6e0 <__errno>
 80011ec:	4603      	mov	r3, r0
 80011ee:	220c      	movs	r2, #12
 80011f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80011f2:	f04f 33ff 	mov.w	r3, #4294967295
 80011f6:	e009      	b.n	800120c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80011f8:	4b08      	ldr	r3, [pc, #32]	@ (800121c <_sbrk+0x64>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80011fe:	4b07      	ldr	r3, [pc, #28]	@ (800121c <_sbrk+0x64>)
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4413      	add	r3, r2
 8001206:	4a05      	ldr	r2, [pc, #20]	@ (800121c <_sbrk+0x64>)
 8001208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3718      	adds	r7, #24
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}
 8001214:	20020000 	.word	0x20020000
 8001218:	00000400 	.word	0x00000400
 800121c:	200002c8 	.word	0x200002c8
 8001220:	20000bd8 	.word	0x20000bd8

08001224 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001228:	4b06      	ldr	r3, [pc, #24]	@ (8001244 <SystemInit+0x20>)
 800122a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800122e:	4a05      	ldr	r2, [pc, #20]	@ (8001244 <SystemInit+0x20>)
 8001230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001238:	bf00      	nop
 800123a:	46bd      	mov	sp, r7
 800123c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001240:	4770      	bx	lr
 8001242:	bf00      	nop
 8001244:	e000ed00 	.word	0xe000ed00

08001248 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001248:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001280 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800124c:	f7ff ffea 	bl	8001224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001250:	480c      	ldr	r0, [pc, #48]	@ (8001284 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001252:	490d      	ldr	r1, [pc, #52]	@ (8001288 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001254:	4a0d      	ldr	r2, [pc, #52]	@ (800128c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001256:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001258:	e002      	b.n	8001260 <LoopCopyDataInit>

0800125a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800125a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800125c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800125e:	3304      	adds	r3, #4

08001260 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001260:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001262:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001264:	d3f9      	bcc.n	800125a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001266:	4a0a      	ldr	r2, [pc, #40]	@ (8001290 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001268:	4c0a      	ldr	r4, [pc, #40]	@ (8001294 <LoopFillZerobss+0x22>)
  movs r3, #0
 800126a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800126c:	e001      	b.n	8001272 <LoopFillZerobss>

0800126e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800126e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001270:	3204      	adds	r2, #4

08001272 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001272:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001274:	d3fb      	bcc.n	800126e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001276:	f009 fa39 	bl	800a6ec <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800127a:	f7ff f91d 	bl	80004b8 <main>
  bx  lr    
 800127e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001280:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001284:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001288:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800128c:	0800a818 	.word	0x0800a818
  ldr r2, =_sbss
 8001290:	2000007c 	.word	0x2000007c
  ldr r4, =_ebss
 8001294:	20000bd4 	.word	0x20000bd4

08001298 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001298:	e7fe      	b.n	8001298 <ADC_IRQHandler>
	...

0800129c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012a0:	4b0e      	ldr	r3, [pc, #56]	@ (80012dc <HAL_Init+0x40>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	4a0d      	ldr	r2, [pc, #52]	@ (80012dc <HAL_Init+0x40>)
 80012a6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80012aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012ac:	4b0b      	ldr	r3, [pc, #44]	@ (80012dc <HAL_Init+0x40>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	4a0a      	ldr	r2, [pc, #40]	@ (80012dc <HAL_Init+0x40>)
 80012b2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80012b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012b8:	4b08      	ldr	r3, [pc, #32]	@ (80012dc <HAL_Init+0x40>)
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4a07      	ldr	r2, [pc, #28]	@ (80012dc <HAL_Init+0x40>)
 80012be:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012c4:	2003      	movs	r0, #3
 80012c6:	f000 f94f 	bl	8001568 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012ca:	2000      	movs	r0, #0
 80012cc:	f000 f808 	bl	80012e0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012d0:	f7ff fce2 	bl	8000c98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012d4:	2300      	movs	r3, #0
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	bd80      	pop	{r7, pc}
 80012da:	bf00      	nop
 80012dc:	40023c00 	.word	0x40023c00

080012e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012e8:	4b12      	ldr	r3, [pc, #72]	@ (8001334 <HAL_InitTick+0x54>)
 80012ea:	681a      	ldr	r2, [r3, #0]
 80012ec:	4b12      	ldr	r3, [pc, #72]	@ (8001338 <HAL_InitTick+0x58>)
 80012ee:	781b      	ldrb	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80012f6:	fbb3 f3f1 	udiv	r3, r3, r1
 80012fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 f967 	bl	80015d2 <HAL_SYSTICK_Config>
 8001304:	4603      	mov	r3, r0
 8001306:	2b00      	cmp	r3, #0
 8001308:	d001      	beq.n	800130e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800130a:	2301      	movs	r3, #1
 800130c:	e00e      	b.n	800132c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	2b0f      	cmp	r3, #15
 8001312:	d80a      	bhi.n	800132a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001314:	2200      	movs	r2, #0
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	f04f 30ff 	mov.w	r0, #4294967295
 800131c:	f000 f92f 	bl	800157e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001320:	4a06      	ldr	r2, [pc, #24]	@ (800133c <HAL_InitTick+0x5c>)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001326:	2300      	movs	r3, #0
 8001328:	e000      	b.n	800132c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800132a:	2301      	movs	r3, #1
}
 800132c:	4618      	mov	r0, r3
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000000 	.word	0x20000000
 8001338:	20000008 	.word	0x20000008
 800133c:	20000004 	.word	0x20000004

08001340 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001344:	4b06      	ldr	r3, [pc, #24]	@ (8001360 <HAL_IncTick+0x20>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	461a      	mov	r2, r3
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_IncTick+0x24>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	4413      	add	r3, r2
 8001350:	4a04      	ldr	r2, [pc, #16]	@ (8001364 <HAL_IncTick+0x24>)
 8001352:	6013      	str	r3, [r2, #0]
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	20000008 	.word	0x20000008
 8001364:	200002cc 	.word	0x200002cc

08001368 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  return uwTick;
 800136c:	4b03      	ldr	r3, [pc, #12]	@ (800137c <HAL_GetTick+0x14>)
 800136e:	681b      	ldr	r3, [r3, #0]
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	200002cc 	.word	0x200002cc

08001380 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001388:	f7ff ffee 	bl	8001368 <HAL_GetTick>
 800138c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001398:	d005      	beq.n	80013a6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800139a:	4b0a      	ldr	r3, [pc, #40]	@ (80013c4 <HAL_Delay+0x44>)
 800139c:	781b      	ldrb	r3, [r3, #0]
 800139e:	461a      	mov	r2, r3
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	4413      	add	r3, r2
 80013a4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013a6:	bf00      	nop
 80013a8:	f7ff ffde 	bl	8001368 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	68bb      	ldr	r3, [r7, #8]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	68fa      	ldr	r2, [r7, #12]
 80013b4:	429a      	cmp	r2, r3
 80013b6:	d8f7      	bhi.n	80013a8 <HAL_Delay+0x28>
  {
  }
}
 80013b8:	bf00      	nop
 80013ba:	bf00      	nop
 80013bc:	3710      	adds	r7, #16
 80013be:	46bd      	mov	sp, r7
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	20000008 	.word	0x20000008

080013c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b085      	sub	sp, #20
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	f003 0307 	and.w	r3, r3, #7
 80013d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80013d8:	4b0c      	ldr	r3, [pc, #48]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013da:	68db      	ldr	r3, [r3, #12]
 80013dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80013de:	68ba      	ldr	r2, [r7, #8]
 80013e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80013e4:	4013      	ands	r3, r2
 80013e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80013ec:	68bb      	ldr	r3, [r7, #8]
 80013ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80013f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80013f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80013f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80013fa:	4a04      	ldr	r2, [pc, #16]	@ (800140c <__NVIC_SetPriorityGrouping+0x44>)
 80013fc:	68bb      	ldr	r3, [r7, #8]
 80013fe:	60d3      	str	r3, [r2, #12]
}
 8001400:	bf00      	nop
 8001402:	3714      	adds	r7, #20
 8001404:	46bd      	mov	sp, r7
 8001406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800140a:	4770      	bx	lr
 800140c:	e000ed00 	.word	0xe000ed00

08001410 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001410:	b480      	push	{r7}
 8001412:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001414:	4b04      	ldr	r3, [pc, #16]	@ (8001428 <__NVIC_GetPriorityGrouping+0x18>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	0a1b      	lsrs	r3, r3, #8
 800141a:	f003 0307 	and.w	r3, r3, #7
}
 800141e:	4618      	mov	r0, r3
 8001420:	46bd      	mov	sp, r7
 8001422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001426:	4770      	bx	lr
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800142c:	b480      	push	{r7}
 800142e:	b083      	sub	sp, #12
 8001430:	af00      	add	r7, sp, #0
 8001432:	4603      	mov	r3, r0
 8001434:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001436:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800143a:	2b00      	cmp	r3, #0
 800143c:	db0b      	blt.n	8001456 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800143e:	79fb      	ldrb	r3, [r7, #7]
 8001440:	f003 021f 	and.w	r2, r3, #31
 8001444:	4907      	ldr	r1, [pc, #28]	@ (8001464 <__NVIC_EnableIRQ+0x38>)
 8001446:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800144a:	095b      	lsrs	r3, r3, #5
 800144c:	2001      	movs	r0, #1
 800144e:	fa00 f202 	lsl.w	r2, r0, r2
 8001452:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001456:	bf00      	nop
 8001458:	370c      	adds	r7, #12
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	e000e100 	.word	0xe000e100

08001468 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	6039      	str	r1, [r7, #0]
 8001472:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001474:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db0a      	blt.n	8001492 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	b2da      	uxtb	r2, r3
 8001480:	490c      	ldr	r1, [pc, #48]	@ (80014b4 <__NVIC_SetPriority+0x4c>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	0112      	lsls	r2, r2, #4
 8001488:	b2d2      	uxtb	r2, r2
 800148a:	440b      	add	r3, r1
 800148c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001490:	e00a      	b.n	80014a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	b2da      	uxtb	r2, r3
 8001496:	4908      	ldr	r1, [pc, #32]	@ (80014b8 <__NVIC_SetPriority+0x50>)
 8001498:	79fb      	ldrb	r3, [r7, #7]
 800149a:	f003 030f 	and.w	r3, r3, #15
 800149e:	3b04      	subs	r3, #4
 80014a0:	0112      	lsls	r2, r2, #4
 80014a2:	b2d2      	uxtb	r2, r2
 80014a4:	440b      	add	r3, r1
 80014a6:	761a      	strb	r2, [r3, #24]
}
 80014a8:	bf00      	nop
 80014aa:	370c      	adds	r7, #12
 80014ac:	46bd      	mov	sp, r7
 80014ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b2:	4770      	bx	lr
 80014b4:	e000e100 	.word	0xe000e100
 80014b8:	e000ed00 	.word	0xe000ed00

080014bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014bc:	b480      	push	{r7}
 80014be:	b089      	sub	sp, #36	@ 0x24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f003 0307 	and.w	r3, r3, #7
 80014ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014d0:	69fb      	ldr	r3, [r7, #28]
 80014d2:	f1c3 0307 	rsb	r3, r3, #7
 80014d6:	2b04      	cmp	r3, #4
 80014d8:	bf28      	it	cs
 80014da:	2304      	movcs	r3, #4
 80014dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	3304      	adds	r3, #4
 80014e2:	2b06      	cmp	r3, #6
 80014e4:	d902      	bls.n	80014ec <NVIC_EncodePriority+0x30>
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3b03      	subs	r3, #3
 80014ea:	e000      	b.n	80014ee <NVIC_EncodePriority+0x32>
 80014ec:	2300      	movs	r3, #0
 80014ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014f0:	f04f 32ff 	mov.w	r2, #4294967295
 80014f4:	69bb      	ldr	r3, [r7, #24]
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43da      	mvns	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	401a      	ands	r2, r3
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001504:	f04f 31ff 	mov.w	r1, #4294967295
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	fa01 f303 	lsl.w	r3, r1, r3
 800150e:	43d9      	mvns	r1, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001514:	4313      	orrs	r3, r2
         );
}
 8001516:	4618      	mov	r0, r3
 8001518:	3724      	adds	r7, #36	@ 0x24
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
	...

08001524 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b082      	sub	sp, #8
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	3b01      	subs	r3, #1
 8001530:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001534:	d301      	bcc.n	800153a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001536:	2301      	movs	r3, #1
 8001538:	e00f      	b.n	800155a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800153a:	4a0a      	ldr	r2, [pc, #40]	@ (8001564 <SysTick_Config+0x40>)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	3b01      	subs	r3, #1
 8001540:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001542:	210f      	movs	r1, #15
 8001544:	f04f 30ff 	mov.w	r0, #4294967295
 8001548:	f7ff ff8e 	bl	8001468 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800154c:	4b05      	ldr	r3, [pc, #20]	@ (8001564 <SysTick_Config+0x40>)
 800154e:	2200      	movs	r2, #0
 8001550:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001552:	4b04      	ldr	r3, [pc, #16]	@ (8001564 <SysTick_Config+0x40>)
 8001554:	2207      	movs	r2, #7
 8001556:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001558:	2300      	movs	r3, #0
}
 800155a:	4618      	mov	r0, r3
 800155c:	3708      	adds	r7, #8
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	e000e010 	.word	0xe000e010

08001568 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b082      	sub	sp, #8
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001570:	6878      	ldr	r0, [r7, #4]
 8001572:	f7ff ff29 	bl	80013c8 <__NVIC_SetPriorityGrouping>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800157e:	b580      	push	{r7, lr}
 8001580:	b086      	sub	sp, #24
 8001582:	af00      	add	r7, sp, #0
 8001584:	4603      	mov	r3, r0
 8001586:	60b9      	str	r1, [r7, #8]
 8001588:	607a      	str	r2, [r7, #4]
 800158a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001590:	f7ff ff3e 	bl	8001410 <__NVIC_GetPriorityGrouping>
 8001594:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001596:	687a      	ldr	r2, [r7, #4]
 8001598:	68b9      	ldr	r1, [r7, #8]
 800159a:	6978      	ldr	r0, [r7, #20]
 800159c:	f7ff ff8e 	bl	80014bc <NVIC_EncodePriority>
 80015a0:	4602      	mov	r2, r0
 80015a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a6:	4611      	mov	r1, r2
 80015a8:	4618      	mov	r0, r3
 80015aa:	f7ff ff5d 	bl	8001468 <__NVIC_SetPriority>
}
 80015ae:	bf00      	nop
 80015b0:	3718      	adds	r7, #24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	bd80      	pop	{r7, pc}

080015b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b6:	b580      	push	{r7, lr}
 80015b8:	b082      	sub	sp, #8
 80015ba:	af00      	add	r7, sp, #0
 80015bc:	4603      	mov	r3, r0
 80015be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff ff31 	bl	800142c <__NVIC_EnableIRQ>
}
 80015ca:	bf00      	nop
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}

080015d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015d2:	b580      	push	{r7, lr}
 80015d4:	b082      	sub	sp, #8
 80015d6:	af00      	add	r7, sp, #0
 80015d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015da:	6878      	ldr	r0, [r7, #4]
 80015dc:	f7ff ffa2 	bl	8001524 <SysTick_Config>
 80015e0:	4603      	mov	r3, r0
}
 80015e2:	4618      	mov	r0, r3
 80015e4:	3708      	adds	r7, #8
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
	...

080015ec <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015f4:	2300      	movs	r3, #0
 80015f6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80015f8:	f7ff feb6 	bl	8001368 <HAL_GetTick>
 80015fc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e099      	b.n	800173c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2202      	movs	r2, #2
 800160c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	f022 0201 	bic.w	r2, r2, #1
 8001626:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001628:	e00f      	b.n	800164a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800162a:	f7ff fe9d 	bl	8001368 <HAL_GetTick>
 800162e:	4602      	mov	r2, r0
 8001630:	693b      	ldr	r3, [r7, #16]
 8001632:	1ad3      	subs	r3, r2, r3
 8001634:	2b05      	cmp	r3, #5
 8001636:	d908      	bls.n	800164a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	2220      	movs	r2, #32
 800163c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2203      	movs	r2, #3
 8001642:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001646:	2303      	movs	r3, #3
 8001648:	e078      	b.n	800173c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	2b00      	cmp	r3, #0
 8001656:	d1e8      	bne.n	800162a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001660:	697a      	ldr	r2, [r7, #20]
 8001662:	4b38      	ldr	r3, [pc, #224]	@ (8001744 <HAL_DMA_Init+0x158>)
 8001664:	4013      	ands	r3, r2
 8001666:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	685a      	ldr	r2, [r3, #4]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001676:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001682:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	699b      	ldr	r3, [r3, #24]
 8001688:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800168e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6a1b      	ldr	r3, [r3, #32]
 8001694:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001696:	697a      	ldr	r2, [r7, #20]
 8001698:	4313      	orrs	r3, r2
 800169a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a0:	2b04      	cmp	r3, #4
 80016a2:	d107      	bne.n	80016b4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016ac:	4313      	orrs	r3, r2
 80016ae:	697a      	ldr	r2, [r7, #20]
 80016b0:	4313      	orrs	r3, r2
 80016b2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	697a      	ldr	r2, [r7, #20]
 80016ba:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	695b      	ldr	r3, [r3, #20]
 80016c2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d117      	bne.n	800170e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016e2:	697a      	ldr	r2, [r7, #20]
 80016e4:	4313      	orrs	r3, r2
 80016e6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00e      	beq.n	800170e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f9e9 	bl	8001ac8 <DMA_CheckFifoParam>
 80016f6:	4603      	mov	r3, r0
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2240      	movs	r2, #64	@ 0x40
 8001700:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2201      	movs	r2, #1
 8001706:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 800170a:	2301      	movs	r3, #1
 800170c:	e016      	b.n	800173c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	697a      	ldr	r2, [r7, #20]
 8001714:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001716:	6878      	ldr	r0, [r7, #4]
 8001718:	f000 f9a0 	bl	8001a5c <DMA_CalcBaseAndBitshift>
 800171c:	4603      	mov	r3, r0
 800171e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001724:	223f      	movs	r2, #63	@ 0x3f
 8001726:	409a      	lsls	r2, r3
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2200      	movs	r2, #0
 8001730:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	2201      	movs	r2, #1
 8001736:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 800173a:	2300      	movs	r3, #0
}
 800173c:	4618      	mov	r0, r3
 800173e:	3718      	adds	r7, #24
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	f010803f 	.word	0xf010803f

08001748 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001750:	2300      	movs	r3, #0
 8001752:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001754:	4b8e      	ldr	r3, [pc, #568]	@ (8001990 <HAL_DMA_IRQHandler+0x248>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a8e      	ldr	r2, [pc, #568]	@ (8001994 <HAL_DMA_IRQHandler+0x24c>)
 800175a:	fba2 2303 	umull	r2, r3, r2, r3
 800175e:	0a9b      	lsrs	r3, r3, #10
 8001760:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001766:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001768:	693b      	ldr	r3, [r7, #16]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	2208      	movs	r2, #8
 8001774:	409a      	lsls	r2, r3
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4013      	ands	r3, r2
 800177a:	2b00      	cmp	r3, #0
 800177c:	d01a      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 0304 	and.w	r3, r3, #4
 8001788:	2b00      	cmp	r3, #0
 800178a:	d013      	beq.n	80017b4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f022 0204 	bic.w	r2, r2, #4
 800179a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017a0:	2208      	movs	r2, #8
 80017a2:	409a      	lsls	r2, r3
 80017a4:	693b      	ldr	r3, [r7, #16]
 80017a6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017ac:	f043 0201 	orr.w	r2, r3, #1
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017b8:	2201      	movs	r2, #1
 80017ba:	409a      	lsls	r2, r3
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4013      	ands	r3, r2
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d012      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	695b      	ldr	r3, [r3, #20]
 80017ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d00b      	beq.n	80017ea <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017d6:	2201      	movs	r2, #1
 80017d8:	409a      	lsls	r2, r3
 80017da:	693b      	ldr	r3, [r7, #16]
 80017dc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80017e2:	f043 0202 	orr.w	r2, r3, #2
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ee:	2204      	movs	r2, #4
 80017f0:	409a      	lsls	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	4013      	ands	r3, r2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d012      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	f003 0302 	and.w	r3, r3, #2
 8001804:	2b00      	cmp	r3, #0
 8001806:	d00b      	beq.n	8001820 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800180c:	2204      	movs	r2, #4
 800180e:	409a      	lsls	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001818:	f043 0204 	orr.w	r2, r3, #4
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001824:	2210      	movs	r2, #16
 8001826:	409a      	lsls	r2, r3
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	4013      	ands	r3, r2
 800182c:	2b00      	cmp	r3, #0
 800182e:	d043      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f003 0308 	and.w	r3, r3, #8
 800183a:	2b00      	cmp	r3, #0
 800183c:	d03c      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001842:	2210      	movs	r2, #16
 8001844:	409a      	lsls	r2, r3
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001854:	2b00      	cmp	r3, #0
 8001856:	d018      	beq.n	800188a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001862:	2b00      	cmp	r3, #0
 8001864:	d108      	bne.n	8001878 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	2b00      	cmp	r3, #0
 800186c:	d024      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	4798      	blx	r3
 8001876:	e01f      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800187c:	2b00      	cmp	r3, #0
 800187e:	d01b      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001884:	6878      	ldr	r0, [r7, #4]
 8001886:	4798      	blx	r3
 8001888:	e016      	b.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001894:	2b00      	cmp	r3, #0
 8001896:	d107      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0208 	bic.w	r2, r2, #8
 80018a6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	d003      	beq.n	80018b8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018b4:	6878      	ldr	r0, [r7, #4]
 80018b6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018bc:	2220      	movs	r2, #32
 80018be:	409a      	lsls	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	4013      	ands	r3, r2
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	f000 808f 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0310 	and.w	r3, r3, #16
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	f000 8087 	beq.w	80019e8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018de:	2220      	movs	r2, #32
 80018e0:	409a      	lsls	r2, r3
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018ec:	b2db      	uxtb	r3, r3
 80018ee:	2b05      	cmp	r3, #5
 80018f0:	d136      	bne.n	8001960 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	681a      	ldr	r2, [r3, #0]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f022 0216 	bic.w	r2, r2, #22
 8001900:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	695a      	ldr	r2, [r3, #20]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001910:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001916:	2b00      	cmp	r3, #0
 8001918:	d103      	bne.n	8001922 <HAL_DMA_IRQHandler+0x1da>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800191e:	2b00      	cmp	r3, #0
 8001920:	d007      	beq.n	8001932 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f022 0208 	bic.w	r2, r2, #8
 8001930:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001936:	223f      	movs	r2, #63	@ 0x3f
 8001938:	409a      	lsls	r2, r3
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	2201      	movs	r2, #1
 8001942:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	2200      	movs	r2, #0
 800194a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8001952:	2b00      	cmp	r3, #0
 8001954:	d07e      	beq.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800195a:	6878      	ldr	r0, [r7, #4]
 800195c:	4798      	blx	r3
        }
        return;
 800195e:	e079      	b.n	8001a54 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800196a:	2b00      	cmp	r3, #0
 800196c:	d01d      	beq.n	80019aa <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8001978:	2b00      	cmp	r3, #0
 800197a:	d10d      	bne.n	8001998 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001980:	2b00      	cmp	r3, #0
 8001982:	d031      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001988:	6878      	ldr	r0, [r7, #4]
 800198a:	4798      	blx	r3
 800198c:	e02c      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
 800198e:	bf00      	nop
 8001990:	20000000 	.word	0x20000000
 8001994:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800199c:	2b00      	cmp	r3, #0
 800199e:	d023      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	4798      	blx	r3
 80019a8:	e01e      	b.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d10f      	bne.n	80019d8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	681a      	ldr	r2, [r3, #0]
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f022 0210 	bic.w	r2, r2, #16
 80019c6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2201      	movs	r2, #1
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019e4:	6878      	ldr	r0, [r7, #4]
 80019e6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d032      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80019f4:	f003 0301 	and.w	r3, r3, #1
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d022      	beq.n	8001a42 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	2205      	movs	r2, #5
 8001a00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	681a      	ldr	r2, [r3, #0]
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f022 0201 	bic.w	r2, r2, #1
 8001a12:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001a14:	68bb      	ldr	r3, [r7, #8]
 8001a16:	3301      	adds	r3, #1
 8001a18:	60bb      	str	r3, [r7, #8]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d307      	bcc.n	8001a30 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f003 0301 	and.w	r3, r3, #1
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d1f2      	bne.n	8001a14 <HAL_DMA_IRQHandler+0x2cc>
 8001a2e:	e000      	b.n	8001a32 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001a30:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	2201      	movs	r2, #1
 8001a36:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d005      	beq.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
 8001a52:	e000      	b.n	8001a56 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001a54:	bf00      	nop
    }
  }
}
 8001a56:	3718      	adds	r7, #24
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b085      	sub	sp, #20
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	3b10      	subs	r3, #16
 8001a6c:	4a14      	ldr	r2, [pc, #80]	@ (8001ac0 <DMA_CalcBaseAndBitshift+0x64>)
 8001a6e:	fba2 2303 	umull	r2, r3, r2, r3
 8001a72:	091b      	lsrs	r3, r3, #4
 8001a74:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001a76:	4a13      	ldr	r2, [pc, #76]	@ (8001ac4 <DMA_CalcBaseAndBitshift+0x68>)
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	4413      	add	r3, r2
 8001a7c:	781b      	ldrb	r3, [r3, #0]
 8001a7e:	461a      	mov	r2, r3
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2b03      	cmp	r3, #3
 8001a88:	d909      	bls.n	8001a9e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001a92:	f023 0303 	bic.w	r3, r3, #3
 8001a96:	1d1a      	adds	r2, r3, #4
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	659a      	str	r2, [r3, #88]	@ 0x58
 8001a9c:	e007      	b.n	8001aae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001aa6:	f023 0303 	bic.w	r3, r3, #3
 8001aaa:	687a      	ldr	r2, [r7, #4]
 8001aac:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3714      	adds	r7, #20
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	aaaaaaab 	.word	0xaaaaaaab
 8001ac4:	0800a800 	.word	0x0800a800

08001ac8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001ad8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	699b      	ldr	r3, [r3, #24]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d11f      	bne.n	8001b22 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001ae2:	68bb      	ldr	r3, [r7, #8]
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d856      	bhi.n	8001b96 <DMA_CheckFifoParam+0xce>
 8001ae8:	a201      	add	r2, pc, #4	@ (adr r2, 8001af0 <DMA_CheckFifoParam+0x28>)
 8001aea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001aee:	bf00      	nop
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b13 	.word	0x08001b13
 8001af8:	08001b01 	.word	0x08001b01
 8001afc:	08001b97 	.word	0x08001b97
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b04:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d046      	beq.n	8001b9a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b10:	e043      	b.n	8001b9a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b16:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b1a:	d140      	bne.n	8001b9e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b20:	e03d      	b.n	8001b9e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	699b      	ldr	r3, [r3, #24]
 8001b26:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001b2a:	d121      	bne.n	8001b70 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d837      	bhi.n	8001ba2 <DMA_CheckFifoParam+0xda>
 8001b32:	a201      	add	r2, pc, #4	@ (adr r2, 8001b38 <DMA_CheckFifoParam+0x70>)
 8001b34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b38:	08001b49 	.word	0x08001b49
 8001b3c:	08001b4f 	.word	0x08001b4f
 8001b40:	08001b49 	.word	0x08001b49
 8001b44:	08001b61 	.word	0x08001b61
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001b48:	2301      	movs	r3, #1
 8001b4a:	73fb      	strb	r3, [r7, #15]
      break;
 8001b4c:	e030      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b52:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d025      	beq.n	8001ba6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001b5e:	e022      	b.n	8001ba6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b64:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001b68:	d11f      	bne.n	8001baa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001b6e:	e01c      	b.n	8001baa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d903      	bls.n	8001b7e <DMA_CheckFifoParam+0xb6>
 8001b76:	68bb      	ldr	r3, [r7, #8]
 8001b78:	2b03      	cmp	r3, #3
 8001b7a:	d003      	beq.n	8001b84 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001b7c:	e018      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	73fb      	strb	r3, [r7, #15]
      break;
 8001b82:	e015      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001b88:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d00e      	beq.n	8001bae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	73fb      	strb	r3, [r7, #15]
      break;
 8001b94:	e00b      	b.n	8001bae <DMA_CheckFifoParam+0xe6>
      break;
 8001b96:	bf00      	nop
 8001b98:	e00a      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001b9a:	bf00      	nop
 8001b9c:	e008      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001b9e:	bf00      	nop
 8001ba0:	e006      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba2:	bf00      	nop
 8001ba4:	e004      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001ba6:	bf00      	nop
 8001ba8:	e002      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001baa:	bf00      	nop
 8001bac:	e000      	b.n	8001bb0 <DMA_CheckFifoParam+0xe8>
      break;
 8001bae:	bf00      	nop
    }
  } 
  
  return status; 
 8001bb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001bb2:	4618      	mov	r0, r3
 8001bb4:	3714      	adds	r7, #20
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop

08001bc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b089      	sub	sp, #36	@ 0x24
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
 8001bc8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	61fb      	str	r3, [r7, #28]
 8001bda:	e16b      	b.n	8001eb4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bdc:	2201      	movs	r2, #1
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	fa02 f303 	lsl.w	r3, r2, r3
 8001be4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	697a      	ldr	r2, [r7, #20]
 8001bec:	4013      	ands	r3, r2
 8001bee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	f040 815a 	bne.w	8001eae <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	685b      	ldr	r3, [r3, #4]
 8001bfe:	f003 0303 	and.w	r3, r3, #3
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d005      	beq.n	8001c12 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	2b02      	cmp	r3, #2
 8001c10:	d130      	bne.n	8001c74 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	689b      	ldr	r3, [r3, #8]
 8001c16:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c18:	69fb      	ldr	r3, [r7, #28]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	2203      	movs	r2, #3
 8001c1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c22:	43db      	mvns	r3, r3
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	4013      	ands	r3, r2
 8001c28:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c2a:	683b      	ldr	r3, [r7, #0]
 8001c2c:	68da      	ldr	r2, [r3, #12]
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	005b      	lsls	r3, r3, #1
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	69ba      	ldr	r2, [r7, #24]
 8001c38:	4313      	orrs	r3, r2
 8001c3a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	69ba      	ldr	r2, [r7, #24]
 8001c40:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c48:	2201      	movs	r2, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	091b      	lsrs	r3, r3, #4
 8001c5e:	f003 0201 	and.w	r2, r3, #1
 8001c62:	69fb      	ldr	r3, [r7, #28]
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	69ba      	ldr	r2, [r7, #24]
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c74:	683b      	ldr	r3, [r7, #0]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	f003 0303 	and.w	r3, r3, #3
 8001c7c:	2b03      	cmp	r3, #3
 8001c7e:	d017      	beq.n	8001cb0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	68db      	ldr	r3, [r3, #12]
 8001c84:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	005b      	lsls	r3, r3, #1
 8001c8a:	2203      	movs	r2, #3
 8001c8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c90:	43db      	mvns	r3, r3
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	4013      	ands	r3, r2
 8001c96:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	69fb      	ldr	r3, [r7, #28]
 8001c9e:	005b      	lsls	r3, r3, #1
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b02      	cmp	r3, #2
 8001cba:	d123      	bne.n	8001d04 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	08da      	lsrs	r2, r3, #3
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	3208      	adds	r2, #8
 8001cc4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	f003 0307 	and.w	r3, r3, #7
 8001cd0:	009b      	lsls	r3, r3, #2
 8001cd2:	220f      	movs	r2, #15
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	691a      	ldr	r2, [r3, #16]
 8001ce4:	69fb      	ldr	r3, [r7, #28]
 8001ce6:	f003 0307 	and.w	r3, r3, #7
 8001cea:	009b      	lsls	r3, r3, #2
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cf6:	69fb      	ldr	r3, [r7, #28]
 8001cf8:	08da      	lsrs	r2, r3, #3
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	3208      	adds	r2, #8
 8001cfe:	69b9      	ldr	r1, [r7, #24]
 8001d00:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	005b      	lsls	r3, r3, #1
 8001d0e:	2203      	movs	r2, #3
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f003 0203 	and.w	r2, r3, #3
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69ba      	ldr	r2, [r7, #24]
 8001d36:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	f000 80b4 	beq.w	8001eae <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
 8001d4a:	4b60      	ldr	r3, [pc, #384]	@ (8001ecc <HAL_GPIO_Init+0x30c>)
 8001d4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d4e:	4a5f      	ldr	r2, [pc, #380]	@ (8001ecc <HAL_GPIO_Init+0x30c>)
 8001d50:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d56:	4b5d      	ldr	r3, [pc, #372]	@ (8001ecc <HAL_GPIO_Init+0x30c>)
 8001d58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d5a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d5e:	60fb      	str	r3, [r7, #12]
 8001d60:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d62:	4a5b      	ldr	r2, [pc, #364]	@ (8001ed0 <HAL_GPIO_Init+0x310>)
 8001d64:	69fb      	ldr	r3, [r7, #28]
 8001d66:	089b      	lsrs	r3, r3, #2
 8001d68:	3302      	adds	r3, #2
 8001d6a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d70:	69fb      	ldr	r3, [r7, #28]
 8001d72:	f003 0303 	and.w	r3, r3, #3
 8001d76:	009b      	lsls	r3, r3, #2
 8001d78:	220f      	movs	r2, #15
 8001d7a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7e:	43db      	mvns	r3, r3
 8001d80:	69ba      	ldr	r2, [r7, #24]
 8001d82:	4013      	ands	r3, r2
 8001d84:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a52      	ldr	r2, [pc, #328]	@ (8001ed4 <HAL_GPIO_Init+0x314>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d02b      	beq.n	8001de6 <HAL_GPIO_Init+0x226>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a51      	ldr	r2, [pc, #324]	@ (8001ed8 <HAL_GPIO_Init+0x318>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d025      	beq.n	8001de2 <HAL_GPIO_Init+0x222>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a50      	ldr	r2, [pc, #320]	@ (8001edc <HAL_GPIO_Init+0x31c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d01f      	beq.n	8001dde <HAL_GPIO_Init+0x21e>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a4f      	ldr	r2, [pc, #316]	@ (8001ee0 <HAL_GPIO_Init+0x320>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d019      	beq.n	8001dda <HAL_GPIO_Init+0x21a>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	4a4e      	ldr	r2, [pc, #312]	@ (8001ee4 <HAL_GPIO_Init+0x324>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d013      	beq.n	8001dd6 <HAL_GPIO_Init+0x216>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4a4d      	ldr	r2, [pc, #308]	@ (8001ee8 <HAL_GPIO_Init+0x328>)
 8001db2:	4293      	cmp	r3, r2
 8001db4:	d00d      	beq.n	8001dd2 <HAL_GPIO_Init+0x212>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	4a4c      	ldr	r2, [pc, #304]	@ (8001eec <HAL_GPIO_Init+0x32c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d007      	beq.n	8001dce <HAL_GPIO_Init+0x20e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4a4b      	ldr	r2, [pc, #300]	@ (8001ef0 <HAL_GPIO_Init+0x330>)
 8001dc2:	4293      	cmp	r3, r2
 8001dc4:	d101      	bne.n	8001dca <HAL_GPIO_Init+0x20a>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e00e      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dca:	2308      	movs	r3, #8
 8001dcc:	e00c      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dce:	2306      	movs	r3, #6
 8001dd0:	e00a      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dd2:	2305      	movs	r3, #5
 8001dd4:	e008      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dd6:	2304      	movs	r3, #4
 8001dd8:	e006      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e004      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001dde:	2302      	movs	r3, #2
 8001de0:	e002      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001de2:	2301      	movs	r3, #1
 8001de4:	e000      	b.n	8001de8 <HAL_GPIO_Init+0x228>
 8001de6:	2300      	movs	r3, #0
 8001de8:	69fa      	ldr	r2, [r7, #28]
 8001dea:	f002 0203 	and.w	r2, r2, #3
 8001dee:	0092      	lsls	r2, r2, #2
 8001df0:	4093      	lsls	r3, r2
 8001df2:	69ba      	ldr	r2, [r7, #24]
 8001df4:	4313      	orrs	r3, r2
 8001df6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001df8:	4935      	ldr	r1, [pc, #212]	@ (8001ed0 <HAL_GPIO_Init+0x310>)
 8001dfa:	69fb      	ldr	r3, [r7, #28]
 8001dfc:	089b      	lsrs	r3, r3, #2
 8001dfe:	3302      	adds	r3, #2
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e06:	4b3b      	ldr	r3, [pc, #236]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001e08:	689b      	ldr	r3, [r3, #8]
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	43db      	mvns	r3, r3
 8001e10:	69ba      	ldr	r2, [r7, #24]
 8001e12:	4013      	ands	r3, r2
 8001e14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d003      	beq.n	8001e2a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001e22:	69ba      	ldr	r2, [r7, #24]
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	4313      	orrs	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e2a:	4a32      	ldr	r2, [pc, #200]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001e2c:	69bb      	ldr	r3, [r7, #24]
 8001e2e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e30:	4b30      	ldr	r3, [pc, #192]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001e32:	68db      	ldr	r3, [r3, #12]
 8001e34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	43db      	mvns	r3, r3
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	685b      	ldr	r3, [r3, #4]
 8001e44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d003      	beq.n	8001e54 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	4313      	orrs	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e54:	4a27      	ldr	r2, [pc, #156]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001e56:	69bb      	ldr	r3, [r7, #24]
 8001e58:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e5a:	4b26      	ldr	r3, [pc, #152]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	43db      	mvns	r3, r3
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	4013      	ands	r3, r2
 8001e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001e76:	69ba      	ldr	r2, [r7, #24]
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e7e:	4a1d      	ldr	r2, [pc, #116]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001e80:	69bb      	ldr	r3, [r7, #24]
 8001e82:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e84:	4b1b      	ldr	r3, [pc, #108]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	43db      	mvns	r3, r3
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	4013      	ands	r3, r2
 8001e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e94:	683b      	ldr	r3, [r7, #0]
 8001e96:	685b      	ldr	r3, [r3, #4]
 8001e98:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ea8:	4a12      	ldr	r2, [pc, #72]	@ (8001ef4 <HAL_GPIO_Init+0x334>)
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001eae:	69fb      	ldr	r3, [r7, #28]
 8001eb0:	3301      	adds	r3, #1
 8001eb2:	61fb      	str	r3, [r7, #28]
 8001eb4:	69fb      	ldr	r3, [r7, #28]
 8001eb6:	2b0f      	cmp	r3, #15
 8001eb8:	f67f ae90 	bls.w	8001bdc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ebc:	bf00      	nop
 8001ebe:	bf00      	nop
 8001ec0:	3724      	adds	r7, #36	@ 0x24
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40013800 	.word	0x40013800
 8001ed4:	40020000 	.word	0x40020000
 8001ed8:	40020400 	.word	0x40020400
 8001edc:	40020800 	.word	0x40020800
 8001ee0:	40020c00 	.word	0x40020c00
 8001ee4:	40021000 	.word	0x40021000
 8001ee8:	40021400 	.word	0x40021400
 8001eec:	40021800 	.word	0x40021800
 8001ef0:	40021c00 	.word	0x40021c00
 8001ef4:	40013c00 	.word	0x40013c00

08001ef8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	460b      	mov	r3, r1
 8001f02:	807b      	strh	r3, [r7, #2]
 8001f04:	4613      	mov	r3, r2
 8001f06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f08:	787b      	ldrb	r3, [r7, #1]
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f0e:	887a      	ldrh	r2, [r7, #2]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f14:	e003      	b.n	8001f1e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f16:	887b      	ldrh	r3, [r7, #2]
 8001f18:	041a      	lsls	r2, r3, #16
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	619a      	str	r2, [r3, #24]
}
 8001f1e:	bf00      	nop
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f36:	4b08      	ldr	r3, [pc, #32]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f38:	695a      	ldr	r2, [r3, #20]
 8001f3a:	88fb      	ldrh	r3, [r7, #6]
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d006      	beq.n	8001f50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f42:	4a05      	ldr	r2, [pc, #20]	@ (8001f58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f48:	88fb      	ldrh	r3, [r7, #6]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f000 f806 	bl	8001f5c <HAL_GPIO_EXTI_Callback>
  }
}
 8001f50:	bf00      	nop
 8001f52:	3708      	adds	r7, #8
 8001f54:	46bd      	mov	sp, r7
 8001f56:	bd80      	pop	{r7, pc}
 8001f58:	40013c00 	.word	0x40013c00

08001f5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	4603      	mov	r3, r0
 8001f64:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f66:	bf00      	nop
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr

08001f72 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b086      	sub	sp, #24
 8001f76:	af02      	add	r7, sp, #8
 8001f78:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d101      	bne.n	8001f84 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f80:	2301      	movs	r3, #1
 8001f82:	e059      	b.n	8002038 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d106      	bne.n	8001fa4 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001f9e:	6878      	ldr	r0, [r7, #4]
 8001fa0:	f008 f81c 	bl	8009fdc <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	2203      	movs	r2, #3
 8001fa8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fb2:	d102      	bne.n	8001fba <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	f004 fe35 	bl	8006c2e <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6818      	ldr	r0, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7c1a      	ldrb	r2, [r3, #16]
 8001fcc:	f88d 2000 	strb.w	r2, [sp]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fd4:	f004 fdb6 	bl	8006b44 <USB_CoreInit>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d005      	beq.n	8001fea <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2202      	movs	r2, #2
 8001fe2:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	e026      	b.n	8002038 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	2101      	movs	r1, #1
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f004 fe2d 	bl	8006c50 <USB_SetCurrentMode>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d005      	beq.n	8002008 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2202      	movs	r2, #2
 8002000:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
 8002006:	e017      	b.n	8002038 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6818      	ldr	r0, [r3, #0]
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	7c1a      	ldrb	r2, [r3, #16]
 8002010:	f88d 2000 	strb.w	r2, [sp]
 8002014:	3304      	adds	r3, #4
 8002016:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002018:	f004 ffd0 	bl	8006fbc <USB_HostInit>
 800201c:	4603      	mov	r3, r0
 800201e:	2b00      	cmp	r3, #0
 8002020:	d005      	beq.n	800202e <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	2202      	movs	r2, #2
 8002026:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e004      	b.n	8002038 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	2201      	movs	r2, #1
 8002032:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8002036:	2300      	movs	r3, #0
}
 8002038:	4618      	mov	r0, r3
 800203a:	3710      	adds	r7, #16
 800203c:	46bd      	mov	sp, r7
 800203e:	bd80      	pop	{r7, pc}

08002040 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8002040:	b590      	push	{r4, r7, lr}
 8002042:	b08b      	sub	sp, #44	@ 0x2c
 8002044:	af04      	add	r7, sp, #16
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	4608      	mov	r0, r1
 800204a:	4611      	mov	r1, r2
 800204c:	461a      	mov	r2, r3
 800204e:	4603      	mov	r3, r0
 8002050:	70fb      	strb	r3, [r7, #3]
 8002052:	460b      	mov	r3, r1
 8002054:	70bb      	strb	r3, [r7, #2]
 8002056:	4613      	mov	r3, r2
 8002058:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 800205a:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800205c:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002064:	2b01      	cmp	r3, #1
 8002066:	d101      	bne.n	800206c <HAL_HCD_HC_Init+0x2c>
 8002068:	2302      	movs	r3, #2
 800206a:	e09d      	b.n	80021a8 <HAL_HCD_HC_Init+0x168>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2201      	movs	r2, #1
 8002070:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8002074:	78fa      	ldrb	r2, [r7, #3]
 8002076:	6879      	ldr	r1, [r7, #4]
 8002078:	4613      	mov	r3, r2
 800207a:	011b      	lsls	r3, r3, #4
 800207c:	1a9b      	subs	r3, r3, r2
 800207e:	009b      	lsls	r3, r3, #2
 8002080:	440b      	add	r3, r1
 8002082:	3319      	adds	r3, #25
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8002088:	78fa      	ldrb	r2, [r7, #3]
 800208a:	6879      	ldr	r1, [r7, #4]
 800208c:	4613      	mov	r3, r2
 800208e:	011b      	lsls	r3, r3, #4
 8002090:	1a9b      	subs	r3, r3, r2
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	440b      	add	r3, r1
 8002096:	3314      	adds	r3, #20
 8002098:	787a      	ldrb	r2, [r7, #1]
 800209a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 800209c:	78fa      	ldrb	r2, [r7, #3]
 800209e:	6879      	ldr	r1, [r7, #4]
 80020a0:	4613      	mov	r3, r2
 80020a2:	011b      	lsls	r3, r3, #4
 80020a4:	1a9b      	subs	r3, r3, r2
 80020a6:	009b      	lsls	r3, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	3315      	adds	r3, #21
 80020ac:	78fa      	ldrb	r2, [r7, #3]
 80020ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 80020b0:	78fa      	ldrb	r2, [r7, #3]
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	4613      	mov	r3, r2
 80020b6:	011b      	lsls	r3, r3, #4
 80020b8:	1a9b      	subs	r3, r3, r2
 80020ba:	009b      	lsls	r3, r3, #2
 80020bc:	440b      	add	r3, r1
 80020be:	3326      	adds	r3, #38	@ 0x26
 80020c0:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 80020c4:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 80020c6:	78fa      	ldrb	r2, [r7, #3]
 80020c8:	78bb      	ldrb	r3, [r7, #2]
 80020ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80020ce:	b2d8      	uxtb	r0, r3
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	3316      	adds	r3, #22
 80020de:	4602      	mov	r2, r0
 80020e0:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 80020e2:	78fb      	ldrb	r3, [r7, #3]
 80020e4:	4619      	mov	r1, r3
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 fbc8 	bl	800287c <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 80020ec:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	da0a      	bge.n	800210a <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 80020f4:	78fa      	ldrb	r2, [r7, #3]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	011b      	lsls	r3, r3, #4
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3317      	adds	r3, #23
 8002104:	2201      	movs	r2, #1
 8002106:	701a      	strb	r2, [r3, #0]
 8002108:	e009      	b.n	800211e <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 800210a:	78fa      	ldrb	r2, [r7, #3]
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	4613      	mov	r3, r2
 8002110:	011b      	lsls	r3, r3, #4
 8002112:	1a9b      	subs	r3, r3, r2
 8002114:	009b      	lsls	r3, r3, #2
 8002116:	440b      	add	r3, r1
 8002118:	3317      	adds	r3, #23
 800211a:	2200      	movs	r2, #0
 800211c:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4618      	mov	r0, r3
 8002124:	f005 f8ae 	bl	8007284 <USB_GetHostSpeed>
 8002128:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 800212a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800212e:	2b01      	cmp	r3, #1
 8002130:	d10b      	bne.n	800214a <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8002132:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002136:	2b01      	cmp	r3, #1
 8002138:	d107      	bne.n	800214a <HAL_HCD_HC_Init+0x10a>
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b00      	cmp	r3, #0
 800213e:	d104      	bne.n	800214a <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8002140:	697b      	ldr	r3, [r7, #20]
 8002142:	2bbc      	cmp	r3, #188	@ 0xbc
 8002144:	d901      	bls.n	800214a <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8002146:	23bc      	movs	r3, #188	@ 0xbc
 8002148:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 800214a:	78fa      	ldrb	r2, [r7, #3]
 800214c:	6879      	ldr	r1, [r7, #4]
 800214e:	4613      	mov	r3, r2
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	1a9b      	subs	r3, r3, r2
 8002154:	009b      	lsls	r3, r3, #2
 8002156:	440b      	add	r3, r1
 8002158:	3318      	adds	r3, #24
 800215a:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800215e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002160:	78fa      	ldrb	r2, [r7, #3]
 8002162:	697b      	ldr	r3, [r7, #20]
 8002164:	b298      	uxth	r0, r3
 8002166:	6879      	ldr	r1, [r7, #4]
 8002168:	4613      	mov	r3, r2
 800216a:	011b      	lsls	r3, r3, #4
 800216c:	1a9b      	subs	r3, r3, r2
 800216e:	009b      	lsls	r3, r3, #2
 8002170:	440b      	add	r3, r1
 8002172:	3328      	adds	r3, #40	@ 0x28
 8002174:	4602      	mov	r2, r0
 8002176:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6818      	ldr	r0, [r3, #0]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	b29b      	uxth	r3, r3
 8002180:	787c      	ldrb	r4, [r7, #1]
 8002182:	78ba      	ldrb	r2, [r7, #2]
 8002184:	78f9      	ldrb	r1, [r7, #3]
 8002186:	9302      	str	r3, [sp, #8]
 8002188:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800218c:	9301      	str	r3, [sp, #4]
 800218e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002192:	9300      	str	r3, [sp, #0]
 8002194:	4623      	mov	r3, r4
 8002196:	f005 f89d 	bl	80072d4 <USB_HC_Init>
 800219a:	4603      	mov	r3, r0
 800219c:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80021a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80021a8:	4618      	mov	r0, r3
 80021aa:	371c      	adds	r7, #28
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd90      	pop	{r4, r7, pc}

080021b0 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 80021b0:	b580      	push	{r7, lr}
 80021b2:	b084      	sub	sp, #16
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	460b      	mov	r3, r1
 80021ba:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 80021bc:	2300      	movs	r3, #0
 80021be:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80021c6:	2b01      	cmp	r3, #1
 80021c8:	d101      	bne.n	80021ce <HAL_HCD_HC_Halt+0x1e>
 80021ca:	2302      	movs	r3, #2
 80021cc:	e00f      	b.n	80021ee <HAL_HCD_HC_Halt+0x3e>
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2201      	movs	r2, #1
 80021d2:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	78fa      	ldrb	r2, [r7, #3]
 80021dc:	4611      	mov	r1, r2
 80021de:	4618      	mov	r0, r3
 80021e0:	f005 fc2f 	bl	8007a42 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	2200      	movs	r2, #0
 80021e8:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 80021ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ee:	4618      	mov	r0, r3
 80021f0:	3710      	adds	r7, #16
 80021f2:	46bd      	mov	sp, r7
 80021f4:	bd80      	pop	{r7, pc}
	...

080021f8 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b082      	sub	sp, #8
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	6078      	str	r0, [r7, #4]
 8002200:	4608      	mov	r0, r1
 8002202:	4611      	mov	r1, r2
 8002204:	461a      	mov	r2, r3
 8002206:	4603      	mov	r3, r0
 8002208:	70fb      	strb	r3, [r7, #3]
 800220a:	460b      	mov	r3, r1
 800220c:	70bb      	strb	r3, [r7, #2]
 800220e:	4613      	mov	r3, r2
 8002210:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8002212:	78fa      	ldrb	r2, [r7, #3]
 8002214:	6879      	ldr	r1, [r7, #4]
 8002216:	4613      	mov	r3, r2
 8002218:	011b      	lsls	r3, r3, #4
 800221a:	1a9b      	subs	r3, r3, r2
 800221c:	009b      	lsls	r3, r3, #2
 800221e:	440b      	add	r3, r1
 8002220:	3317      	adds	r3, #23
 8002222:	78ba      	ldrb	r2, [r7, #2]
 8002224:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8002226:	78fa      	ldrb	r2, [r7, #3]
 8002228:	6879      	ldr	r1, [r7, #4]
 800222a:	4613      	mov	r3, r2
 800222c:	011b      	lsls	r3, r3, #4
 800222e:	1a9b      	subs	r3, r3, r2
 8002230:	009b      	lsls	r3, r3, #2
 8002232:	440b      	add	r3, r1
 8002234:	3326      	adds	r3, #38	@ 0x26
 8002236:	787a      	ldrb	r2, [r7, #1]
 8002238:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 800223a:	7c3b      	ldrb	r3, [r7, #16]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d114      	bne.n	800226a <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8002240:	78fa      	ldrb	r2, [r7, #3]
 8002242:	6879      	ldr	r1, [r7, #4]
 8002244:	4613      	mov	r3, r2
 8002246:	011b      	lsls	r3, r3, #4
 8002248:	1a9b      	subs	r3, r3, r2
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	440b      	add	r3, r1
 800224e:	332a      	adds	r3, #42	@ 0x2a
 8002250:	2203      	movs	r2, #3
 8002252:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8002254:	78fa      	ldrb	r2, [r7, #3]
 8002256:	6879      	ldr	r1, [r7, #4]
 8002258:	4613      	mov	r3, r2
 800225a:	011b      	lsls	r3, r3, #4
 800225c:	1a9b      	subs	r3, r3, r2
 800225e:	009b      	lsls	r3, r3, #2
 8002260:	440b      	add	r3, r1
 8002262:	3319      	adds	r3, #25
 8002264:	7f3a      	ldrb	r2, [r7, #28]
 8002266:	701a      	strb	r2, [r3, #0]
 8002268:	e009      	b.n	800227e <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800226a:	78fa      	ldrb	r2, [r7, #3]
 800226c:	6879      	ldr	r1, [r7, #4]
 800226e:	4613      	mov	r3, r2
 8002270:	011b      	lsls	r3, r3, #4
 8002272:	1a9b      	subs	r3, r3, r2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	440b      	add	r3, r1
 8002278:	332a      	adds	r3, #42	@ 0x2a
 800227a:	2202      	movs	r2, #2
 800227c:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 800227e:	787b      	ldrb	r3, [r7, #1]
 8002280:	2b03      	cmp	r3, #3
 8002282:	f200 8102 	bhi.w	800248a <HAL_HCD_HC_SubmitRequest+0x292>
 8002286:	a201      	add	r2, pc, #4	@ (adr r2, 800228c <HAL_HCD_HC_SubmitRequest+0x94>)
 8002288:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800228c:	0800229d 	.word	0x0800229d
 8002290:	08002475 	.word	0x08002475
 8002294:	08002361 	.word	0x08002361
 8002298:	080023eb 	.word	0x080023eb
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 800229c:	7c3b      	ldrb	r3, [r7, #16]
 800229e:	2b01      	cmp	r3, #1
 80022a0:	f040 80f5 	bne.w	800248e <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 80022a4:	78bb      	ldrb	r3, [r7, #2]
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d12d      	bne.n	8002306 <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 80022aa:	8b3b      	ldrh	r3, [r7, #24]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d109      	bne.n	80022c4 <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 80022b0:	78fa      	ldrb	r2, [r7, #3]
 80022b2:	6879      	ldr	r1, [r7, #4]
 80022b4:	4613      	mov	r3, r2
 80022b6:	011b      	lsls	r3, r3, #4
 80022b8:	1a9b      	subs	r3, r3, r2
 80022ba:	009b      	lsls	r3, r3, #2
 80022bc:	440b      	add	r3, r1
 80022be:	333d      	adds	r3, #61	@ 0x3d
 80022c0:	2201      	movs	r2, #1
 80022c2:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	333d      	adds	r3, #61	@ 0x3d
 80022d4:	781b      	ldrb	r3, [r3, #0]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d10a      	bne.n	80022f0 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	332a      	adds	r3, #42	@ 0x2a
 80022ea:	2200      	movs	r2, #0
 80022ec:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 80022ee:	e0ce      	b.n	800248e <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	332a      	adds	r3, #42	@ 0x2a
 8002300:	2202      	movs	r2, #2
 8002302:	701a      	strb	r2, [r3, #0]
      break;
 8002304:	e0c3      	b.n	800248e <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	331a      	adds	r3, #26
 8002316:	781b      	ldrb	r3, [r3, #0]
 8002318:	2b01      	cmp	r3, #1
 800231a:	f040 80b8 	bne.w	800248e <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 800231e:	78fa      	ldrb	r2, [r7, #3]
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	4613      	mov	r3, r2
 8002324:	011b      	lsls	r3, r3, #4
 8002326:	1a9b      	subs	r3, r3, r2
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	440b      	add	r3, r1
 800232c:	333c      	adds	r3, #60	@ 0x3c
 800232e:	781b      	ldrb	r3, [r3, #0]
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10a      	bne.n	800234a <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002334:	78fa      	ldrb	r2, [r7, #3]
 8002336:	6879      	ldr	r1, [r7, #4]
 8002338:	4613      	mov	r3, r2
 800233a:	011b      	lsls	r3, r3, #4
 800233c:	1a9b      	subs	r3, r3, r2
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	440b      	add	r3, r1
 8002342:	332a      	adds	r3, #42	@ 0x2a
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
      break;
 8002348:	e0a1      	b.n	800248e <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800234a:	78fa      	ldrb	r2, [r7, #3]
 800234c:	6879      	ldr	r1, [r7, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	011b      	lsls	r3, r3, #4
 8002352:	1a9b      	subs	r3, r3, r2
 8002354:	009b      	lsls	r3, r3, #2
 8002356:	440b      	add	r3, r1
 8002358:	332a      	adds	r3, #42	@ 0x2a
 800235a:	2202      	movs	r2, #2
 800235c:	701a      	strb	r2, [r3, #0]
      break;
 800235e:	e096      	b.n	800248e <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002360:	78bb      	ldrb	r3, [r7, #2]
 8002362:	2b00      	cmp	r3, #0
 8002364:	d120      	bne.n	80023a8 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002366:	78fa      	ldrb	r2, [r7, #3]
 8002368:	6879      	ldr	r1, [r7, #4]
 800236a:	4613      	mov	r3, r2
 800236c:	011b      	lsls	r3, r3, #4
 800236e:	1a9b      	subs	r3, r3, r2
 8002370:	009b      	lsls	r3, r3, #2
 8002372:	440b      	add	r3, r1
 8002374:	333d      	adds	r3, #61	@ 0x3d
 8002376:	781b      	ldrb	r3, [r3, #0]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800237c:	78fa      	ldrb	r2, [r7, #3]
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	4613      	mov	r3, r2
 8002382:	011b      	lsls	r3, r3, #4
 8002384:	1a9b      	subs	r3, r3, r2
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	440b      	add	r3, r1
 800238a:	332a      	adds	r3, #42	@ 0x2a
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002390:	e07e      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002392:	78fa      	ldrb	r2, [r7, #3]
 8002394:	6879      	ldr	r1, [r7, #4]
 8002396:	4613      	mov	r3, r2
 8002398:	011b      	lsls	r3, r3, #4
 800239a:	1a9b      	subs	r3, r3, r2
 800239c:	009b      	lsls	r3, r3, #2
 800239e:	440b      	add	r3, r1
 80023a0:	332a      	adds	r3, #42	@ 0x2a
 80023a2:	2202      	movs	r2, #2
 80023a4:	701a      	strb	r2, [r3, #0]
      break;
 80023a6:	e073      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80023a8:	78fa      	ldrb	r2, [r7, #3]
 80023aa:	6879      	ldr	r1, [r7, #4]
 80023ac:	4613      	mov	r3, r2
 80023ae:	011b      	lsls	r3, r3, #4
 80023b0:	1a9b      	subs	r3, r3, r2
 80023b2:	009b      	lsls	r3, r3, #2
 80023b4:	440b      	add	r3, r1
 80023b6:	333c      	adds	r3, #60	@ 0x3c
 80023b8:	781b      	ldrb	r3, [r3, #0]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10a      	bne.n	80023d4 <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80023be:	78fa      	ldrb	r2, [r7, #3]
 80023c0:	6879      	ldr	r1, [r7, #4]
 80023c2:	4613      	mov	r3, r2
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	1a9b      	subs	r3, r3, r2
 80023c8:	009b      	lsls	r3, r3, #2
 80023ca:	440b      	add	r3, r1
 80023cc:	332a      	adds	r3, #42	@ 0x2a
 80023ce:	2200      	movs	r2, #0
 80023d0:	701a      	strb	r2, [r3, #0]
      break;
 80023d2:	e05d      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80023d4:	78fa      	ldrb	r2, [r7, #3]
 80023d6:	6879      	ldr	r1, [r7, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	1a9b      	subs	r3, r3, r2
 80023de:	009b      	lsls	r3, r3, #2
 80023e0:	440b      	add	r3, r1
 80023e2:	332a      	adds	r3, #42	@ 0x2a
 80023e4:	2202      	movs	r2, #2
 80023e6:	701a      	strb	r2, [r3, #0]
      break;
 80023e8:	e052      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 80023ea:	78bb      	ldrb	r3, [r7, #2]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d120      	bne.n	8002432 <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 80023f0:	78fa      	ldrb	r2, [r7, #3]
 80023f2:	6879      	ldr	r1, [r7, #4]
 80023f4:	4613      	mov	r3, r2
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	1a9b      	subs	r3, r3, r2
 80023fa:	009b      	lsls	r3, r3, #2
 80023fc:	440b      	add	r3, r1
 80023fe:	333d      	adds	r3, #61	@ 0x3d
 8002400:	781b      	ldrb	r3, [r3, #0]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10a      	bne.n	800241c <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002406:	78fa      	ldrb	r2, [r7, #3]
 8002408:	6879      	ldr	r1, [r7, #4]
 800240a:	4613      	mov	r3, r2
 800240c:	011b      	lsls	r3, r3, #4
 800240e:	1a9b      	subs	r3, r3, r2
 8002410:	009b      	lsls	r3, r3, #2
 8002412:	440b      	add	r3, r1
 8002414:	332a      	adds	r3, #42	@ 0x2a
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 800241a:	e039      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800241c:	78fa      	ldrb	r2, [r7, #3]
 800241e:	6879      	ldr	r1, [r7, #4]
 8002420:	4613      	mov	r3, r2
 8002422:	011b      	lsls	r3, r3, #4
 8002424:	1a9b      	subs	r3, r3, r2
 8002426:	009b      	lsls	r3, r3, #2
 8002428:	440b      	add	r3, r1
 800242a:	332a      	adds	r3, #42	@ 0x2a
 800242c:	2202      	movs	r2, #2
 800242e:	701a      	strb	r2, [r3, #0]
      break;
 8002430:	e02e      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002432:	78fa      	ldrb	r2, [r7, #3]
 8002434:	6879      	ldr	r1, [r7, #4]
 8002436:	4613      	mov	r3, r2
 8002438:	011b      	lsls	r3, r3, #4
 800243a:	1a9b      	subs	r3, r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	333c      	adds	r3, #60	@ 0x3c
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d10a      	bne.n	800245e <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002448:	78fa      	ldrb	r2, [r7, #3]
 800244a:	6879      	ldr	r1, [r7, #4]
 800244c:	4613      	mov	r3, r2
 800244e:	011b      	lsls	r3, r3, #4
 8002450:	1a9b      	subs	r3, r3, r2
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	440b      	add	r3, r1
 8002456:	332a      	adds	r3, #42	@ 0x2a
 8002458:	2200      	movs	r2, #0
 800245a:	701a      	strb	r2, [r3, #0]
      break;
 800245c:	e018      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800245e:	78fa      	ldrb	r2, [r7, #3]
 8002460:	6879      	ldr	r1, [r7, #4]
 8002462:	4613      	mov	r3, r2
 8002464:	011b      	lsls	r3, r3, #4
 8002466:	1a9b      	subs	r3, r3, r2
 8002468:	009b      	lsls	r3, r3, #2
 800246a:	440b      	add	r3, r1
 800246c:	332a      	adds	r3, #42	@ 0x2a
 800246e:	2202      	movs	r2, #2
 8002470:	701a      	strb	r2, [r3, #0]
      break;
 8002472:	e00d      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002474:	78fa      	ldrb	r2, [r7, #3]
 8002476:	6879      	ldr	r1, [r7, #4]
 8002478:	4613      	mov	r3, r2
 800247a:	011b      	lsls	r3, r3, #4
 800247c:	1a9b      	subs	r3, r3, r2
 800247e:	009b      	lsls	r3, r3, #2
 8002480:	440b      	add	r3, r1
 8002482:	332a      	adds	r3, #42	@ 0x2a
 8002484:	2200      	movs	r2, #0
 8002486:	701a      	strb	r2, [r3, #0]
      break;
 8002488:	e002      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 800248a:	bf00      	nop
 800248c:	e000      	b.n	8002490 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 800248e:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002490:	78fa      	ldrb	r2, [r7, #3]
 8002492:	6879      	ldr	r1, [r7, #4]
 8002494:	4613      	mov	r3, r2
 8002496:	011b      	lsls	r3, r3, #4
 8002498:	1a9b      	subs	r3, r3, r2
 800249a:	009b      	lsls	r3, r3, #2
 800249c:	440b      	add	r3, r1
 800249e:	332c      	adds	r3, #44	@ 0x2c
 80024a0:	697a      	ldr	r2, [r7, #20]
 80024a2:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 80024a4:	78fa      	ldrb	r2, [r7, #3]
 80024a6:	8b39      	ldrh	r1, [r7, #24]
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	4613      	mov	r3, r2
 80024ac:	011b      	lsls	r3, r3, #4
 80024ae:	1a9b      	subs	r3, r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	4403      	add	r3, r0
 80024b4:	3334      	adds	r3, #52	@ 0x34
 80024b6:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 80024b8:	78fa      	ldrb	r2, [r7, #3]
 80024ba:	6879      	ldr	r1, [r7, #4]
 80024bc:	4613      	mov	r3, r2
 80024be:	011b      	lsls	r3, r3, #4
 80024c0:	1a9b      	subs	r3, r3, r2
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	440b      	add	r3, r1
 80024c6:	334c      	adds	r3, #76	@ 0x4c
 80024c8:	2200      	movs	r2, #0
 80024ca:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 80024cc:	78fa      	ldrb	r2, [r7, #3]
 80024ce:	6879      	ldr	r1, [r7, #4]
 80024d0:	4613      	mov	r3, r2
 80024d2:	011b      	lsls	r3, r3, #4
 80024d4:	1a9b      	subs	r3, r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	440b      	add	r3, r1
 80024da:	3338      	adds	r3, #56	@ 0x38
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 80024e0:	78fa      	ldrb	r2, [r7, #3]
 80024e2:	6879      	ldr	r1, [r7, #4]
 80024e4:	4613      	mov	r3, r2
 80024e6:	011b      	lsls	r3, r3, #4
 80024e8:	1a9b      	subs	r3, r3, r2
 80024ea:	009b      	lsls	r3, r3, #2
 80024ec:	440b      	add	r3, r1
 80024ee:	3315      	adds	r3, #21
 80024f0:	78fa      	ldrb	r2, [r7, #3]
 80024f2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80024f4:	78fa      	ldrb	r2, [r7, #3]
 80024f6:	6879      	ldr	r1, [r7, #4]
 80024f8:	4613      	mov	r3, r2
 80024fa:	011b      	lsls	r3, r3, #4
 80024fc:	1a9b      	subs	r3, r3, r2
 80024fe:	009b      	lsls	r3, r3, #2
 8002500:	440b      	add	r3, r1
 8002502:	334d      	adds	r3, #77	@ 0x4d
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6818      	ldr	r0, [r3, #0]
 800250c:	78fa      	ldrb	r2, [r7, #3]
 800250e:	4613      	mov	r3, r2
 8002510:	011b      	lsls	r3, r3, #4
 8002512:	1a9b      	subs	r3, r3, r2
 8002514:	009b      	lsls	r3, r3, #2
 8002516:	3310      	adds	r3, #16
 8002518:	687a      	ldr	r2, [r7, #4]
 800251a:	4413      	add	r3, r2
 800251c:	1d19      	adds	r1, r3, #4
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	799b      	ldrb	r3, [r3, #6]
 8002522:	461a      	mov	r2, r3
 8002524:	f005 f802 	bl	800752c <USB_HC_StartXfer>
 8002528:	4603      	mov	r3, r0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop

08002534 <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b086      	sub	sp, #24
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002542:	693b      	ldr	r3, [r7, #16]
 8002544:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	4618      	mov	r0, r3
 800254c:	f004 fcf6 	bl	8006f3c <USB_GetMode>
 8002550:	4603      	mov	r3, r0
 8002552:	2b01      	cmp	r3, #1
 8002554:	f040 80fb 	bne.w	800274e <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4618      	mov	r0, r3
 800255e:	f004 fcb9 	bl	8006ed4 <USB_ReadInterrupts>
 8002562:	4603      	mov	r3, r0
 8002564:	2b00      	cmp	r3, #0
 8002566:	f000 80f1 	beq.w	800274c <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	4618      	mov	r0, r3
 8002570:	f004 fcb0 	bl	8006ed4 <USB_ReadInterrupts>
 8002574:	4603      	mov	r3, r0
 8002576:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800257a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800257e:	d104      	bne.n	800258a <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002588:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	4618      	mov	r0, r3
 8002590:	f004 fca0 	bl	8006ed4 <USB_ReadInterrupts>
 8002594:	4603      	mov	r3, r0
 8002596:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800259a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800259e:	d104      	bne.n	80025aa <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80025a8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f004 fc90 	bl	8006ed4 <USB_ReadInterrupts>
 80025b4:	4603      	mov	r3, r0
 80025b6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80025ba:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80025be:	d104      	bne.n	80025ca <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80025c8:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f004 fc80 	bl	8006ed4 <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 0302 	and.w	r3, r3, #2
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d103      	bne.n	80025e6 <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	2202      	movs	r2, #2
 80025e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	4618      	mov	r0, r3
 80025ec:	f004 fc72 	bl	8006ed4 <USB_ReadInterrupts>
 80025f0:	4603      	mov	r3, r0
 80025f2:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025f6:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025fa:	d120      	bne.n	800263e <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8002604:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	f003 0301 	and.w	r3, r3, #1
 8002612:	2b00      	cmp	r3, #0
 8002614:	d113      	bne.n	800263e <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 8002616:	2110      	movs	r1, #16
 8002618:	6938      	ldr	r0, [r7, #16]
 800261a:	f004 fb65 	bl	8006ce8 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 800261e:	6938      	ldr	r0, [r7, #16]
 8002620:	f004 fb94 	bl	8006d4c <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	7a5b      	ldrb	r3, [r3, #9]
 8002628:	2b02      	cmp	r3, #2
 800262a:	d105      	bne.n	8002638 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2101      	movs	r1, #1
 8002632:	4618      	mov	r0, r3
 8002634:	f004 fd86 	bl	8007144 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 8002638:	6878      	ldr	r0, [r7, #4]
 800263a:	f007 fd4d 	bl	800a0d8 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	4618      	mov	r0, r3
 8002644:	f004 fc46 	bl	8006ed4 <USB_ReadInterrupts>
 8002648:	4603      	mov	r3, r0
 800264a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800264e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002652:	d102      	bne.n	800265a <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 8002654:	6878      	ldr	r0, [r7, #4]
 8002656:	f001 fd4d 	bl	80040f4 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f004 fc38 	bl	8006ed4 <USB_ReadInterrupts>
 8002664:	4603      	mov	r3, r0
 8002666:	f003 0308 	and.w	r3, r3, #8
 800266a:	2b08      	cmp	r3, #8
 800266c:	d106      	bne.n	800267c <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f007 fd16 	bl	800a0a0 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2208      	movs	r2, #8
 800267a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	4618      	mov	r0, r3
 8002682:	f004 fc27 	bl	8006ed4 <USB_ReadInterrupts>
 8002686:	4603      	mov	r3, r0
 8002688:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800268c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002690:	d139      	bne.n	8002706 <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f005 f9c2 	bl	8007a20 <USB_HC_ReadInterrupt>
 800269c:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 800269e:	2300      	movs	r3, #0
 80026a0:	617b      	str	r3, [r7, #20]
 80026a2:	e025      	b.n	80026f0 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	f003 030f 	and.w	r3, r3, #15
 80026aa:	68ba      	ldr	r2, [r7, #8]
 80026ac:	fa22 f303 	lsr.w	r3, r2, r3
 80026b0:	f003 0301 	and.w	r3, r3, #1
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d018      	beq.n	80026ea <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 80026b8:	697b      	ldr	r3, [r7, #20]
 80026ba:	015a      	lsls	r2, r3, #5
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	4413      	add	r3, r2
 80026c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80026ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80026ce:	d106      	bne.n	80026de <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	4619      	mov	r1, r3
 80026d6:	6878      	ldr	r0, [r7, #4]
 80026d8:	f000 f905 	bl	80028e6 <HCD_HC_IN_IRQHandler>
 80026dc:	e005      	b.n	80026ea <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80026de:	697b      	ldr	r3, [r7, #20]
 80026e0:	b2db      	uxtb	r3, r3
 80026e2:	4619      	mov	r1, r3
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 ff67 	bl	80035b8 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80026ea:	697b      	ldr	r3, [r7, #20]
 80026ec:	3301      	adds	r3, #1
 80026ee:	617b      	str	r3, [r7, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	795b      	ldrb	r3, [r3, #5]
 80026f4:	461a      	mov	r2, r3
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d3d3      	bcc.n	80026a4 <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002704:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	4618      	mov	r0, r3
 800270c:	f004 fbe2 	bl	8006ed4 <USB_ReadInterrupts>
 8002710:	4603      	mov	r3, r0
 8002712:	f003 0310 	and.w	r3, r3, #16
 8002716:	2b10      	cmp	r3, #16
 8002718:	d101      	bne.n	800271e <HAL_HCD_IRQHandler+0x1ea>
 800271a:	2301      	movs	r3, #1
 800271c:	e000      	b.n	8002720 <HAL_HCD_IRQHandler+0x1ec>
 800271e:	2300      	movs	r3, #0
 8002720:	2b00      	cmp	r3, #0
 8002722:	d014      	beq.n	800274e <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	699a      	ldr	r2, [r3, #24]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f022 0210 	bic.w	r2, r2, #16
 8002732:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f001 fbfe 	bl	8003f36 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	699a      	ldr	r2, [r3, #24]
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0210 	orr.w	r2, r2, #16
 8002748:	619a      	str	r2, [r3, #24]
 800274a:	e000      	b.n	800274e <HAL_HCD_IRQHandler+0x21a>
      return;
 800274c:	bf00      	nop
    }
  }
}
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}

08002754 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b082      	sub	sp, #8
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_HCD_Start+0x16>
 8002766:	2302      	movs	r3, #2
 8002768:	e013      	b.n	8002792 <HAL_HCD_Start+0x3e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	2101      	movs	r1, #1
 8002778:	4618      	mov	r0, r3
 800277a:	f004 fd4a 	bl	8007212 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	4618      	mov	r0, r3
 8002784:	f004 fa42 	bl	8006c0c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2200      	movs	r2, #0
 800278c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3708      	adds	r7, #8
 8002796:	46bd      	mov	sp, r7
 8002798:	bd80      	pop	{r7, pc}

0800279a <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 800279a:	b580      	push	{r7, lr}
 800279c:	b082      	sub	sp, #8
 800279e:	af00      	add	r7, sp, #0
 80027a0:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d101      	bne.n	80027b0 <HAL_HCD_Stop+0x16>
 80027ac:	2302      	movs	r3, #2
 80027ae:	e00d      	b.n	80027cc <HAL_HCD_Stop+0x32>
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2201      	movs	r2, #1
 80027b4:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4618      	mov	r0, r3
 80027be:	f005 fa9d 	bl	8007cfc <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 80027ca:	2300      	movs	r3, #0
}
 80027cc:	4618      	mov	r0, r3
 80027ce:	3708      	adds	r7, #8
 80027d0:	46bd      	mov	sp, r7
 80027d2:	bd80      	pop	{r7, pc}

080027d4 <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b082      	sub	sp, #8
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f004 fcec 	bl	80071be <USB_ResetPort>
 80027e6:	4603      	mov	r3, r0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80027f0:	b480      	push	{r7}
 80027f2:	b083      	sub	sp, #12
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
 80027f8:	460b      	mov	r3, r1
 80027fa:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80027fc:	78fa      	ldrb	r2, [r7, #3]
 80027fe:	6879      	ldr	r1, [r7, #4]
 8002800:	4613      	mov	r3, r2
 8002802:	011b      	lsls	r3, r3, #4
 8002804:	1a9b      	subs	r3, r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	334c      	adds	r3, #76	@ 0x4c
 800280c:	781b      	ldrb	r3, [r3, #0]
}
 800280e:	4618      	mov	r0, r3
 8002810:	370c      	adds	r7, #12
 8002812:	46bd      	mov	sp, r7
 8002814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002818:	4770      	bx	lr

0800281a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 800281a:	b480      	push	{r7}
 800281c:	b083      	sub	sp, #12
 800281e:	af00      	add	r7, sp, #0
 8002820:	6078      	str	r0, [r7, #4]
 8002822:	460b      	mov	r3, r1
 8002824:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 8002826:	78fa      	ldrb	r2, [r7, #3]
 8002828:	6879      	ldr	r1, [r7, #4]
 800282a:	4613      	mov	r3, r2
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	1a9b      	subs	r3, r3, r2
 8002830:	009b      	lsls	r3, r3, #2
 8002832:	440b      	add	r3, r1
 8002834:	3338      	adds	r3, #56	@ 0x38
 8002836:	681b      	ldr	r3, [r3, #0]
}
 8002838:	4618      	mov	r0, r3
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b082      	sub	sp, #8
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f004 fd2e 	bl	80072b2 <USB_GetCurrentFrame>
 8002856:	4603      	mov	r3, r0
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}

08002860 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b082      	sub	sp, #8
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f004 fd09 	bl	8007284 <USB_GetHostSpeed>
 8002872:	4603      	mov	r3, r0
}
 8002874:	4618      	mov	r0, r3
 8002876:	3708      	adds	r7, #8
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}

0800287c <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 800287c:	b480      	push	{r7}
 800287e:	b083      	sub	sp, #12
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
 8002884:	460b      	mov	r3, r1
 8002886:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002888:	78fa      	ldrb	r2, [r7, #3]
 800288a:	6879      	ldr	r1, [r7, #4]
 800288c:	4613      	mov	r3, r2
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	1a9b      	subs	r3, r3, r2
 8002892:	009b      	lsls	r3, r3, #2
 8002894:	440b      	add	r3, r1
 8002896:	331a      	adds	r3, #26
 8002898:	2200      	movs	r2, #0
 800289a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 800289c:	78fa      	ldrb	r2, [r7, #3]
 800289e:	6879      	ldr	r1, [r7, #4]
 80028a0:	4613      	mov	r3, r2
 80028a2:	011b      	lsls	r3, r3, #4
 80028a4:	1a9b      	subs	r3, r3, r2
 80028a6:	009b      	lsls	r3, r3, #2
 80028a8:	440b      	add	r3, r1
 80028aa:	331b      	adds	r3, #27
 80028ac:	2200      	movs	r2, #0
 80028ae:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 80028b0:	78fa      	ldrb	r2, [r7, #3]
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	4613      	mov	r3, r2
 80028b6:	011b      	lsls	r3, r3, #4
 80028b8:	1a9b      	subs	r3, r3, r2
 80028ba:	009b      	lsls	r3, r3, #2
 80028bc:	440b      	add	r3, r1
 80028be:	3325      	adds	r3, #37	@ 0x25
 80028c0:	2200      	movs	r2, #0
 80028c2:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 80028c4:	78fa      	ldrb	r2, [r7, #3]
 80028c6:	6879      	ldr	r1, [r7, #4]
 80028c8:	4613      	mov	r3, r2
 80028ca:	011b      	lsls	r3, r3, #4
 80028cc:	1a9b      	subs	r3, r3, r2
 80028ce:	009b      	lsls	r3, r3, #2
 80028d0:	440b      	add	r3, r1
 80028d2:	3324      	adds	r3, #36	@ 0x24
 80028d4:	2200      	movs	r2, #0
 80028d6:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr

080028e6 <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80028e6:	b580      	push	{r7, lr}
 80028e8:	b086      	sub	sp, #24
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
 80028ee:	460b      	mov	r3, r1
 80028f0:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	78fa      	ldrb	r2, [r7, #3]
 8002902:	4611      	mov	r1, r2
 8002904:	4618      	mov	r0, r3
 8002906:	f004 faf8 	bl	8006efa <USB_ReadChInterrupts>
 800290a:	4603      	mov	r3, r0
 800290c:	f003 0304 	and.w	r3, r3, #4
 8002910:	2b04      	cmp	r3, #4
 8002912:	d11a      	bne.n	800294a <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 8002914:	78fb      	ldrb	r3, [r7, #3]
 8002916:	015a      	lsls	r2, r3, #5
 8002918:	693b      	ldr	r3, [r7, #16]
 800291a:	4413      	add	r3, r2
 800291c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002920:	461a      	mov	r2, r3
 8002922:	2304      	movs	r3, #4
 8002924:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	6879      	ldr	r1, [r7, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	011b      	lsls	r3, r3, #4
 800292e:	1a9b      	subs	r3, r3, r2
 8002930:	009b      	lsls	r3, r3, #2
 8002932:	440b      	add	r3, r1
 8002934:	334d      	adds	r3, #77	@ 0x4d
 8002936:	2207      	movs	r2, #7
 8002938:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	78fa      	ldrb	r2, [r7, #3]
 8002940:	4611      	mov	r1, r2
 8002942:	4618      	mov	r0, r3
 8002944:	f005 f87d 	bl	8007a42 <USB_HC_Halt>
 8002948:	e09e      	b.n	8002a88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f004 fad1 	bl	8006efa <USB_ReadChInterrupts>
 8002958:	4603      	mov	r3, r0
 800295a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800295e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002962:	d11b      	bne.n	800299c <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 8002964:	78fb      	ldrb	r3, [r7, #3]
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	693b      	ldr	r3, [r7, #16]
 800296a:	4413      	add	r3, r2
 800296c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002970:	461a      	mov	r2, r3
 8002972:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002976:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002978:	78fa      	ldrb	r2, [r7, #3]
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	4613      	mov	r3, r2
 800297e:	011b      	lsls	r3, r3, #4
 8002980:	1a9b      	subs	r3, r3, r2
 8002982:	009b      	lsls	r3, r3, #2
 8002984:	440b      	add	r3, r1
 8002986:	334d      	adds	r3, #77	@ 0x4d
 8002988:	2208      	movs	r2, #8
 800298a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	78fa      	ldrb	r2, [r7, #3]
 8002992:	4611      	mov	r1, r2
 8002994:	4618      	mov	r0, r3
 8002996:	f005 f854 	bl	8007a42 <USB_HC_Halt>
 800299a:	e075      	b.n	8002a88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	78fa      	ldrb	r2, [r7, #3]
 80029a2:	4611      	mov	r1, r2
 80029a4:	4618      	mov	r0, r3
 80029a6:	f004 faa8 	bl	8006efa <USB_ReadChInterrupts>
 80029aa:	4603      	mov	r3, r0
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b08      	cmp	r3, #8
 80029b2:	d11a      	bne.n	80029ea <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80029b4:	78fb      	ldrb	r3, [r7, #3]
 80029b6:	015a      	lsls	r2, r3, #5
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	4413      	add	r3, r2
 80029bc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029c0:	461a      	mov	r2, r3
 80029c2:	2308      	movs	r3, #8
 80029c4:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80029c6:	78fa      	ldrb	r2, [r7, #3]
 80029c8:	6879      	ldr	r1, [r7, #4]
 80029ca:	4613      	mov	r3, r2
 80029cc:	011b      	lsls	r3, r3, #4
 80029ce:	1a9b      	subs	r3, r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	440b      	add	r3, r1
 80029d4:	334d      	adds	r3, #77	@ 0x4d
 80029d6:	2206      	movs	r2, #6
 80029d8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	78fa      	ldrb	r2, [r7, #3]
 80029e0:	4611      	mov	r1, r2
 80029e2:	4618      	mov	r0, r3
 80029e4:	f005 f82d 	bl	8007a42 <USB_HC_Halt>
 80029e8:	e04e      	b.n	8002a88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	4611      	mov	r1, r2
 80029f2:	4618      	mov	r0, r3
 80029f4:	f004 fa81 	bl	8006efa <USB_ReadChInterrupts>
 80029f8:	4603      	mov	r3, r0
 80029fa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80029fe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a02:	d11b      	bne.n	8002a3c <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8002a04:	78fb      	ldrb	r3, [r7, #3]
 8002a06:	015a      	lsls	r2, r3, #5
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a10:	461a      	mov	r2, r3
 8002a12:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002a16:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	4613      	mov	r3, r2
 8002a1e:	011b      	lsls	r3, r3, #4
 8002a20:	1a9b      	subs	r3, r3, r2
 8002a22:	009b      	lsls	r3, r3, #2
 8002a24:	440b      	add	r3, r1
 8002a26:	334d      	adds	r3, #77	@ 0x4d
 8002a28:	2209      	movs	r2, #9
 8002a2a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	78fa      	ldrb	r2, [r7, #3]
 8002a32:	4611      	mov	r1, r2
 8002a34:	4618      	mov	r0, r3
 8002a36:	f005 f804 	bl	8007a42 <USB_HC_Halt>
 8002a3a:	e025      	b.n	8002a88 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	78fa      	ldrb	r2, [r7, #3]
 8002a42:	4611      	mov	r1, r2
 8002a44:	4618      	mov	r0, r3
 8002a46:	f004 fa58 	bl	8006efa <USB_ReadChInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a50:	2b80      	cmp	r3, #128	@ 0x80
 8002a52:	d119      	bne.n	8002a88 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	015a      	lsls	r2, r3, #5
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	4413      	add	r3, r2
 8002a5c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a60:	461a      	mov	r2, r3
 8002a62:	2380      	movs	r3, #128	@ 0x80
 8002a64:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 8002a66:	78fa      	ldrb	r2, [r7, #3]
 8002a68:	6879      	ldr	r1, [r7, #4]
 8002a6a:	4613      	mov	r3, r2
 8002a6c:	011b      	lsls	r3, r3, #4
 8002a6e:	1a9b      	subs	r3, r3, r2
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	440b      	add	r3, r1
 8002a74:	334d      	adds	r3, #77	@ 0x4d
 8002a76:	2207      	movs	r2, #7
 8002a78:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	78fa      	ldrb	r2, [r7, #3]
 8002a80:	4611      	mov	r1, r2
 8002a82:	4618      	mov	r0, r3
 8002a84:	f004 ffdd 	bl	8007a42 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	78fa      	ldrb	r2, [r7, #3]
 8002a8e:	4611      	mov	r1, r2
 8002a90:	4618      	mov	r0, r3
 8002a92:	f004 fa32 	bl	8006efa <USB_ReadChInterrupts>
 8002a96:	4603      	mov	r3, r0
 8002a98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a9c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002aa0:	d112      	bne.n	8002ac8 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	78fa      	ldrb	r2, [r7, #3]
 8002aa8:	4611      	mov	r1, r2
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f004 ffc9 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	015a      	lsls	r2, r3, #5
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	4413      	add	r3, r2
 8002ab8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002abc:	461a      	mov	r2, r3
 8002abe:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002ac2:	6093      	str	r3, [r2, #8]
 8002ac4:	f000 bd75 	b.w	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	78fa      	ldrb	r2, [r7, #3]
 8002ace:	4611      	mov	r1, r2
 8002ad0:	4618      	mov	r0, r3
 8002ad2:	f004 fa12 	bl	8006efa <USB_ReadChInterrupts>
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	f003 0301 	and.w	r3, r3, #1
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	f040 8128 	bne.w	8002d32 <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002ae2:	78fb      	ldrb	r3, [r7, #3]
 8002ae4:	015a      	lsls	r2, r3, #5
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	4413      	add	r3, r2
 8002aea:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aee:	461a      	mov	r2, r3
 8002af0:	2320      	movs	r3, #32
 8002af2:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 8002af4:	78fa      	ldrb	r2, [r7, #3]
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	4613      	mov	r3, r2
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	1a9b      	subs	r3, r3, r2
 8002afe:	009b      	lsls	r3, r3, #2
 8002b00:	440b      	add	r3, r1
 8002b02:	331b      	adds	r3, #27
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d119      	bne.n	8002b3e <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8002b0a:	78fa      	ldrb	r2, [r7, #3]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	4613      	mov	r3, r2
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	1a9b      	subs	r3, r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	440b      	add	r3, r1
 8002b18:	331b      	adds	r3, #27
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002b1e:	78fb      	ldrb	r3, [r7, #3]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	693b      	ldr	r3, [r7, #16]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	78fa      	ldrb	r2, [r7, #3]
 8002b2e:	0151      	lsls	r1, r2, #5
 8002b30:	693a      	ldr	r2, [r7, #16]
 8002b32:	440a      	add	r2, r1
 8002b34:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002b38:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b3c:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	799b      	ldrb	r3, [r3, #6]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d01b      	beq.n	8002b7e <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 8002b46:	78fa      	ldrb	r2, [r7, #3]
 8002b48:	6879      	ldr	r1, [r7, #4]
 8002b4a:	4613      	mov	r3, r2
 8002b4c:	011b      	lsls	r3, r3, #4
 8002b4e:	1a9b      	subs	r3, r3, r2
 8002b50:	009b      	lsls	r3, r3, #2
 8002b52:	440b      	add	r3, r1
 8002b54:	3330      	adds	r3, #48	@ 0x30
 8002b56:	6819      	ldr	r1, [r3, #0]
 8002b58:	78fb      	ldrb	r3, [r7, #3]
 8002b5a:	015a      	lsls	r2, r3, #5
 8002b5c:	693b      	ldr	r3, [r7, #16]
 8002b5e:	4413      	add	r3, r2
 8002b60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b6a:	78fa      	ldrb	r2, [r7, #3]
 8002b6c:	1ac9      	subs	r1, r1, r3
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	4613      	mov	r3, r2
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	1a9b      	subs	r3, r3, r2
 8002b76:	009b      	lsls	r3, r3, #2
 8002b78:	4403      	add	r3, r0
 8002b7a:	3338      	adds	r3, #56	@ 0x38
 8002b7c:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002b7e:	78fa      	ldrb	r2, [r7, #3]
 8002b80:	6879      	ldr	r1, [r7, #4]
 8002b82:	4613      	mov	r3, r2
 8002b84:	011b      	lsls	r3, r3, #4
 8002b86:	1a9b      	subs	r3, r3, r2
 8002b88:	009b      	lsls	r3, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	334d      	adds	r3, #77	@ 0x4d
 8002b8e:	2201      	movs	r2, #1
 8002b90:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002b92:	78fa      	ldrb	r2, [r7, #3]
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	3344      	adds	r3, #68	@ 0x44
 8002ba2:	2200      	movs	r2, #0
 8002ba4:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002ba6:	78fb      	ldrb	r3, [r7, #3]
 8002ba8:	015a      	lsls	r2, r3, #5
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	4413      	add	r3, r2
 8002bae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bb2:	461a      	mov	r2, r3
 8002bb4:	2301      	movs	r3, #1
 8002bb6:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002bb8:	78fa      	ldrb	r2, [r7, #3]
 8002bba:	6879      	ldr	r1, [r7, #4]
 8002bbc:	4613      	mov	r3, r2
 8002bbe:	011b      	lsls	r3, r3, #4
 8002bc0:	1a9b      	subs	r3, r3, r2
 8002bc2:	009b      	lsls	r3, r3, #2
 8002bc4:	440b      	add	r3, r1
 8002bc6:	3326      	adds	r3, #38	@ 0x26
 8002bc8:	781b      	ldrb	r3, [r3, #0]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d00a      	beq.n	8002be4 <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002bce:	78fa      	ldrb	r2, [r7, #3]
 8002bd0:	6879      	ldr	r1, [r7, #4]
 8002bd2:	4613      	mov	r3, r2
 8002bd4:	011b      	lsls	r3, r3, #4
 8002bd6:	1a9b      	subs	r3, r3, r2
 8002bd8:	009b      	lsls	r3, r3, #2
 8002bda:	440b      	add	r3, r1
 8002bdc:	3326      	adds	r3, #38	@ 0x26
 8002bde:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002be0:	2b02      	cmp	r3, #2
 8002be2:	d110      	bne.n	8002c06 <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	78fa      	ldrb	r2, [r7, #3]
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 ff28 	bl	8007a42 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2310      	movs	r3, #16
 8002c02:	6093      	str	r3, [r2, #8]
 8002c04:	e03d      	b.n	8002c82 <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c06:	78fa      	ldrb	r2, [r7, #3]
 8002c08:	6879      	ldr	r1, [r7, #4]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	011b      	lsls	r3, r3, #4
 8002c0e:	1a9b      	subs	r3, r3, r2
 8002c10:	009b      	lsls	r3, r3, #2
 8002c12:	440b      	add	r3, r1
 8002c14:	3326      	adds	r3, #38	@ 0x26
 8002c16:	781b      	ldrb	r3, [r3, #0]
 8002c18:	2b03      	cmp	r3, #3
 8002c1a:	d00a      	beq.n	8002c32 <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	3326      	adds	r3, #38	@ 0x26
 8002c2c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002c2e:	2b01      	cmp	r3, #1
 8002c30:	d127      	bne.n	8002c82 <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002c32:	78fb      	ldrb	r3, [r7, #3]
 8002c34:	015a      	lsls	r2, r3, #5
 8002c36:	693b      	ldr	r3, [r7, #16]
 8002c38:	4413      	add	r3, r2
 8002c3a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	78fa      	ldrb	r2, [r7, #3]
 8002c42:	0151      	lsls	r1, r2, #5
 8002c44:	693a      	ldr	r2, [r7, #16]
 8002c46:	440a      	add	r2, r1
 8002c48:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002c4c:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002c50:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002c52:	78fa      	ldrb	r2, [r7, #3]
 8002c54:	6879      	ldr	r1, [r7, #4]
 8002c56:	4613      	mov	r3, r2
 8002c58:	011b      	lsls	r3, r3, #4
 8002c5a:	1a9b      	subs	r3, r3, r2
 8002c5c:	009b      	lsls	r3, r3, #2
 8002c5e:	440b      	add	r3, r1
 8002c60:	334c      	adds	r3, #76	@ 0x4c
 8002c62:	2201      	movs	r2, #1
 8002c64:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002c66:	78fa      	ldrb	r2, [r7, #3]
 8002c68:	6879      	ldr	r1, [r7, #4]
 8002c6a:	4613      	mov	r3, r2
 8002c6c:	011b      	lsls	r3, r3, #4
 8002c6e:	1a9b      	subs	r3, r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	440b      	add	r3, r1
 8002c74:	334c      	adds	r3, #76	@ 0x4c
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	78fb      	ldrb	r3, [r7, #3]
 8002c7a:	4619      	mov	r1, r3
 8002c7c:	6878      	ldr	r0, [r7, #4]
 8002c7e:	f007 fa39 	bl	800a0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	799b      	ldrb	r3, [r3, #6]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d13b      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002c8a:	78fa      	ldrb	r2, [r7, #3]
 8002c8c:	6879      	ldr	r1, [r7, #4]
 8002c8e:	4613      	mov	r3, r2
 8002c90:	011b      	lsls	r3, r3, #4
 8002c92:	1a9b      	subs	r3, r3, r2
 8002c94:	009b      	lsls	r3, r3, #2
 8002c96:	440b      	add	r3, r1
 8002c98:	3338      	adds	r3, #56	@ 0x38
 8002c9a:	6819      	ldr	r1, [r3, #0]
 8002c9c:	78fa      	ldrb	r2, [r7, #3]
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	4613      	mov	r3, r2
 8002ca2:	011b      	lsls	r3, r3, #4
 8002ca4:	1a9b      	subs	r3, r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4403      	add	r3, r0
 8002caa:	3328      	adds	r3, #40	@ 0x28
 8002cac:	881b      	ldrh	r3, [r3, #0]
 8002cae:	440b      	add	r3, r1
 8002cb0:	1e59      	subs	r1, r3, #1
 8002cb2:	78fa      	ldrb	r2, [r7, #3]
 8002cb4:	6878      	ldr	r0, [r7, #4]
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	011b      	lsls	r3, r3, #4
 8002cba:	1a9b      	subs	r3, r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	4403      	add	r3, r0
 8002cc0:	3328      	adds	r3, #40	@ 0x28
 8002cc2:	881b      	ldrh	r3, [r3, #0]
 8002cc4:	fbb1 f3f3 	udiv	r3, r1, r3
 8002cc8:	f003 0301 	and.w	r3, r3, #1
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	f000 8470 	beq.w	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002cd2:	78fa      	ldrb	r2, [r7, #3]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	011b      	lsls	r3, r3, #4
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	333c      	adds	r3, #60	@ 0x3c
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	78fa      	ldrb	r2, [r7, #3]
 8002ce6:	f083 0301 	eor.w	r3, r3, #1
 8002cea:	b2d8      	uxtb	r0, r3
 8002cec:	6879      	ldr	r1, [r7, #4]
 8002cee:	4613      	mov	r3, r2
 8002cf0:	011b      	lsls	r3, r3, #4
 8002cf2:	1a9b      	subs	r3, r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	333c      	adds	r3, #60	@ 0x3c
 8002cfa:	4602      	mov	r2, r0
 8002cfc:	701a      	strb	r2, [r3, #0]
 8002cfe:	f000 bc58 	b.w	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	333c      	adds	r3, #60	@ 0x3c
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	78fa      	ldrb	r2, [r7, #3]
 8002d16:	f083 0301 	eor.w	r3, r3, #1
 8002d1a:	b2d8      	uxtb	r0, r3
 8002d1c:	6879      	ldr	r1, [r7, #4]
 8002d1e:	4613      	mov	r3, r2
 8002d20:	011b      	lsls	r3, r3, #4
 8002d22:	1a9b      	subs	r3, r3, r2
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	440b      	add	r3, r1
 8002d28:	333c      	adds	r3, #60	@ 0x3c
 8002d2a:	4602      	mov	r2, r0
 8002d2c:	701a      	strb	r2, [r3, #0]
 8002d2e:	f000 bc40 	b.w	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	78fa      	ldrb	r2, [r7, #3]
 8002d38:	4611      	mov	r1, r2
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f004 f8dd 	bl	8006efa <USB_ReadChInterrupts>
 8002d40:	4603      	mov	r3, r0
 8002d42:	f003 0320 	and.w	r3, r3, #32
 8002d46:	2b20      	cmp	r3, #32
 8002d48:	d131      	bne.n	8002dae <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002d4a:	78fb      	ldrb	r3, [r7, #3]
 8002d4c:	015a      	lsls	r2, r3, #5
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4413      	add	r3, r2
 8002d52:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002d56:	461a      	mov	r2, r3
 8002d58:	2320      	movs	r3, #32
 8002d5a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d5c:	78fa      	ldrb	r2, [r7, #3]
 8002d5e:	6879      	ldr	r1, [r7, #4]
 8002d60:	4613      	mov	r3, r2
 8002d62:	011b      	lsls	r3, r3, #4
 8002d64:	1a9b      	subs	r3, r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	440b      	add	r3, r1
 8002d6a:	331a      	adds	r3, #26
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b01      	cmp	r3, #1
 8002d70:	f040 841f 	bne.w	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002d74:	78fa      	ldrb	r2, [r7, #3]
 8002d76:	6879      	ldr	r1, [r7, #4]
 8002d78:	4613      	mov	r3, r2
 8002d7a:	011b      	lsls	r3, r3, #4
 8002d7c:	1a9b      	subs	r3, r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	440b      	add	r3, r1
 8002d82:	331b      	adds	r3, #27
 8002d84:	2201      	movs	r2, #1
 8002d86:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002d88:	78fa      	ldrb	r2, [r7, #3]
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	4613      	mov	r3, r2
 8002d8e:	011b      	lsls	r3, r3, #4
 8002d90:	1a9b      	subs	r3, r3, r2
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	440b      	add	r3, r1
 8002d96:	334d      	adds	r3, #77	@ 0x4d
 8002d98:	2203      	movs	r2, #3
 8002d9a:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	78fa      	ldrb	r2, [r7, #3]
 8002da2:	4611      	mov	r1, r2
 8002da4:	4618      	mov	r0, r3
 8002da6:	f004 fe4c 	bl	8007a42 <USB_HC_Halt>
 8002daa:	f000 bc02 	b.w	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	78fa      	ldrb	r2, [r7, #3]
 8002db4:	4611      	mov	r1, r2
 8002db6:	4618      	mov	r0, r3
 8002db8:	f004 f89f 	bl	8006efa <USB_ReadChInterrupts>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	f003 0302 	and.w	r3, r3, #2
 8002dc2:	2b02      	cmp	r3, #2
 8002dc4:	f040 8305 	bne.w	80033d2 <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002dc8:	78fb      	ldrb	r3, [r7, #3]
 8002dca:	015a      	lsls	r2, r3, #5
 8002dcc:	693b      	ldr	r3, [r7, #16]
 8002dce:	4413      	add	r3, r2
 8002dd0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002dd4:	461a      	mov	r2, r3
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002dda:	78fa      	ldrb	r2, [r7, #3]
 8002ddc:	6879      	ldr	r1, [r7, #4]
 8002dde:	4613      	mov	r3, r2
 8002de0:	011b      	lsls	r3, r3, #4
 8002de2:	1a9b      	subs	r3, r3, r2
 8002de4:	009b      	lsls	r3, r3, #2
 8002de6:	440b      	add	r3, r1
 8002de8:	334d      	adds	r3, #77	@ 0x4d
 8002dea:	781b      	ldrb	r3, [r3, #0]
 8002dec:	2b01      	cmp	r3, #1
 8002dee:	d114      	bne.n	8002e1a <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334d      	adds	r3, #77	@ 0x4d
 8002e00:	2202      	movs	r2, #2
 8002e02:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002e04:	78fa      	ldrb	r2, [r7, #3]
 8002e06:	6879      	ldr	r1, [r7, #4]
 8002e08:	4613      	mov	r3, r2
 8002e0a:	011b      	lsls	r3, r3, #4
 8002e0c:	1a9b      	subs	r3, r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	440b      	add	r3, r1
 8002e12:	334c      	adds	r3, #76	@ 0x4c
 8002e14:	2201      	movs	r2, #1
 8002e16:	701a      	strb	r2, [r3, #0]
 8002e18:	e2cc      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	334d      	adds	r3, #77	@ 0x4d
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b06      	cmp	r3, #6
 8002e2e:	d114      	bne.n	8002e5a <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	334d      	adds	r3, #77	@ 0x4d
 8002e40:	2202      	movs	r2, #2
 8002e42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002e44:	78fa      	ldrb	r2, [r7, #3]
 8002e46:	6879      	ldr	r1, [r7, #4]
 8002e48:	4613      	mov	r3, r2
 8002e4a:	011b      	lsls	r3, r3, #4
 8002e4c:	1a9b      	subs	r3, r3, r2
 8002e4e:	009b      	lsls	r3, r3, #2
 8002e50:	440b      	add	r3, r1
 8002e52:	334c      	adds	r3, #76	@ 0x4c
 8002e54:	2205      	movs	r2, #5
 8002e56:	701a      	strb	r2, [r3, #0]
 8002e58:	e2ac      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e5a:	78fa      	ldrb	r2, [r7, #3]
 8002e5c:	6879      	ldr	r1, [r7, #4]
 8002e5e:	4613      	mov	r3, r2
 8002e60:	011b      	lsls	r3, r3, #4
 8002e62:	1a9b      	subs	r3, r3, r2
 8002e64:	009b      	lsls	r3, r3, #2
 8002e66:	440b      	add	r3, r1
 8002e68:	334d      	adds	r3, #77	@ 0x4d
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b07      	cmp	r3, #7
 8002e6e:	d00b      	beq.n	8002e88 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002e70:	78fa      	ldrb	r2, [r7, #3]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	4613      	mov	r3, r2
 8002e76:	011b      	lsls	r3, r3, #4
 8002e78:	1a9b      	subs	r3, r3, r2
 8002e7a:	009b      	lsls	r3, r3, #2
 8002e7c:	440b      	add	r3, r1
 8002e7e:	334d      	adds	r3, #77	@ 0x4d
 8002e80:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002e82:	2b09      	cmp	r3, #9
 8002e84:	f040 80a6 	bne.w	8002fd4 <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e88:	78fa      	ldrb	r2, [r7, #3]
 8002e8a:	6879      	ldr	r1, [r7, #4]
 8002e8c:	4613      	mov	r3, r2
 8002e8e:	011b      	lsls	r3, r3, #4
 8002e90:	1a9b      	subs	r3, r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	440b      	add	r3, r1
 8002e96:	334d      	adds	r3, #77	@ 0x4d
 8002e98:	2202      	movs	r2, #2
 8002e9a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002e9c:	78fa      	ldrb	r2, [r7, #3]
 8002e9e:	6879      	ldr	r1, [r7, #4]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	011b      	lsls	r3, r3, #4
 8002ea4:	1a9b      	subs	r3, r3, r2
 8002ea6:	009b      	lsls	r3, r3, #2
 8002ea8:	440b      	add	r3, r1
 8002eaa:	3344      	adds	r3, #68	@ 0x44
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	1c59      	adds	r1, r3, #1
 8002eb0:	6878      	ldr	r0, [r7, #4]
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
 8002eba:	4403      	add	r3, r0
 8002ebc:	3344      	adds	r3, #68	@ 0x44
 8002ebe:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3344      	adds	r3, #68	@ 0x44
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	2b02      	cmp	r3, #2
 8002ed4:	d943      	bls.n	8002f5e <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3344      	adds	r3, #68	@ 0x44
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002eea:	78fa      	ldrb	r2, [r7, #3]
 8002eec:	6879      	ldr	r1, [r7, #4]
 8002eee:	4613      	mov	r3, r2
 8002ef0:	011b      	lsls	r3, r3, #4
 8002ef2:	1a9b      	subs	r3, r3, r2
 8002ef4:	009b      	lsls	r3, r3, #2
 8002ef6:	440b      	add	r3, r1
 8002ef8:	331a      	adds	r3, #26
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	2b01      	cmp	r3, #1
 8002efe:	d123      	bne.n	8002f48 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002f00:	78fa      	ldrb	r2, [r7, #3]
 8002f02:	6879      	ldr	r1, [r7, #4]
 8002f04:	4613      	mov	r3, r2
 8002f06:	011b      	lsls	r3, r3, #4
 8002f08:	1a9b      	subs	r3, r3, r2
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	440b      	add	r3, r1
 8002f0e:	331b      	adds	r3, #27
 8002f10:	2200      	movs	r2, #0
 8002f12:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002f14:	78fa      	ldrb	r2, [r7, #3]
 8002f16:	6879      	ldr	r1, [r7, #4]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	011b      	lsls	r3, r3, #4
 8002f1c:	1a9b      	subs	r3, r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	440b      	add	r3, r1
 8002f22:	331c      	adds	r3, #28
 8002f24:	2200      	movs	r2, #0
 8002f26:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f28:	78fb      	ldrb	r3, [r7, #3]
 8002f2a:	015a      	lsls	r2, r3, #5
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4413      	add	r3, r2
 8002f30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	78fa      	ldrb	r2, [r7, #3]
 8002f38:	0151      	lsls	r1, r2, #5
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	440a      	add	r2, r1
 8002f3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f46:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f48:	78fa      	ldrb	r2, [r7, #3]
 8002f4a:	6879      	ldr	r1, [r7, #4]
 8002f4c:	4613      	mov	r3, r2
 8002f4e:	011b      	lsls	r3, r3, #4
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	009b      	lsls	r3, r3, #2
 8002f54:	440b      	add	r3, r1
 8002f56:	334c      	adds	r3, #76	@ 0x4c
 8002f58:	2204      	movs	r2, #4
 8002f5a:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002f5c:	e229      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f5e:	78fa      	ldrb	r2, [r7, #3]
 8002f60:	6879      	ldr	r1, [r7, #4]
 8002f62:	4613      	mov	r3, r2
 8002f64:	011b      	lsls	r3, r3, #4
 8002f66:	1a9b      	subs	r3, r3, r2
 8002f68:	009b      	lsls	r3, r3, #2
 8002f6a:	440b      	add	r3, r1
 8002f6c:	334c      	adds	r3, #76	@ 0x4c
 8002f6e:	2202      	movs	r2, #2
 8002f70:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f72:	78fa      	ldrb	r2, [r7, #3]
 8002f74:	6879      	ldr	r1, [r7, #4]
 8002f76:	4613      	mov	r3, r2
 8002f78:	011b      	lsls	r3, r3, #4
 8002f7a:	1a9b      	subs	r3, r3, r2
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	440b      	add	r3, r1
 8002f80:	3326      	adds	r3, #38	@ 0x26
 8002f82:	781b      	ldrb	r3, [r3, #0]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00b      	beq.n	8002fa0 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002f88:	78fa      	ldrb	r2, [r7, #3]
 8002f8a:	6879      	ldr	r1, [r7, #4]
 8002f8c:	4613      	mov	r3, r2
 8002f8e:	011b      	lsls	r3, r3, #4
 8002f90:	1a9b      	subs	r3, r3, r2
 8002f92:	009b      	lsls	r3, r3, #2
 8002f94:	440b      	add	r3, r1
 8002f96:	3326      	adds	r3, #38	@ 0x26
 8002f98:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	f040 8209 	bne.w	80033b2 <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002fa0:	78fb      	ldrb	r3, [r7, #3]
 8002fa2:	015a      	lsls	r2, r3, #5
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	4413      	add	r3, r2
 8002fa8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002fb6:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002fbe:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002fc0:	78fb      	ldrb	r3, [r7, #3]
 8002fc2:	015a      	lsls	r2, r3, #5
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4413      	add	r3, r2
 8002fc8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002fcc:	461a      	mov	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002fd2:	e1ee      	b.n	80033b2 <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002fd4:	78fa      	ldrb	r2, [r7, #3]
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	4613      	mov	r3, r2
 8002fda:	011b      	lsls	r3, r3, #4
 8002fdc:	1a9b      	subs	r3, r3, r2
 8002fde:	009b      	lsls	r3, r3, #2
 8002fe0:	440b      	add	r3, r1
 8002fe2:	334d      	adds	r3, #77	@ 0x4d
 8002fe4:	781b      	ldrb	r3, [r3, #0]
 8002fe6:	2b05      	cmp	r3, #5
 8002fe8:	f040 80c8 	bne.w	800317c <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002fec:	78fa      	ldrb	r2, [r7, #3]
 8002fee:	6879      	ldr	r1, [r7, #4]
 8002ff0:	4613      	mov	r3, r2
 8002ff2:	011b      	lsls	r3, r3, #4
 8002ff4:	1a9b      	subs	r3, r3, r2
 8002ff6:	009b      	lsls	r3, r3, #2
 8002ff8:	440b      	add	r3, r1
 8002ffa:	334d      	adds	r3, #77	@ 0x4d
 8002ffc:	2202      	movs	r2, #2
 8002ffe:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003000:	78fa      	ldrb	r2, [r7, #3]
 8003002:	6879      	ldr	r1, [r7, #4]
 8003004:	4613      	mov	r3, r2
 8003006:	011b      	lsls	r3, r3, #4
 8003008:	1a9b      	subs	r3, r3, r2
 800300a:	009b      	lsls	r3, r3, #2
 800300c:	440b      	add	r3, r1
 800300e:	331b      	adds	r3, #27
 8003010:	781b      	ldrb	r3, [r3, #0]
 8003012:	2b01      	cmp	r3, #1
 8003014:	f040 81ce 	bne.w	80033b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003018:	78fa      	ldrb	r2, [r7, #3]
 800301a:	6879      	ldr	r1, [r7, #4]
 800301c:	4613      	mov	r3, r2
 800301e:	011b      	lsls	r3, r3, #4
 8003020:	1a9b      	subs	r3, r3, r2
 8003022:	009b      	lsls	r3, r3, #2
 8003024:	440b      	add	r3, r1
 8003026:	3326      	adds	r3, #38	@ 0x26
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b03      	cmp	r3, #3
 800302c:	d16b      	bne.n	8003106 <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 800302e:	78fa      	ldrb	r2, [r7, #3]
 8003030:	6879      	ldr	r1, [r7, #4]
 8003032:	4613      	mov	r3, r2
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	1a9b      	subs	r3, r3, r2
 8003038:	009b      	lsls	r3, r3, #2
 800303a:	440b      	add	r3, r1
 800303c:	3348      	adds	r3, #72	@ 0x48
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	1c59      	adds	r1, r3, #1
 8003042:	6878      	ldr	r0, [r7, #4]
 8003044:	4613      	mov	r3, r2
 8003046:	011b      	lsls	r3, r3, #4
 8003048:	1a9b      	subs	r3, r3, r2
 800304a:	009b      	lsls	r3, r3, #2
 800304c:	4403      	add	r3, r0
 800304e:	3348      	adds	r3, #72	@ 0x48
 8003050:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8003052:	78fa      	ldrb	r2, [r7, #3]
 8003054:	6879      	ldr	r1, [r7, #4]
 8003056:	4613      	mov	r3, r2
 8003058:	011b      	lsls	r3, r3, #4
 800305a:	1a9b      	subs	r3, r3, r2
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	440b      	add	r3, r1
 8003060:	3348      	adds	r3, #72	@ 0x48
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	2b02      	cmp	r3, #2
 8003066:	d943      	bls.n	80030f0 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	3348      	adds	r3, #72	@ 0x48
 8003078:	2200      	movs	r2, #0
 800307a:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 800307c:	78fa      	ldrb	r2, [r7, #3]
 800307e:	6879      	ldr	r1, [r7, #4]
 8003080:	4613      	mov	r3, r2
 8003082:	011b      	lsls	r3, r3, #4
 8003084:	1a9b      	subs	r3, r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	440b      	add	r3, r1
 800308a:	331b      	adds	r3, #27
 800308c:	2200      	movs	r2, #0
 800308e:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8003090:	78fa      	ldrb	r2, [r7, #3]
 8003092:	6879      	ldr	r1, [r7, #4]
 8003094:	4613      	mov	r3, r2
 8003096:	011b      	lsls	r3, r3, #4
 8003098:	1a9b      	subs	r3, r3, r2
 800309a:	009b      	lsls	r3, r3, #2
 800309c:	440b      	add	r3, r1
 800309e:	3344      	adds	r3, #68	@ 0x44
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2b02      	cmp	r3, #2
 80030a4:	d809      	bhi.n	80030ba <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 80030a6:	78fa      	ldrb	r2, [r7, #3]
 80030a8:	6879      	ldr	r1, [r7, #4]
 80030aa:	4613      	mov	r3, r2
 80030ac:	011b      	lsls	r3, r3, #4
 80030ae:	1a9b      	subs	r3, r3, r2
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	440b      	add	r3, r1
 80030b4:	331c      	adds	r3, #28
 80030b6:	2201      	movs	r2, #1
 80030b8:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80030ba:	78fb      	ldrb	r3, [r7, #3]
 80030bc:	015a      	lsls	r2, r3, #5
 80030be:	693b      	ldr	r3, [r7, #16]
 80030c0:	4413      	add	r3, r2
 80030c2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	78fa      	ldrb	r2, [r7, #3]
 80030ca:	0151      	lsls	r1, r2, #5
 80030cc:	693a      	ldr	r2, [r7, #16]
 80030ce:	440a      	add	r2, r1
 80030d0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030d4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030d8:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 80030da:	78fa      	ldrb	r2, [r7, #3]
 80030dc:	6879      	ldr	r1, [r7, #4]
 80030de:	4613      	mov	r3, r2
 80030e0:	011b      	lsls	r3, r3, #4
 80030e2:	1a9b      	subs	r3, r3, r2
 80030e4:	009b      	lsls	r3, r3, #2
 80030e6:	440b      	add	r3, r1
 80030e8:	334c      	adds	r3, #76	@ 0x4c
 80030ea:	2204      	movs	r2, #4
 80030ec:	701a      	strb	r2, [r3, #0]
 80030ee:	e014      	b.n	800311a <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80030f0:	78fa      	ldrb	r2, [r7, #3]
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	4613      	mov	r3, r2
 80030f6:	011b      	lsls	r3, r3, #4
 80030f8:	1a9b      	subs	r3, r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	440b      	add	r3, r1
 80030fe:	334c      	adds	r3, #76	@ 0x4c
 8003100:	2202      	movs	r2, #2
 8003102:	701a      	strb	r2, [r3, #0]
 8003104:	e009      	b.n	800311a <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003106:	78fa      	ldrb	r2, [r7, #3]
 8003108:	6879      	ldr	r1, [r7, #4]
 800310a:	4613      	mov	r3, r2
 800310c:	011b      	lsls	r3, r3, #4
 800310e:	1a9b      	subs	r3, r3, r2
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	440b      	add	r3, r1
 8003114:	334c      	adds	r3, #76	@ 0x4c
 8003116:	2202      	movs	r2, #2
 8003118:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800311a:	78fa      	ldrb	r2, [r7, #3]
 800311c:	6879      	ldr	r1, [r7, #4]
 800311e:	4613      	mov	r3, r2
 8003120:	011b      	lsls	r3, r3, #4
 8003122:	1a9b      	subs	r3, r3, r2
 8003124:	009b      	lsls	r3, r3, #2
 8003126:	440b      	add	r3, r1
 8003128:	3326      	adds	r3, #38	@ 0x26
 800312a:	781b      	ldrb	r3, [r3, #0]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00b      	beq.n	8003148 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003130:	78fa      	ldrb	r2, [r7, #3]
 8003132:	6879      	ldr	r1, [r7, #4]
 8003134:	4613      	mov	r3, r2
 8003136:	011b      	lsls	r3, r3, #4
 8003138:	1a9b      	subs	r3, r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	440b      	add	r3, r1
 800313e:	3326      	adds	r3, #38	@ 0x26
 8003140:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003142:	2b02      	cmp	r3, #2
 8003144:	f040 8136 	bne.w	80033b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003148:	78fb      	ldrb	r3, [r7, #3]
 800314a:	015a      	lsls	r2, r3, #5
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4413      	add	r3, r2
 8003150:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800315e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003166:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003168:	78fb      	ldrb	r3, [r7, #3]
 800316a:	015a      	lsls	r2, r3, #5
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	4413      	add	r3, r2
 8003170:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003174:	461a      	mov	r2, r3
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	6013      	str	r3, [r2, #0]
 800317a:	e11b      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	334d      	adds	r3, #77	@ 0x4d
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b03      	cmp	r3, #3
 8003190:	f040 8081 	bne.w	8003296 <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003194:	78fa      	ldrb	r2, [r7, #3]
 8003196:	6879      	ldr	r1, [r7, #4]
 8003198:	4613      	mov	r3, r2
 800319a:	011b      	lsls	r3, r3, #4
 800319c:	1a9b      	subs	r3, r3, r2
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	440b      	add	r3, r1
 80031a2:	334d      	adds	r3, #77	@ 0x4d
 80031a4:	2202      	movs	r2, #2
 80031a6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 80031a8:	78fa      	ldrb	r2, [r7, #3]
 80031aa:	6879      	ldr	r1, [r7, #4]
 80031ac:	4613      	mov	r3, r2
 80031ae:	011b      	lsls	r3, r3, #4
 80031b0:	1a9b      	subs	r3, r3, r2
 80031b2:	009b      	lsls	r3, r3, #2
 80031b4:	440b      	add	r3, r1
 80031b6:	331b      	adds	r3, #27
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	2b01      	cmp	r3, #1
 80031bc:	f040 80fa 	bne.w	80033b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80031c0:	78fa      	ldrb	r2, [r7, #3]
 80031c2:	6879      	ldr	r1, [r7, #4]
 80031c4:	4613      	mov	r3, r2
 80031c6:	011b      	lsls	r3, r3, #4
 80031c8:	1a9b      	subs	r3, r3, r2
 80031ca:	009b      	lsls	r3, r3, #2
 80031cc:	440b      	add	r3, r1
 80031ce:	334c      	adds	r3, #76	@ 0x4c
 80031d0:	2202      	movs	r2, #2
 80031d2:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80031d4:	78fb      	ldrb	r3, [r7, #3]
 80031d6:	015a      	lsls	r2, r3, #5
 80031d8:	693b      	ldr	r3, [r7, #16]
 80031da:	4413      	add	r3, r2
 80031dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	78fa      	ldrb	r2, [r7, #3]
 80031e4:	0151      	lsls	r1, r2, #5
 80031e6:	693a      	ldr	r2, [r7, #16]
 80031e8:	440a      	add	r2, r1
 80031ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80031ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f2:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80031f4:	78fb      	ldrb	r3, [r7, #3]
 80031f6:	015a      	lsls	r2, r3, #5
 80031f8:	693b      	ldr	r3, [r7, #16]
 80031fa:	4413      	add	r3, r2
 80031fc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	78fa      	ldrb	r2, [r7, #3]
 8003204:	0151      	lsls	r1, r2, #5
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	440a      	add	r2, r1
 800320a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800320e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003212:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	015a      	lsls	r2, r3, #5
 8003218:	693b      	ldr	r3, [r7, #16]
 800321a:	4413      	add	r3, r2
 800321c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003220:	68db      	ldr	r3, [r3, #12]
 8003222:	78fa      	ldrb	r2, [r7, #3]
 8003224:	0151      	lsls	r1, r2, #5
 8003226:	693a      	ldr	r2, [r7, #16]
 8003228:	440a      	add	r2, r1
 800322a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800322e:	f023 0320 	bic.w	r3, r3, #32
 8003232:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003234:	78fa      	ldrb	r2, [r7, #3]
 8003236:	6879      	ldr	r1, [r7, #4]
 8003238:	4613      	mov	r3, r2
 800323a:	011b      	lsls	r3, r3, #4
 800323c:	1a9b      	subs	r3, r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	440b      	add	r3, r1
 8003242:	3326      	adds	r3, #38	@ 0x26
 8003244:	781b      	ldrb	r3, [r3, #0]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00b      	beq.n	8003262 <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 800324a:	78fa      	ldrb	r2, [r7, #3]
 800324c:	6879      	ldr	r1, [r7, #4]
 800324e:	4613      	mov	r3, r2
 8003250:	011b      	lsls	r3, r3, #4
 8003252:	1a9b      	subs	r3, r3, r2
 8003254:	009b      	lsls	r3, r3, #2
 8003256:	440b      	add	r3, r1
 8003258:	3326      	adds	r3, #38	@ 0x26
 800325a:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800325c:	2b02      	cmp	r3, #2
 800325e:	f040 80a9 	bne.w	80033b4 <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8003262:	78fb      	ldrb	r3, [r7, #3]
 8003264:	015a      	lsls	r2, r3, #5
 8003266:	693b      	ldr	r3, [r7, #16]
 8003268:	4413      	add	r3, r2
 800326a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003278:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003280:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003282:	78fb      	ldrb	r3, [r7, #3]
 8003284:	015a      	lsls	r2, r3, #5
 8003286:	693b      	ldr	r3, [r7, #16]
 8003288:	4413      	add	r3, r2
 800328a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800328e:	461a      	mov	r2, r3
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	6013      	str	r3, [r2, #0]
 8003294:	e08e      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003296:	78fa      	ldrb	r2, [r7, #3]
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	4613      	mov	r3, r2
 800329c:	011b      	lsls	r3, r3, #4
 800329e:	1a9b      	subs	r3, r3, r2
 80032a0:	009b      	lsls	r3, r3, #2
 80032a2:	440b      	add	r3, r1
 80032a4:	334d      	adds	r3, #77	@ 0x4d
 80032a6:	781b      	ldrb	r3, [r3, #0]
 80032a8:	2b04      	cmp	r3, #4
 80032aa:	d143      	bne.n	8003334 <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80032ac:	78fa      	ldrb	r2, [r7, #3]
 80032ae:	6879      	ldr	r1, [r7, #4]
 80032b0:	4613      	mov	r3, r2
 80032b2:	011b      	lsls	r3, r3, #4
 80032b4:	1a9b      	subs	r3, r3, r2
 80032b6:	009b      	lsls	r3, r3, #2
 80032b8:	440b      	add	r3, r1
 80032ba:	334d      	adds	r3, #77	@ 0x4d
 80032bc:	2202      	movs	r2, #2
 80032be:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 80032c0:	78fa      	ldrb	r2, [r7, #3]
 80032c2:	6879      	ldr	r1, [r7, #4]
 80032c4:	4613      	mov	r3, r2
 80032c6:	011b      	lsls	r3, r3, #4
 80032c8:	1a9b      	subs	r3, r3, r2
 80032ca:	009b      	lsls	r3, r3, #2
 80032cc:	440b      	add	r3, r1
 80032ce:	334c      	adds	r3, #76	@ 0x4c
 80032d0:	2202      	movs	r2, #2
 80032d2:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032d4:	78fa      	ldrb	r2, [r7, #3]
 80032d6:	6879      	ldr	r1, [r7, #4]
 80032d8:	4613      	mov	r3, r2
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	1a9b      	subs	r3, r3, r2
 80032de:	009b      	lsls	r3, r3, #2
 80032e0:	440b      	add	r3, r1
 80032e2:	3326      	adds	r3, #38	@ 0x26
 80032e4:	781b      	ldrb	r3, [r3, #0]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d00a      	beq.n	8003300 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80032ea:	78fa      	ldrb	r2, [r7, #3]
 80032ec:	6879      	ldr	r1, [r7, #4]
 80032ee:	4613      	mov	r3, r2
 80032f0:	011b      	lsls	r3, r3, #4
 80032f2:	1a9b      	subs	r3, r3, r2
 80032f4:	009b      	lsls	r3, r3, #2
 80032f6:	440b      	add	r3, r1
 80032f8:	3326      	adds	r3, #38	@ 0x26
 80032fa:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80032fc:	2b02      	cmp	r3, #2
 80032fe:	d159      	bne.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003300:	78fb      	ldrb	r3, [r7, #3]
 8003302:	015a      	lsls	r2, r3, #5
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4413      	add	r3, r2
 8003308:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003316:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800331e:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003320:	78fb      	ldrb	r3, [r7, #3]
 8003322:	015a      	lsls	r2, r3, #5
 8003324:	693b      	ldr	r3, [r7, #16]
 8003326:	4413      	add	r3, r2
 8003328:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800332c:	461a      	mov	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e03f      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 8003334:	78fa      	ldrb	r2, [r7, #3]
 8003336:	6879      	ldr	r1, [r7, #4]
 8003338:	4613      	mov	r3, r2
 800333a:	011b      	lsls	r3, r3, #4
 800333c:	1a9b      	subs	r3, r3, r2
 800333e:	009b      	lsls	r3, r3, #2
 8003340:	440b      	add	r3, r1
 8003342:	334d      	adds	r3, #77	@ 0x4d
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2b08      	cmp	r3, #8
 8003348:	d126      	bne.n	8003398 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800334a:	78fa      	ldrb	r2, [r7, #3]
 800334c:	6879      	ldr	r1, [r7, #4]
 800334e:	4613      	mov	r3, r2
 8003350:	011b      	lsls	r3, r3, #4
 8003352:	1a9b      	subs	r3, r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	440b      	add	r3, r1
 8003358:	334d      	adds	r3, #77	@ 0x4d
 800335a:	2202      	movs	r2, #2
 800335c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 800335e:	78fa      	ldrb	r2, [r7, #3]
 8003360:	6879      	ldr	r1, [r7, #4]
 8003362:	4613      	mov	r3, r2
 8003364:	011b      	lsls	r3, r3, #4
 8003366:	1a9b      	subs	r3, r3, r2
 8003368:	009b      	lsls	r3, r3, #2
 800336a:	440b      	add	r3, r1
 800336c:	3344      	adds	r3, #68	@ 0x44
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	1c59      	adds	r1, r3, #1
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	4403      	add	r3, r0
 800337e:	3344      	adds	r3, #68	@ 0x44
 8003380:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 8003382:	78fa      	ldrb	r2, [r7, #3]
 8003384:	6879      	ldr	r1, [r7, #4]
 8003386:	4613      	mov	r3, r2
 8003388:	011b      	lsls	r3, r3, #4
 800338a:	1a9b      	subs	r3, r3, r2
 800338c:	009b      	lsls	r3, r3, #2
 800338e:	440b      	add	r3, r1
 8003390:	334c      	adds	r3, #76	@ 0x4c
 8003392:	2204      	movs	r2, #4
 8003394:	701a      	strb	r2, [r3, #0]
 8003396:	e00d      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003398:	78fa      	ldrb	r2, [r7, #3]
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	4613      	mov	r3, r2
 800339e:	011b      	lsls	r3, r3, #4
 80033a0:	1a9b      	subs	r3, r3, r2
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	440b      	add	r3, r1
 80033a6:	334d      	adds	r3, #77	@ 0x4d
 80033a8:	781b      	ldrb	r3, [r3, #0]
 80033aa:	2b02      	cmp	r3, #2
 80033ac:	f000 8100 	beq.w	80035b0 <HCD_HC_IN_IRQHandler+0xcca>
 80033b0:	e000      	b.n	80033b4 <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80033b2:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 80033b4:	78fa      	ldrb	r2, [r7, #3]
 80033b6:	6879      	ldr	r1, [r7, #4]
 80033b8:	4613      	mov	r3, r2
 80033ba:	011b      	lsls	r3, r3, #4
 80033bc:	1a9b      	subs	r3, r3, r2
 80033be:	009b      	lsls	r3, r3, #2
 80033c0:	440b      	add	r3, r1
 80033c2:	334c      	adds	r3, #76	@ 0x4c
 80033c4:	781a      	ldrb	r2, [r3, #0]
 80033c6:	78fb      	ldrb	r3, [r7, #3]
 80033c8:	4619      	mov	r1, r3
 80033ca:	6878      	ldr	r0, [r7, #4]
 80033cc:	f006 fe92 	bl	800a0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 80033d0:	e0ef      	b.n	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	4611      	mov	r1, r2
 80033da:	4618      	mov	r0, r3
 80033dc:	f003 fd8d 	bl	8006efa <USB_ReadChInterrupts>
 80033e0:	4603      	mov	r3, r0
 80033e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033e6:	2b40      	cmp	r3, #64	@ 0x40
 80033e8:	d12f      	bne.n	800344a <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80033ea:	78fb      	ldrb	r3, [r7, #3]
 80033ec:	015a      	lsls	r2, r3, #5
 80033ee:	693b      	ldr	r3, [r7, #16]
 80033f0:	4413      	add	r3, r2
 80033f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80033f6:	461a      	mov	r2, r3
 80033f8:	2340      	movs	r3, #64	@ 0x40
 80033fa:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80033fc:	78fa      	ldrb	r2, [r7, #3]
 80033fe:	6879      	ldr	r1, [r7, #4]
 8003400:	4613      	mov	r3, r2
 8003402:	011b      	lsls	r3, r3, #4
 8003404:	1a9b      	subs	r3, r3, r2
 8003406:	009b      	lsls	r3, r3, #2
 8003408:	440b      	add	r3, r1
 800340a:	334d      	adds	r3, #77	@ 0x4d
 800340c:	2205      	movs	r2, #5
 800340e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	6879      	ldr	r1, [r7, #4]
 8003414:	4613      	mov	r3, r2
 8003416:	011b      	lsls	r3, r3, #4
 8003418:	1a9b      	subs	r3, r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	331a      	adds	r3, #26
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d109      	bne.n	800343a <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003426:	78fa      	ldrb	r2, [r7, #3]
 8003428:	6879      	ldr	r1, [r7, #4]
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
 8003432:	440b      	add	r3, r1
 8003434:	3344      	adds	r3, #68	@ 0x44
 8003436:	2200      	movs	r2, #0
 8003438:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	78fa      	ldrb	r2, [r7, #3]
 8003440:	4611      	mov	r1, r2
 8003442:	4618      	mov	r0, r3
 8003444:	f004 fafd 	bl	8007a42 <USB_HC_Halt>
 8003448:	e0b3      	b.n	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	78fa      	ldrb	r2, [r7, #3]
 8003450:	4611      	mov	r1, r2
 8003452:	4618      	mov	r0, r3
 8003454:	f003 fd51 	bl	8006efa <USB_ReadChInterrupts>
 8003458:	4603      	mov	r3, r0
 800345a:	f003 0310 	and.w	r3, r3, #16
 800345e:	2b10      	cmp	r3, #16
 8003460:	f040 80a7 	bne.w	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8003464:	78fa      	ldrb	r2, [r7, #3]
 8003466:	6879      	ldr	r1, [r7, #4]
 8003468:	4613      	mov	r3, r2
 800346a:	011b      	lsls	r3, r3, #4
 800346c:	1a9b      	subs	r3, r3, r2
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	3326      	adds	r3, #38	@ 0x26
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b03      	cmp	r3, #3
 8003478:	d11b      	bne.n	80034b2 <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	6879      	ldr	r1, [r7, #4]
 800347e:	4613      	mov	r3, r2
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	1a9b      	subs	r3, r3, r2
 8003484:	009b      	lsls	r3, r3, #2
 8003486:	440b      	add	r3, r1
 8003488:	3344      	adds	r3, #68	@ 0x44
 800348a:	2200      	movs	r2, #0
 800348c:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 800348e:	78fa      	ldrb	r2, [r7, #3]
 8003490:	6879      	ldr	r1, [r7, #4]
 8003492:	4613      	mov	r3, r2
 8003494:	011b      	lsls	r3, r3, #4
 8003496:	1a9b      	subs	r3, r3, r2
 8003498:	009b      	lsls	r3, r3, #2
 800349a:	440b      	add	r3, r1
 800349c:	334d      	adds	r3, #77	@ 0x4d
 800349e:	2204      	movs	r2, #4
 80034a0:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	78fa      	ldrb	r2, [r7, #3]
 80034a8:	4611      	mov	r1, r2
 80034aa:	4618      	mov	r0, r3
 80034ac:	f004 fac9 	bl	8007a42 <USB_HC_Halt>
 80034b0:	e03f      	b.n	8003532 <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034b2:	78fa      	ldrb	r2, [r7, #3]
 80034b4:	6879      	ldr	r1, [r7, #4]
 80034b6:	4613      	mov	r3, r2
 80034b8:	011b      	lsls	r3, r3, #4
 80034ba:	1a9b      	subs	r3, r3, r2
 80034bc:	009b      	lsls	r3, r3, #2
 80034be:	440b      	add	r3, r1
 80034c0:	3326      	adds	r3, #38	@ 0x26
 80034c2:	781b      	ldrb	r3, [r3, #0]
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d00a      	beq.n	80034de <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80034c8:	78fa      	ldrb	r2, [r7, #3]
 80034ca:	6879      	ldr	r1, [r7, #4]
 80034cc:	4613      	mov	r3, r2
 80034ce:	011b      	lsls	r3, r3, #4
 80034d0:	1a9b      	subs	r3, r3, r2
 80034d2:	009b      	lsls	r3, r3, #2
 80034d4:	440b      	add	r3, r1
 80034d6:	3326      	adds	r3, #38	@ 0x26
 80034d8:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80034da:	2b02      	cmp	r3, #2
 80034dc:	d129      	bne.n	8003532 <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80034de:	78fa      	ldrb	r2, [r7, #3]
 80034e0:	6879      	ldr	r1, [r7, #4]
 80034e2:	4613      	mov	r3, r2
 80034e4:	011b      	lsls	r3, r3, #4
 80034e6:	1a9b      	subs	r3, r3, r2
 80034e8:	009b      	lsls	r3, r3, #2
 80034ea:	440b      	add	r3, r1
 80034ec:	3344      	adds	r3, #68	@ 0x44
 80034ee:	2200      	movs	r2, #0
 80034f0:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	799b      	ldrb	r3, [r3, #6]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d00a      	beq.n	8003510 <HCD_HC_IN_IRQHandler+0xc2a>
 80034fa:	78fa      	ldrb	r2, [r7, #3]
 80034fc:	6879      	ldr	r1, [r7, #4]
 80034fe:	4613      	mov	r3, r2
 8003500:	011b      	lsls	r3, r3, #4
 8003502:	1a9b      	subs	r3, r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	440b      	add	r3, r1
 8003508:	331b      	adds	r3, #27
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	2b01      	cmp	r3, #1
 800350e:	d110      	bne.n	8003532 <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 8003510:	78fa      	ldrb	r2, [r7, #3]
 8003512:	6879      	ldr	r1, [r7, #4]
 8003514:	4613      	mov	r3, r2
 8003516:	011b      	lsls	r3, r3, #4
 8003518:	1a9b      	subs	r3, r3, r2
 800351a:	009b      	lsls	r3, r3, #2
 800351c:	440b      	add	r3, r1
 800351e:	334d      	adds	r3, #77	@ 0x4d
 8003520:	2204      	movs	r2, #4
 8003522:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	78fa      	ldrb	r2, [r7, #3]
 800352a:	4611      	mov	r1, r2
 800352c:	4618      	mov	r0, r3
 800352e:	f004 fa88 	bl	8007a42 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 8003532:	78fa      	ldrb	r2, [r7, #3]
 8003534:	6879      	ldr	r1, [r7, #4]
 8003536:	4613      	mov	r3, r2
 8003538:	011b      	lsls	r3, r3, #4
 800353a:	1a9b      	subs	r3, r3, r2
 800353c:	009b      	lsls	r3, r3, #2
 800353e:	440b      	add	r3, r1
 8003540:	331b      	adds	r3, #27
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b01      	cmp	r3, #1
 8003546:	d129      	bne.n	800359c <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	6879      	ldr	r1, [r7, #4]
 800354c:	4613      	mov	r3, r2
 800354e:	011b      	lsls	r3, r3, #4
 8003550:	1a9b      	subs	r3, r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	331b      	adds	r3, #27
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	015a      	lsls	r2, r3, #5
 8003560:	693b      	ldr	r3, [r7, #16]
 8003562:	4413      	add	r3, r2
 8003564:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003568:	685b      	ldr	r3, [r3, #4]
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	0151      	lsls	r1, r2, #5
 800356e:	693a      	ldr	r2, [r7, #16]
 8003570:	440a      	add	r2, r1
 8003572:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003576:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800357a:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	015a      	lsls	r2, r3, #5
 8003580:	693b      	ldr	r3, [r7, #16]
 8003582:	4413      	add	r3, r2
 8003584:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	78fa      	ldrb	r2, [r7, #3]
 800358c:	0151      	lsls	r1, r2, #5
 800358e:	693a      	ldr	r2, [r7, #16]
 8003590:	440a      	add	r2, r1
 8003592:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003596:	f043 0320 	orr.w	r3, r3, #32
 800359a:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	015a      	lsls	r2, r3, #5
 80035a0:	693b      	ldr	r3, [r7, #16]
 80035a2:	4413      	add	r3, r2
 80035a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035a8:	461a      	mov	r2, r3
 80035aa:	2310      	movs	r3, #16
 80035ac:	6093      	str	r3, [r2, #8]
 80035ae:	e000      	b.n	80035b2 <HCD_HC_IN_IRQHandler+0xccc>
        return;
 80035b0:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 80035b2:	3718      	adds	r7, #24
 80035b4:	46bd      	mov	sp, r7
 80035b6:	bd80      	pop	{r7, pc}

080035b8 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b086      	sub	sp, #24
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	460b      	mov	r3, r1
 80035c2:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	78fa      	ldrb	r2, [r7, #3]
 80035d4:	4611      	mov	r1, r2
 80035d6:	4618      	mov	r0, r3
 80035d8:	f003 fc8f 	bl	8006efa <USB_ReadChInterrupts>
 80035dc:	4603      	mov	r3, r0
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d11b      	bne.n	800361e <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80035e6:	78fb      	ldrb	r3, [r7, #3]
 80035e8:	015a      	lsls	r2, r3, #5
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	4413      	add	r3, r2
 80035ee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80035f2:	461a      	mov	r2, r3
 80035f4:	2304      	movs	r3, #4
 80035f6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80035f8:	78fa      	ldrb	r2, [r7, #3]
 80035fa:	6879      	ldr	r1, [r7, #4]
 80035fc:	4613      	mov	r3, r2
 80035fe:	011b      	lsls	r3, r3, #4
 8003600:	1a9b      	subs	r3, r3, r2
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	440b      	add	r3, r1
 8003606:	334d      	adds	r3, #77	@ 0x4d
 8003608:	2207      	movs	r2, #7
 800360a:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	78fa      	ldrb	r2, [r7, #3]
 8003612:	4611      	mov	r1, r2
 8003614:	4618      	mov	r0, r3
 8003616:	f004 fa14 	bl	8007a42 <USB_HC_Halt>
 800361a:	f000 bc89 	b.w	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	4611      	mov	r1, r2
 8003626:	4618      	mov	r0, r3
 8003628:	f003 fc67 	bl	8006efa <USB_ReadChInterrupts>
 800362c:	4603      	mov	r3, r0
 800362e:	f003 0320 	and.w	r3, r3, #32
 8003632:	2b20      	cmp	r3, #32
 8003634:	f040 8082 	bne.w	800373c <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8003638:	78fb      	ldrb	r3, [r7, #3]
 800363a:	015a      	lsls	r2, r3, #5
 800363c:	693b      	ldr	r3, [r7, #16]
 800363e:	4413      	add	r3, r2
 8003640:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003644:	461a      	mov	r2, r3
 8003646:	2320      	movs	r3, #32
 8003648:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 800364a:	78fa      	ldrb	r2, [r7, #3]
 800364c:	6879      	ldr	r1, [r7, #4]
 800364e:	4613      	mov	r3, r2
 8003650:	011b      	lsls	r3, r3, #4
 8003652:	1a9b      	subs	r3, r3, r2
 8003654:	009b      	lsls	r3, r3, #2
 8003656:	440b      	add	r3, r1
 8003658:	3319      	adds	r3, #25
 800365a:	781b      	ldrb	r3, [r3, #0]
 800365c:	2b01      	cmp	r3, #1
 800365e:	d124      	bne.n	80036aa <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003660:	78fa      	ldrb	r2, [r7, #3]
 8003662:	6879      	ldr	r1, [r7, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	011b      	lsls	r3, r3, #4
 8003668:	1a9b      	subs	r3, r3, r2
 800366a:	009b      	lsls	r3, r3, #2
 800366c:	440b      	add	r3, r1
 800366e:	3319      	adds	r3, #25
 8003670:	2200      	movs	r2, #0
 8003672:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003674:	78fa      	ldrb	r2, [r7, #3]
 8003676:	6879      	ldr	r1, [r7, #4]
 8003678:	4613      	mov	r3, r2
 800367a:	011b      	lsls	r3, r3, #4
 800367c:	1a9b      	subs	r3, r3, r2
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	440b      	add	r3, r1
 8003682:	334c      	adds	r3, #76	@ 0x4c
 8003684:	2202      	movs	r2, #2
 8003686:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003688:	78fa      	ldrb	r2, [r7, #3]
 800368a:	6879      	ldr	r1, [r7, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	011b      	lsls	r3, r3, #4
 8003690:	1a9b      	subs	r3, r3, r2
 8003692:	009b      	lsls	r3, r3, #2
 8003694:	440b      	add	r3, r1
 8003696:	334d      	adds	r3, #77	@ 0x4d
 8003698:	2203      	movs	r2, #3
 800369a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	78fa      	ldrb	r2, [r7, #3]
 80036a2:	4611      	mov	r1, r2
 80036a4:	4618      	mov	r0, r3
 80036a6:	f004 f9cc 	bl	8007a42 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 80036aa:	78fa      	ldrb	r2, [r7, #3]
 80036ac:	6879      	ldr	r1, [r7, #4]
 80036ae:	4613      	mov	r3, r2
 80036b0:	011b      	lsls	r3, r3, #4
 80036b2:	1a9b      	subs	r3, r3, r2
 80036b4:	009b      	lsls	r3, r3, #2
 80036b6:	440b      	add	r3, r1
 80036b8:	331a      	adds	r3, #26
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b01      	cmp	r3, #1
 80036be:	f040 8437 	bne.w	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
 80036c2:	78fa      	ldrb	r2, [r7, #3]
 80036c4:	6879      	ldr	r1, [r7, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	011b      	lsls	r3, r3, #4
 80036ca:	1a9b      	subs	r3, r3, r2
 80036cc:	009b      	lsls	r3, r3, #2
 80036ce:	440b      	add	r3, r1
 80036d0:	331b      	adds	r3, #27
 80036d2:	781b      	ldrb	r3, [r3, #0]
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	f040 842b 	bne.w	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 80036da:	78fa      	ldrb	r2, [r7, #3]
 80036dc:	6879      	ldr	r1, [r7, #4]
 80036de:	4613      	mov	r3, r2
 80036e0:	011b      	lsls	r3, r3, #4
 80036e2:	1a9b      	subs	r3, r3, r2
 80036e4:	009b      	lsls	r3, r3, #2
 80036e6:	440b      	add	r3, r1
 80036e8:	3326      	adds	r3, #38	@ 0x26
 80036ea:	781b      	ldrb	r3, [r3, #0]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d009      	beq.n	8003704 <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 80036f0:	78fa      	ldrb	r2, [r7, #3]
 80036f2:	6879      	ldr	r1, [r7, #4]
 80036f4:	4613      	mov	r3, r2
 80036f6:	011b      	lsls	r3, r3, #4
 80036f8:	1a9b      	subs	r3, r3, r2
 80036fa:	009b      	lsls	r3, r3, #2
 80036fc:	440b      	add	r3, r1
 80036fe:	331b      	adds	r3, #27
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 8003704:	78fa      	ldrb	r2, [r7, #3]
 8003706:	6879      	ldr	r1, [r7, #4]
 8003708:	4613      	mov	r3, r2
 800370a:	011b      	lsls	r3, r3, #4
 800370c:	1a9b      	subs	r3, r3, r2
 800370e:	009b      	lsls	r3, r3, #2
 8003710:	440b      	add	r3, r1
 8003712:	334d      	adds	r3, #77	@ 0x4d
 8003714:	2203      	movs	r2, #3
 8003716:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	78fa      	ldrb	r2, [r7, #3]
 800371e:	4611      	mov	r1, r2
 8003720:	4618      	mov	r0, r3
 8003722:	f004 f98e 	bl	8007a42 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 8003726:	78fa      	ldrb	r2, [r7, #3]
 8003728:	6879      	ldr	r1, [r7, #4]
 800372a:	4613      	mov	r3, r2
 800372c:	011b      	lsls	r3, r3, #4
 800372e:	1a9b      	subs	r3, r3, r2
 8003730:	009b      	lsls	r3, r3, #2
 8003732:	440b      	add	r3, r1
 8003734:	3344      	adds	r3, #68	@ 0x44
 8003736:	2200      	movs	r2, #0
 8003738:	601a      	str	r2, [r3, #0]
 800373a:	e3f9      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	78fa      	ldrb	r2, [r7, #3]
 8003742:	4611      	mov	r1, r2
 8003744:	4618      	mov	r0, r3
 8003746:	f003 fbd8 	bl	8006efa <USB_ReadChInterrupts>
 800374a:	4603      	mov	r3, r0
 800374c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003750:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003754:	d111      	bne.n	800377a <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8003756:	78fb      	ldrb	r3, [r7, #3]
 8003758:	015a      	lsls	r2, r3, #5
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	4413      	add	r3, r2
 800375e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003762:	461a      	mov	r2, r3
 8003764:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003768:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	78fa      	ldrb	r2, [r7, #3]
 8003770:	4611      	mov	r1, r2
 8003772:	4618      	mov	r0, r3
 8003774:	f004 f965 	bl	8007a42 <USB_HC_Halt>
 8003778:	e3da      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	78fa      	ldrb	r2, [r7, #3]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f003 fbb9 	bl	8006efa <USB_ReadChInterrupts>
 8003788:	4603      	mov	r3, r0
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b01      	cmp	r3, #1
 8003790:	d168      	bne.n	8003864 <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	4613      	mov	r3, r2
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	1a9b      	subs	r3, r3, r2
 800379c:	009b      	lsls	r3, r3, #2
 800379e:	440b      	add	r3, r1
 80037a0:	3344      	adds	r3, #68	@ 0x44
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	78fa      	ldrb	r2, [r7, #3]
 80037ac:	4611      	mov	r1, r2
 80037ae:	4618      	mov	r0, r3
 80037b0:	f003 fba3 	bl	8006efa <USB_ReadChInterrupts>
 80037b4:	4603      	mov	r3, r0
 80037b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80037ba:	2b40      	cmp	r3, #64	@ 0x40
 80037bc:	d112      	bne.n	80037e4 <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80037be:	78fa      	ldrb	r2, [r7, #3]
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	4613      	mov	r3, r2
 80037c4:	011b      	lsls	r3, r3, #4
 80037c6:	1a9b      	subs	r3, r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	440b      	add	r3, r1
 80037cc:	3319      	adds	r3, #25
 80037ce:	2201      	movs	r2, #1
 80037d0:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80037d2:	78fb      	ldrb	r3, [r7, #3]
 80037d4:	015a      	lsls	r2, r3, #5
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	4413      	add	r3, r2
 80037da:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037de:	461a      	mov	r2, r3
 80037e0:	2340      	movs	r3, #64	@ 0x40
 80037e2:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 80037e4:	78fa      	ldrb	r2, [r7, #3]
 80037e6:	6879      	ldr	r1, [r7, #4]
 80037e8:	4613      	mov	r3, r2
 80037ea:	011b      	lsls	r3, r3, #4
 80037ec:	1a9b      	subs	r3, r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	440b      	add	r3, r1
 80037f2:	331b      	adds	r3, #27
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d019      	beq.n	800382e <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80037fa:	78fa      	ldrb	r2, [r7, #3]
 80037fc:	6879      	ldr	r1, [r7, #4]
 80037fe:	4613      	mov	r3, r2
 8003800:	011b      	lsls	r3, r3, #4
 8003802:	1a9b      	subs	r3, r3, r2
 8003804:	009b      	lsls	r3, r3, #2
 8003806:	440b      	add	r3, r1
 8003808:	331b      	adds	r3, #27
 800380a:	2200      	movs	r2, #0
 800380c:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 800380e:	78fb      	ldrb	r3, [r7, #3]
 8003810:	015a      	lsls	r2, r3, #5
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4413      	add	r3, r2
 8003816:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800381a:	685b      	ldr	r3, [r3, #4]
 800381c:	78fa      	ldrb	r2, [r7, #3]
 800381e:	0151      	lsls	r1, r2, #5
 8003820:	693a      	ldr	r2, [r7, #16]
 8003822:	440a      	add	r2, r1
 8003824:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003828:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800382c:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 800382e:	78fb      	ldrb	r3, [r7, #3]
 8003830:	015a      	lsls	r2, r3, #5
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	4413      	add	r3, r2
 8003836:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800383a:	461a      	mov	r2, r3
 800383c:	2301      	movs	r3, #1
 800383e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 8003840:	78fa      	ldrb	r2, [r7, #3]
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	4613      	mov	r3, r2
 8003846:	011b      	lsls	r3, r3, #4
 8003848:	1a9b      	subs	r3, r3, r2
 800384a:	009b      	lsls	r3, r3, #2
 800384c:	440b      	add	r3, r1
 800384e:	334d      	adds	r3, #77	@ 0x4d
 8003850:	2201      	movs	r2, #1
 8003852:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	4611      	mov	r1, r2
 800385c:	4618      	mov	r0, r3
 800385e:	f004 f8f0 	bl	8007a42 <USB_HC_Halt>
 8003862:	e365      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	78fa      	ldrb	r2, [r7, #3]
 800386a:	4611      	mov	r1, r2
 800386c:	4618      	mov	r0, r3
 800386e:	f003 fb44 	bl	8006efa <USB_ReadChInterrupts>
 8003872:	4603      	mov	r3, r0
 8003874:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003878:	2b40      	cmp	r3, #64	@ 0x40
 800387a:	d139      	bne.n	80038f0 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 800387c:	78fa      	ldrb	r2, [r7, #3]
 800387e:	6879      	ldr	r1, [r7, #4]
 8003880:	4613      	mov	r3, r2
 8003882:	011b      	lsls	r3, r3, #4
 8003884:	1a9b      	subs	r3, r3, r2
 8003886:	009b      	lsls	r3, r3, #2
 8003888:	440b      	add	r3, r1
 800388a:	334d      	adds	r3, #77	@ 0x4d
 800388c:	2205      	movs	r2, #5
 800388e:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003890:	78fa      	ldrb	r2, [r7, #3]
 8003892:	6879      	ldr	r1, [r7, #4]
 8003894:	4613      	mov	r3, r2
 8003896:	011b      	lsls	r3, r3, #4
 8003898:	1a9b      	subs	r3, r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	440b      	add	r3, r1
 800389e:	331a      	adds	r3, #26
 80038a0:	781b      	ldrb	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d109      	bne.n	80038ba <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 80038a6:	78fa      	ldrb	r2, [r7, #3]
 80038a8:	6879      	ldr	r1, [r7, #4]
 80038aa:	4613      	mov	r3, r2
 80038ac:	011b      	lsls	r3, r3, #4
 80038ae:	1a9b      	subs	r3, r3, r2
 80038b0:	009b      	lsls	r3, r3, #2
 80038b2:	440b      	add	r3, r1
 80038b4:	3319      	adds	r3, #25
 80038b6:	2201      	movs	r2, #1
 80038b8:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 80038ba:	78fa      	ldrb	r2, [r7, #3]
 80038bc:	6879      	ldr	r1, [r7, #4]
 80038be:	4613      	mov	r3, r2
 80038c0:	011b      	lsls	r3, r3, #4
 80038c2:	1a9b      	subs	r3, r3, r2
 80038c4:	009b      	lsls	r3, r3, #2
 80038c6:	440b      	add	r3, r1
 80038c8:	3344      	adds	r3, #68	@ 0x44
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	78fa      	ldrb	r2, [r7, #3]
 80038d4:	4611      	mov	r1, r2
 80038d6:	4618      	mov	r0, r3
 80038d8:	f004 f8b3 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 80038dc:	78fb      	ldrb	r3, [r7, #3]
 80038de:	015a      	lsls	r2, r3, #5
 80038e0:	693b      	ldr	r3, [r7, #16]
 80038e2:	4413      	add	r3, r2
 80038e4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80038e8:	461a      	mov	r2, r3
 80038ea:	2340      	movs	r3, #64	@ 0x40
 80038ec:	6093      	str	r3, [r2, #8]
 80038ee:	e31f      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	78fa      	ldrb	r2, [r7, #3]
 80038f6:	4611      	mov	r1, r2
 80038f8:	4618      	mov	r0, r3
 80038fa:	f003 fafe 	bl	8006efa <USB_ReadChInterrupts>
 80038fe:	4603      	mov	r3, r0
 8003900:	f003 0308 	and.w	r3, r3, #8
 8003904:	2b08      	cmp	r3, #8
 8003906:	d11a      	bne.n	800393e <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 8003908:	78fb      	ldrb	r3, [r7, #3]
 800390a:	015a      	lsls	r2, r3, #5
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	4413      	add	r3, r2
 8003910:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003914:	461a      	mov	r2, r3
 8003916:	2308      	movs	r3, #8
 8003918:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	334d      	adds	r3, #77	@ 0x4d
 800392a:	2206      	movs	r2, #6
 800392c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	78fa      	ldrb	r2, [r7, #3]
 8003934:	4611      	mov	r1, r2
 8003936:	4618      	mov	r0, r3
 8003938:	f004 f883 	bl	8007a42 <USB_HC_Halt>
 800393c:	e2f8      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	78fa      	ldrb	r2, [r7, #3]
 8003944:	4611      	mov	r1, r2
 8003946:	4618      	mov	r0, r3
 8003948:	f003 fad7 	bl	8006efa <USB_ReadChInterrupts>
 800394c:	4603      	mov	r3, r0
 800394e:	f003 0310 	and.w	r3, r3, #16
 8003952:	2b10      	cmp	r3, #16
 8003954:	d144      	bne.n	80039e0 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 8003956:	78fa      	ldrb	r2, [r7, #3]
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	4613      	mov	r3, r2
 800395c:	011b      	lsls	r3, r3, #4
 800395e:	1a9b      	subs	r3, r3, r2
 8003960:	009b      	lsls	r3, r3, #2
 8003962:	440b      	add	r3, r1
 8003964:	3344      	adds	r3, #68	@ 0x44
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 800396a:	78fa      	ldrb	r2, [r7, #3]
 800396c:	6879      	ldr	r1, [r7, #4]
 800396e:	4613      	mov	r3, r2
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	1a9b      	subs	r3, r3, r2
 8003974:	009b      	lsls	r3, r3, #2
 8003976:	440b      	add	r3, r1
 8003978:	334d      	adds	r3, #77	@ 0x4d
 800397a:	2204      	movs	r2, #4
 800397c:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 800397e:	78fa      	ldrb	r2, [r7, #3]
 8003980:	6879      	ldr	r1, [r7, #4]
 8003982:	4613      	mov	r3, r2
 8003984:	011b      	lsls	r3, r3, #4
 8003986:	1a9b      	subs	r3, r3, r2
 8003988:	009b      	lsls	r3, r3, #2
 800398a:	440b      	add	r3, r1
 800398c:	3319      	adds	r3, #25
 800398e:	781b      	ldrb	r3, [r3, #0]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d114      	bne.n	80039be <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 8003994:	78fa      	ldrb	r2, [r7, #3]
 8003996:	6879      	ldr	r1, [r7, #4]
 8003998:	4613      	mov	r3, r2
 800399a:	011b      	lsls	r3, r3, #4
 800399c:	1a9b      	subs	r3, r3, r2
 800399e:	009b      	lsls	r3, r3, #2
 80039a0:	440b      	add	r3, r1
 80039a2:	3318      	adds	r3, #24
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d109      	bne.n	80039be <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 80039aa:	78fa      	ldrb	r2, [r7, #3]
 80039ac:	6879      	ldr	r1, [r7, #4]
 80039ae:	4613      	mov	r3, r2
 80039b0:	011b      	lsls	r3, r3, #4
 80039b2:	1a9b      	subs	r3, r3, r2
 80039b4:	009b      	lsls	r3, r3, #2
 80039b6:	440b      	add	r3, r1
 80039b8:	3319      	adds	r3, #25
 80039ba:	2201      	movs	r2, #1
 80039bc:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	78fa      	ldrb	r2, [r7, #3]
 80039c4:	4611      	mov	r1, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f004 f83b 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 80039cc:	78fb      	ldrb	r3, [r7, #3]
 80039ce:	015a      	lsls	r2, r3, #5
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4413      	add	r3, r2
 80039d4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039d8:	461a      	mov	r2, r3
 80039da:	2310      	movs	r3, #16
 80039dc:	6093      	str	r3, [r2, #8]
 80039de:	e2a7      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	78fa      	ldrb	r2, [r7, #3]
 80039e6:	4611      	mov	r1, r2
 80039e8:	4618      	mov	r0, r3
 80039ea:	f003 fa86 	bl	8006efa <USB_ReadChInterrupts>
 80039ee:	4603      	mov	r3, r0
 80039f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80039f4:	2b80      	cmp	r3, #128	@ 0x80
 80039f6:	f040 8083 	bne.w	8003b00 <HCD_HC_OUT_IRQHandler+0x548>
  {
    if (hhcd->Init.dma_enable == 0U)
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	799b      	ldrb	r3, [r3, #6]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d111      	bne.n	8003a26 <HCD_HC_OUT_IRQHandler+0x46e>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 8003a02:	78fa      	ldrb	r2, [r7, #3]
 8003a04:	6879      	ldr	r1, [r7, #4]
 8003a06:	4613      	mov	r3, r2
 8003a08:	011b      	lsls	r3, r3, #4
 8003a0a:	1a9b      	subs	r3, r3, r2
 8003a0c:	009b      	lsls	r3, r3, #2
 8003a0e:	440b      	add	r3, r1
 8003a10:	334d      	adds	r3, #77	@ 0x4d
 8003a12:	2207      	movs	r2, #7
 8003a14:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	78fa      	ldrb	r2, [r7, #3]
 8003a1c:	4611      	mov	r1, r2
 8003a1e:	4618      	mov	r0, r3
 8003a20:	f004 f80f 	bl	8007a42 <USB_HC_Halt>
 8003a24:	e062      	b.n	8003aec <HCD_HC_OUT_IRQHandler+0x534>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 8003a26:	78fa      	ldrb	r2, [r7, #3]
 8003a28:	6879      	ldr	r1, [r7, #4]
 8003a2a:	4613      	mov	r3, r2
 8003a2c:	011b      	lsls	r3, r3, #4
 8003a2e:	1a9b      	subs	r3, r3, r2
 8003a30:	009b      	lsls	r3, r3, #2
 8003a32:	440b      	add	r3, r1
 8003a34:	3344      	adds	r3, #68	@ 0x44
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	1c59      	adds	r1, r3, #1
 8003a3a:	6878      	ldr	r0, [r7, #4]
 8003a3c:	4613      	mov	r3, r2
 8003a3e:	011b      	lsls	r3, r3, #4
 8003a40:	1a9b      	subs	r3, r3, r2
 8003a42:	009b      	lsls	r3, r3, #2
 8003a44:	4403      	add	r3, r0
 8003a46:	3344      	adds	r3, #68	@ 0x44
 8003a48:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003a4a:	78fa      	ldrb	r2, [r7, #3]
 8003a4c:	6879      	ldr	r1, [r7, #4]
 8003a4e:	4613      	mov	r3, r2
 8003a50:	011b      	lsls	r3, r3, #4
 8003a52:	1a9b      	subs	r3, r3, r2
 8003a54:	009b      	lsls	r3, r3, #2
 8003a56:	440b      	add	r3, r1
 8003a58:	3344      	adds	r3, #68	@ 0x44
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2b02      	cmp	r3, #2
 8003a5e:	d922      	bls.n	8003aa6 <HCD_HC_OUT_IRQHandler+0x4ee>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003a60:	78fa      	ldrb	r2, [r7, #3]
 8003a62:	6879      	ldr	r1, [r7, #4]
 8003a64:	4613      	mov	r3, r2
 8003a66:	011b      	lsls	r3, r3, #4
 8003a68:	1a9b      	subs	r3, r3, r2
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	440b      	add	r3, r1
 8003a6e:	3344      	adds	r3, #68	@ 0x44
 8003a70:	2200      	movs	r2, #0
 8003a72:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003a74:	78fa      	ldrb	r2, [r7, #3]
 8003a76:	6879      	ldr	r1, [r7, #4]
 8003a78:	4613      	mov	r3, r2
 8003a7a:	011b      	lsls	r3, r3, #4
 8003a7c:	1a9b      	subs	r3, r3, r2
 8003a7e:	009b      	lsls	r3, r3, #2
 8003a80:	440b      	add	r3, r1
 8003a82:	334c      	adds	r3, #76	@ 0x4c
 8003a84:	2204      	movs	r2, #4
 8003a86:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003a88:	78fa      	ldrb	r2, [r7, #3]
 8003a8a:	6879      	ldr	r1, [r7, #4]
 8003a8c:	4613      	mov	r3, r2
 8003a8e:	011b      	lsls	r3, r3, #4
 8003a90:	1a9b      	subs	r3, r3, r2
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	440b      	add	r3, r1
 8003a96:	334c      	adds	r3, #76	@ 0x4c
 8003a98:	781a      	ldrb	r2, [r3, #0]
 8003a9a:	78fb      	ldrb	r3, [r7, #3]
 8003a9c:	4619      	mov	r1, r3
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f006 fb28 	bl	800a0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003aa4:	e022      	b.n	8003aec <HCD_HC_OUT_IRQHandler+0x534>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003aa6:	78fa      	ldrb	r2, [r7, #3]
 8003aa8:	6879      	ldr	r1, [r7, #4]
 8003aaa:	4613      	mov	r3, r2
 8003aac:	011b      	lsls	r3, r3, #4
 8003aae:	1a9b      	subs	r3, r3, r2
 8003ab0:	009b      	lsls	r3, r3, #2
 8003ab2:	440b      	add	r3, r1
 8003ab4:	334c      	adds	r3, #76	@ 0x4c
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	701a      	strb	r2, [r3, #0]

        /* Re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003aba:	78fb      	ldrb	r3, [r7, #3]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003ad0:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ad8:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ada:	78fb      	ldrb	r3, [r7, #3]
 8003adc:	015a      	lsls	r2, r3, #5
 8003ade:	693b      	ldr	r3, [r7, #16]
 8003ae0:	4413      	add	r3, r2
 8003ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ae6:	461a      	mov	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6013      	str	r3, [r2, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003aec:	78fb      	ldrb	r3, [r7, #3]
 8003aee:	015a      	lsls	r2, r3, #5
 8003af0:	693b      	ldr	r3, [r7, #16]
 8003af2:	4413      	add	r3, r2
 8003af4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003af8:	461a      	mov	r2, r3
 8003afa:	2380      	movs	r3, #128	@ 0x80
 8003afc:	6093      	str	r3, [r2, #8]
 8003afe:	e217      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	78fa      	ldrb	r2, [r7, #3]
 8003b06:	4611      	mov	r1, r2
 8003b08:	4618      	mov	r0, r3
 8003b0a:	f003 f9f6 	bl	8006efa <USB_ReadChInterrupts>
 8003b0e:	4603      	mov	r3, r0
 8003b10:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b18:	d11b      	bne.n	8003b52 <HCD_HC_OUT_IRQHandler+0x59a>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 8003b1a:	78fa      	ldrb	r2, [r7, #3]
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	334d      	adds	r3, #77	@ 0x4d
 8003b2a:	2209      	movs	r2, #9
 8003b2c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	78fa      	ldrb	r2, [r7, #3]
 8003b34:	4611      	mov	r1, r2
 8003b36:	4618      	mov	r0, r3
 8003b38:	f003 ff83 	bl	8007a42 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 8003b3c:	78fb      	ldrb	r3, [r7, #3]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003b4e:	6093      	str	r3, [r2, #8]
 8003b50:	e1ee      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	78fa      	ldrb	r2, [r7, #3]
 8003b58:	4611      	mov	r1, r2
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	f003 f9cd 	bl	8006efa <USB_ReadChInterrupts>
 8003b60:	4603      	mov	r3, r0
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b02      	cmp	r3, #2
 8003b68:	f040 81df 	bne.w	8003f2a <HCD_HC_OUT_IRQHandler+0x972>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8003b6c:	78fb      	ldrb	r3, [r7, #3]
 8003b6e:	015a      	lsls	r2, r3, #5
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	4413      	add	r3, r2
 8003b74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003b78:	461a      	mov	r2, r3
 8003b7a:	2302      	movs	r3, #2
 8003b7c:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8003b7e:	78fa      	ldrb	r2, [r7, #3]
 8003b80:	6879      	ldr	r1, [r7, #4]
 8003b82:	4613      	mov	r3, r2
 8003b84:	011b      	lsls	r3, r3, #4
 8003b86:	1a9b      	subs	r3, r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	334d      	adds	r3, #77	@ 0x4d
 8003b8e:	781b      	ldrb	r3, [r3, #0]
 8003b90:	2b01      	cmp	r3, #1
 8003b92:	f040 8093 	bne.w	8003cbc <HCD_HC_OUT_IRQHandler+0x704>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b96:	78fa      	ldrb	r2, [r7, #3]
 8003b98:	6879      	ldr	r1, [r7, #4]
 8003b9a:	4613      	mov	r3, r2
 8003b9c:	011b      	lsls	r3, r3, #4
 8003b9e:	1a9b      	subs	r3, r3, r2
 8003ba0:	009b      	lsls	r3, r3, #2
 8003ba2:	440b      	add	r3, r1
 8003ba4:	334d      	adds	r3, #77	@ 0x4d
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003baa:	78fa      	ldrb	r2, [r7, #3]
 8003bac:	6879      	ldr	r1, [r7, #4]
 8003bae:	4613      	mov	r3, r2
 8003bb0:	011b      	lsls	r3, r3, #4
 8003bb2:	1a9b      	subs	r3, r3, r2
 8003bb4:	009b      	lsls	r3, r3, #2
 8003bb6:	440b      	add	r3, r1
 8003bb8:	334c      	adds	r3, #76	@ 0x4c
 8003bba:	2201      	movs	r2, #1
 8003bbc:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003bbe:	78fa      	ldrb	r2, [r7, #3]
 8003bc0:	6879      	ldr	r1, [r7, #4]
 8003bc2:	4613      	mov	r3, r2
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	1a9b      	subs	r3, r3, r2
 8003bc8:	009b      	lsls	r3, r3, #2
 8003bca:	440b      	add	r3, r1
 8003bcc:	3326      	adds	r3, #38	@ 0x26
 8003bce:	781b      	ldrb	r3, [r3, #0]
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d00b      	beq.n	8003bec <HCD_HC_OUT_IRQHandler+0x634>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003bd4:	78fa      	ldrb	r2, [r7, #3]
 8003bd6:	6879      	ldr	r1, [r7, #4]
 8003bd8:	4613      	mov	r3, r2
 8003bda:	011b      	lsls	r3, r3, #4
 8003bdc:	1a9b      	subs	r3, r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	440b      	add	r3, r1
 8003be2:	3326      	adds	r3, #38	@ 0x26
 8003be4:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003be6:	2b03      	cmp	r3, #3
 8003be8:	f040 8190 	bne.w	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	799b      	ldrb	r3, [r3, #6]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d115      	bne.n	8003c20 <HCD_HC_OUT_IRQHandler+0x668>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003bf4:	78fa      	ldrb	r2, [r7, #3]
 8003bf6:	6879      	ldr	r1, [r7, #4]
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	011b      	lsls	r3, r3, #4
 8003bfc:	1a9b      	subs	r3, r3, r2
 8003bfe:	009b      	lsls	r3, r3, #2
 8003c00:	440b      	add	r3, r1
 8003c02:	333d      	adds	r3, #61	@ 0x3d
 8003c04:	781b      	ldrb	r3, [r3, #0]
 8003c06:	78fa      	ldrb	r2, [r7, #3]
 8003c08:	f083 0301 	eor.w	r3, r3, #1
 8003c0c:	b2d8      	uxtb	r0, r3
 8003c0e:	6879      	ldr	r1, [r7, #4]
 8003c10:	4613      	mov	r3, r2
 8003c12:	011b      	lsls	r3, r3, #4
 8003c14:	1a9b      	subs	r3, r3, r2
 8003c16:	009b      	lsls	r3, r3, #2
 8003c18:	440b      	add	r3, r1
 8003c1a:	333d      	adds	r3, #61	@ 0x3d
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	799b      	ldrb	r3, [r3, #6]
 8003c24:	2b01      	cmp	r3, #1
 8003c26:	f040 8171 	bne.w	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	3334      	adds	r3, #52	@ 0x34
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	f000 8165 	beq.w	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003c42:	78fa      	ldrb	r2, [r7, #3]
 8003c44:	6879      	ldr	r1, [r7, #4]
 8003c46:	4613      	mov	r3, r2
 8003c48:	011b      	lsls	r3, r3, #4
 8003c4a:	1a9b      	subs	r3, r3, r2
 8003c4c:	009b      	lsls	r3, r3, #2
 8003c4e:	440b      	add	r3, r1
 8003c50:	3334      	adds	r3, #52	@ 0x34
 8003c52:	6819      	ldr	r1, [r3, #0]
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6878      	ldr	r0, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	4403      	add	r3, r0
 8003c62:	3328      	adds	r3, #40	@ 0x28
 8003c64:	881b      	ldrh	r3, [r3, #0]
 8003c66:	440b      	add	r3, r1
 8003c68:	1e59      	subs	r1, r3, #1
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6878      	ldr	r0, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	4403      	add	r3, r0
 8003c78:	3328      	adds	r3, #40	@ 0x28
 8003c7a:	881b      	ldrh	r3, [r3, #0]
 8003c7c:	fbb1 f3f3 	udiv	r3, r1, r3
 8003c80:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	f003 0301 	and.w	r3, r3, #1
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	f000 813f 	beq.w	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003c8e:	78fa      	ldrb	r2, [r7, #3]
 8003c90:	6879      	ldr	r1, [r7, #4]
 8003c92:	4613      	mov	r3, r2
 8003c94:	011b      	lsls	r3, r3, #4
 8003c96:	1a9b      	subs	r3, r3, r2
 8003c98:	009b      	lsls	r3, r3, #2
 8003c9a:	440b      	add	r3, r1
 8003c9c:	333d      	adds	r3, #61	@ 0x3d
 8003c9e:	781b      	ldrb	r3, [r3, #0]
 8003ca0:	78fa      	ldrb	r2, [r7, #3]
 8003ca2:	f083 0301 	eor.w	r3, r3, #1
 8003ca6:	b2d8      	uxtb	r0, r3
 8003ca8:	6879      	ldr	r1, [r7, #4]
 8003caa:	4613      	mov	r3, r2
 8003cac:	011b      	lsls	r3, r3, #4
 8003cae:	1a9b      	subs	r3, r3, r2
 8003cb0:	009b      	lsls	r3, r3, #2
 8003cb2:	440b      	add	r3, r1
 8003cb4:	333d      	adds	r3, #61	@ 0x3d
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	701a      	strb	r2, [r3, #0]
 8003cba:	e127      	b.n	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003cbc:	78fa      	ldrb	r2, [r7, #3]
 8003cbe:	6879      	ldr	r1, [r7, #4]
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	011b      	lsls	r3, r3, #4
 8003cc4:	1a9b      	subs	r3, r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	440b      	add	r3, r1
 8003cca:	334d      	adds	r3, #77	@ 0x4d
 8003ccc:	781b      	ldrb	r3, [r3, #0]
 8003cce:	2b03      	cmp	r3, #3
 8003cd0:	d120      	bne.n	8003d14 <HCD_HC_OUT_IRQHandler+0x75c>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cd2:	78fa      	ldrb	r2, [r7, #3]
 8003cd4:	6879      	ldr	r1, [r7, #4]
 8003cd6:	4613      	mov	r3, r2
 8003cd8:	011b      	lsls	r3, r3, #4
 8003cda:	1a9b      	subs	r3, r3, r2
 8003cdc:	009b      	lsls	r3, r3, #2
 8003cde:	440b      	add	r3, r1
 8003ce0:	334d      	adds	r3, #77	@ 0x4d
 8003ce2:	2202      	movs	r2, #2
 8003ce4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003ce6:	78fa      	ldrb	r2, [r7, #3]
 8003ce8:	6879      	ldr	r1, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	440b      	add	r3, r1
 8003cf4:	331b      	adds	r3, #27
 8003cf6:	781b      	ldrb	r3, [r3, #0]
 8003cf8:	2b01      	cmp	r3, #1
 8003cfa:	f040 8107 	bne.w	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003cfe:	78fa      	ldrb	r2, [r7, #3]
 8003d00:	6879      	ldr	r1, [r7, #4]
 8003d02:	4613      	mov	r3, r2
 8003d04:	011b      	lsls	r3, r3, #4
 8003d06:	1a9b      	subs	r3, r3, r2
 8003d08:	009b      	lsls	r3, r3, #2
 8003d0a:	440b      	add	r3, r1
 8003d0c:	334c      	adds	r3, #76	@ 0x4c
 8003d0e:	2202      	movs	r2, #2
 8003d10:	701a      	strb	r2, [r3, #0]
 8003d12:	e0fb      	b.n	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003d14:	78fa      	ldrb	r2, [r7, #3]
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	011b      	lsls	r3, r3, #4
 8003d1c:	1a9b      	subs	r3, r3, r2
 8003d1e:	009b      	lsls	r3, r3, #2
 8003d20:	440b      	add	r3, r1
 8003d22:	334d      	adds	r3, #77	@ 0x4d
 8003d24:	781b      	ldrb	r3, [r3, #0]
 8003d26:	2b04      	cmp	r3, #4
 8003d28:	d13a      	bne.n	8003da0 <HCD_HC_OUT_IRQHandler+0x7e8>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003d2a:	78fa      	ldrb	r2, [r7, #3]
 8003d2c:	6879      	ldr	r1, [r7, #4]
 8003d2e:	4613      	mov	r3, r2
 8003d30:	011b      	lsls	r3, r3, #4
 8003d32:	1a9b      	subs	r3, r3, r2
 8003d34:	009b      	lsls	r3, r3, #2
 8003d36:	440b      	add	r3, r1
 8003d38:	334d      	adds	r3, #77	@ 0x4d
 8003d3a:	2202      	movs	r2, #2
 8003d3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d3e:	78fa      	ldrb	r2, [r7, #3]
 8003d40:	6879      	ldr	r1, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	011b      	lsls	r3, r3, #4
 8003d46:	1a9b      	subs	r3, r3, r2
 8003d48:	009b      	lsls	r3, r3, #2
 8003d4a:	440b      	add	r3, r1
 8003d4c:	334c      	adds	r3, #76	@ 0x4c
 8003d4e:	2202      	movs	r2, #2
 8003d50:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003d52:	78fa      	ldrb	r2, [r7, #3]
 8003d54:	6879      	ldr	r1, [r7, #4]
 8003d56:	4613      	mov	r3, r2
 8003d58:	011b      	lsls	r3, r3, #4
 8003d5a:	1a9b      	subs	r3, r3, r2
 8003d5c:	009b      	lsls	r3, r3, #2
 8003d5e:	440b      	add	r3, r1
 8003d60:	331b      	adds	r3, #27
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	f040 80d1 	bne.w	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003d6a:	78fa      	ldrb	r2, [r7, #3]
 8003d6c:	6879      	ldr	r1, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	011b      	lsls	r3, r3, #4
 8003d72:	1a9b      	subs	r3, r3, r2
 8003d74:	009b      	lsls	r3, r3, #2
 8003d76:	440b      	add	r3, r1
 8003d78:	331b      	adds	r3, #27
 8003d7a:	2200      	movs	r2, #0
 8003d7c:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003d7e:	78fb      	ldrb	r3, [r7, #3]
 8003d80:	015a      	lsls	r2, r3, #5
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	4413      	add	r3, r2
 8003d86:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	78fa      	ldrb	r2, [r7, #3]
 8003d8e:	0151      	lsls	r1, r2, #5
 8003d90:	693a      	ldr	r2, [r7, #16]
 8003d92:	440a      	add	r2, r1
 8003d94:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003d98:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003d9c:	6053      	str	r3, [r2, #4]
 8003d9e:	e0b5      	b.n	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003da0:	78fa      	ldrb	r2, [r7, #3]
 8003da2:	6879      	ldr	r1, [r7, #4]
 8003da4:	4613      	mov	r3, r2
 8003da6:	011b      	lsls	r3, r3, #4
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	009b      	lsls	r3, r3, #2
 8003dac:	440b      	add	r3, r1
 8003dae:	334d      	adds	r3, #77	@ 0x4d
 8003db0:	781b      	ldrb	r3, [r3, #0]
 8003db2:	2b05      	cmp	r3, #5
 8003db4:	d114      	bne.n	8003de0 <HCD_HC_OUT_IRQHandler+0x828>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003db6:	78fa      	ldrb	r2, [r7, #3]
 8003db8:	6879      	ldr	r1, [r7, #4]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	011b      	lsls	r3, r3, #4
 8003dbe:	1a9b      	subs	r3, r3, r2
 8003dc0:	009b      	lsls	r3, r3, #2
 8003dc2:	440b      	add	r3, r1
 8003dc4:	334d      	adds	r3, #77	@ 0x4d
 8003dc6:	2202      	movs	r2, #2
 8003dc8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003dca:	78fa      	ldrb	r2, [r7, #3]
 8003dcc:	6879      	ldr	r1, [r7, #4]
 8003dce:	4613      	mov	r3, r2
 8003dd0:	011b      	lsls	r3, r3, #4
 8003dd2:	1a9b      	subs	r3, r3, r2
 8003dd4:	009b      	lsls	r3, r3, #2
 8003dd6:	440b      	add	r3, r1
 8003dd8:	334c      	adds	r3, #76	@ 0x4c
 8003dda:	2202      	movs	r2, #2
 8003ddc:	701a      	strb	r2, [r3, #0]
 8003dde:	e095      	b.n	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003de0:	78fa      	ldrb	r2, [r7, #3]
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	4613      	mov	r3, r2
 8003de6:	011b      	lsls	r3, r3, #4
 8003de8:	1a9b      	subs	r3, r3, r2
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	334d      	adds	r3, #77	@ 0x4d
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b06      	cmp	r3, #6
 8003df4:	d114      	bne.n	8003e20 <HCD_HC_OUT_IRQHandler+0x868>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003df6:	78fa      	ldrb	r2, [r7, #3]
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	4613      	mov	r3, r2
 8003dfc:	011b      	lsls	r3, r3, #4
 8003dfe:	1a9b      	subs	r3, r3, r2
 8003e00:	009b      	lsls	r3, r3, #2
 8003e02:	440b      	add	r3, r1
 8003e04:	334d      	adds	r3, #77	@ 0x4d
 8003e06:	2202      	movs	r2, #2
 8003e08:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003e0a:	78fa      	ldrb	r2, [r7, #3]
 8003e0c:	6879      	ldr	r1, [r7, #4]
 8003e0e:	4613      	mov	r3, r2
 8003e10:	011b      	lsls	r3, r3, #4
 8003e12:	1a9b      	subs	r3, r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	440b      	add	r3, r1
 8003e18:	334c      	adds	r3, #76	@ 0x4c
 8003e1a:	2205      	movs	r2, #5
 8003e1c:	701a      	strb	r2, [r3, #0]
 8003e1e:	e075      	b.n	8003f0c <HCD_HC_OUT_IRQHandler+0x954>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e20:	78fa      	ldrb	r2, [r7, #3]
 8003e22:	6879      	ldr	r1, [r7, #4]
 8003e24:	4613      	mov	r3, r2
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	1a9b      	subs	r3, r3, r2
 8003e2a:	009b      	lsls	r3, r3, #2
 8003e2c:	440b      	add	r3, r1
 8003e2e:	334d      	adds	r3, #77	@ 0x4d
 8003e30:	781b      	ldrb	r3, [r3, #0]
 8003e32:	2b07      	cmp	r3, #7
 8003e34:	d00a      	beq.n	8003e4c <HCD_HC_OUT_IRQHandler+0x894>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003e36:	78fa      	ldrb	r2, [r7, #3]
 8003e38:	6879      	ldr	r1, [r7, #4]
 8003e3a:	4613      	mov	r3, r2
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a9b      	subs	r3, r3, r2
 8003e40:	009b      	lsls	r3, r3, #2
 8003e42:	440b      	add	r3, r1
 8003e44:	334d      	adds	r3, #77	@ 0x4d
 8003e46:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003e48:	2b09      	cmp	r3, #9
 8003e4a:	d170      	bne.n	8003f2e <HCD_HC_OUT_IRQHandler+0x976>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003e4c:	78fa      	ldrb	r2, [r7, #3]
 8003e4e:	6879      	ldr	r1, [r7, #4]
 8003e50:	4613      	mov	r3, r2
 8003e52:	011b      	lsls	r3, r3, #4
 8003e54:	1a9b      	subs	r3, r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	440b      	add	r3, r1
 8003e5a:	334d      	adds	r3, #77	@ 0x4d
 8003e5c:	2202      	movs	r2, #2
 8003e5e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003e60:	78fa      	ldrb	r2, [r7, #3]
 8003e62:	6879      	ldr	r1, [r7, #4]
 8003e64:	4613      	mov	r3, r2
 8003e66:	011b      	lsls	r3, r3, #4
 8003e68:	1a9b      	subs	r3, r3, r2
 8003e6a:	009b      	lsls	r3, r3, #2
 8003e6c:	440b      	add	r3, r1
 8003e6e:	3344      	adds	r3, #68	@ 0x44
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	1c59      	adds	r1, r3, #1
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	4613      	mov	r3, r2
 8003e78:	011b      	lsls	r3, r3, #4
 8003e7a:	1a9b      	subs	r3, r3, r2
 8003e7c:	009b      	lsls	r3, r3, #2
 8003e7e:	4403      	add	r3, r0
 8003e80:	3344      	adds	r3, #68	@ 0x44
 8003e82:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003e84:	78fa      	ldrb	r2, [r7, #3]
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	4613      	mov	r3, r2
 8003e8a:	011b      	lsls	r3, r3, #4
 8003e8c:	1a9b      	subs	r3, r3, r2
 8003e8e:	009b      	lsls	r3, r3, #2
 8003e90:	440b      	add	r3, r1
 8003e92:	3344      	adds	r3, #68	@ 0x44
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d914      	bls.n	8003ec4 <HCD_HC_OUT_IRQHandler+0x90c>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003e9a:	78fa      	ldrb	r2, [r7, #3]
 8003e9c:	6879      	ldr	r1, [r7, #4]
 8003e9e:	4613      	mov	r3, r2
 8003ea0:	011b      	lsls	r3, r3, #4
 8003ea2:	1a9b      	subs	r3, r3, r2
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	440b      	add	r3, r1
 8003ea8:	3344      	adds	r3, #68	@ 0x44
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003eae:	78fa      	ldrb	r2, [r7, #3]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	1a9b      	subs	r3, r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	334c      	adds	r3, #76	@ 0x4c
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003ec2:	e022      	b.n	8003f0a <HCD_HC_OUT_IRQHandler+0x952>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003ec4:	78fa      	ldrb	r2, [r7, #3]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	334c      	adds	r3, #76	@ 0x4c
 8003ed4:	2202      	movs	r2, #2
 8003ed6:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ed8:	78fb      	ldrb	r3, [r7, #3]
 8003eda:	015a      	lsls	r2, r3, #5
 8003edc:	693b      	ldr	r3, [r7, #16]
 8003ede:	4413      	add	r3, r2
 8003ee0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003eee:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003ef6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003ef8:	78fb      	ldrb	r3, [r7, #3]
 8003efa:	015a      	lsls	r2, r3, #5
 8003efc:	693b      	ldr	r3, [r7, #16]
 8003efe:	4413      	add	r3, r2
 8003f00:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f04:	461a      	mov	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003f0a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003f0c:	78fa      	ldrb	r2, [r7, #3]
 8003f0e:	6879      	ldr	r1, [r7, #4]
 8003f10:	4613      	mov	r3, r2
 8003f12:	011b      	lsls	r3, r3, #4
 8003f14:	1a9b      	subs	r3, r3, r2
 8003f16:	009b      	lsls	r3, r3, #2
 8003f18:	440b      	add	r3, r1
 8003f1a:	334c      	adds	r3, #76	@ 0x4c
 8003f1c:	781a      	ldrb	r2, [r3, #0]
 8003f1e:	78fb      	ldrb	r3, [r7, #3]
 8003f20:	4619      	mov	r1, r3
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f006 f8e6 	bl	800a0f4 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003f28:	e002      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003f2a:	bf00      	nop
 8003f2c:	e000      	b.n	8003f30 <HCD_HC_OUT_IRQHandler+0x978>
      return;
 8003f2e:	bf00      	nop
  }
}
 8003f30:	3718      	adds	r7, #24
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f36:	b580      	push	{r7, lr}
 8003f38:	b08a      	sub	sp, #40	@ 0x28
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f46:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	6a1b      	ldr	r3, [r3, #32]
 8003f4e:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003f50:	69fb      	ldr	r3, [r7, #28]
 8003f52:	f003 030f 	and.w	r3, r3, #15
 8003f56:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003f58:	69fb      	ldr	r3, [r7, #28]
 8003f5a:	0c5b      	lsrs	r3, r3, #17
 8003f5c:	f003 030f 	and.w	r3, r3, #15
 8003f60:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003f62:	69fb      	ldr	r3, [r7, #28]
 8003f64:	091b      	lsrs	r3, r3, #4
 8003f66:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003f6a:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003f6c:	697b      	ldr	r3, [r7, #20]
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d004      	beq.n	8003f7c <HCD_RXQLVL_IRQHandler+0x46>
 8003f72:	697b      	ldr	r3, [r7, #20]
 8003f74:	2b05      	cmp	r3, #5
 8003f76:	f000 80b6 	beq.w	80040e6 <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003f7a:	e0b7      	b.n	80040ec <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	f000 80b3 	beq.w	80040ea <HCD_RXQLVL_IRQHandler+0x1b4>
 8003f84:	6879      	ldr	r1, [r7, #4]
 8003f86:	69ba      	ldr	r2, [r7, #24]
 8003f88:	4613      	mov	r3, r2
 8003f8a:	011b      	lsls	r3, r3, #4
 8003f8c:	1a9b      	subs	r3, r3, r2
 8003f8e:	009b      	lsls	r3, r3, #2
 8003f90:	440b      	add	r3, r1
 8003f92:	332c      	adds	r3, #44	@ 0x2c
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	f000 80a7 	beq.w	80040ea <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003f9c:	6879      	ldr	r1, [r7, #4]
 8003f9e:	69ba      	ldr	r2, [r7, #24]
 8003fa0:	4613      	mov	r3, r2
 8003fa2:	011b      	lsls	r3, r3, #4
 8003fa4:	1a9b      	subs	r3, r3, r2
 8003fa6:	009b      	lsls	r3, r3, #2
 8003fa8:	440b      	add	r3, r1
 8003faa:	3338      	adds	r3, #56	@ 0x38
 8003fac:	681a      	ldr	r2, [r3, #0]
 8003fae:	693b      	ldr	r3, [r7, #16]
 8003fb0:	18d1      	adds	r1, r2, r3
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	69ba      	ldr	r2, [r7, #24]
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	011b      	lsls	r3, r3, #4
 8003fba:	1a9b      	subs	r3, r3, r2
 8003fbc:	009b      	lsls	r3, r3, #2
 8003fbe:	4403      	add	r3, r0
 8003fc0:	3334      	adds	r3, #52	@ 0x34
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	4299      	cmp	r1, r3
 8003fc6:	f200 8083 	bhi.w	80040d0 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6818      	ldr	r0, [r3, #0]
 8003fce:	6879      	ldr	r1, [r7, #4]
 8003fd0:	69ba      	ldr	r2, [r7, #24]
 8003fd2:	4613      	mov	r3, r2
 8003fd4:	011b      	lsls	r3, r3, #4
 8003fd6:	1a9b      	subs	r3, r3, r2
 8003fd8:	009b      	lsls	r3, r3, #2
 8003fda:	440b      	add	r3, r1
 8003fdc:	332c      	adds	r3, #44	@ 0x2c
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	693a      	ldr	r2, [r7, #16]
 8003fe2:	b292      	uxth	r2, r2
 8003fe4:	4619      	mov	r1, r3
 8003fe6:	f002 ff1d 	bl	8006e24 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003fea:	6879      	ldr	r1, [r7, #4]
 8003fec:	69ba      	ldr	r2, [r7, #24]
 8003fee:	4613      	mov	r3, r2
 8003ff0:	011b      	lsls	r3, r3, #4
 8003ff2:	1a9b      	subs	r3, r3, r2
 8003ff4:	009b      	lsls	r3, r3, #2
 8003ff6:	440b      	add	r3, r1
 8003ff8:	332c      	adds	r3, #44	@ 0x2c
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	18d1      	adds	r1, r2, r3
 8004000:	6878      	ldr	r0, [r7, #4]
 8004002:	69ba      	ldr	r2, [r7, #24]
 8004004:	4613      	mov	r3, r2
 8004006:	011b      	lsls	r3, r3, #4
 8004008:	1a9b      	subs	r3, r3, r2
 800400a:	009b      	lsls	r3, r3, #2
 800400c:	4403      	add	r3, r0
 800400e:	332c      	adds	r3, #44	@ 0x2c
 8004010:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8004012:	6879      	ldr	r1, [r7, #4]
 8004014:	69ba      	ldr	r2, [r7, #24]
 8004016:	4613      	mov	r3, r2
 8004018:	011b      	lsls	r3, r3, #4
 800401a:	1a9b      	subs	r3, r3, r2
 800401c:	009b      	lsls	r3, r3, #2
 800401e:	440b      	add	r3, r1
 8004020:	3338      	adds	r3, #56	@ 0x38
 8004022:	681a      	ldr	r2, [r3, #0]
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	18d1      	adds	r1, r2, r3
 8004028:	6878      	ldr	r0, [r7, #4]
 800402a:	69ba      	ldr	r2, [r7, #24]
 800402c:	4613      	mov	r3, r2
 800402e:	011b      	lsls	r3, r3, #4
 8004030:	1a9b      	subs	r3, r3, r2
 8004032:	009b      	lsls	r3, r3, #2
 8004034:	4403      	add	r3, r0
 8004036:	3338      	adds	r3, #56	@ 0x38
 8004038:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800403a:	69bb      	ldr	r3, [r7, #24]
 800403c:	015a      	lsls	r2, r3, #5
 800403e:	6a3b      	ldr	r3, [r7, #32]
 8004040:	4413      	add	r3, r2
 8004042:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8004046:	691b      	ldr	r3, [r3, #16]
 8004048:	0cdb      	lsrs	r3, r3, #19
 800404a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800404e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8004050:	6879      	ldr	r1, [r7, #4]
 8004052:	69ba      	ldr	r2, [r7, #24]
 8004054:	4613      	mov	r3, r2
 8004056:	011b      	lsls	r3, r3, #4
 8004058:	1a9b      	subs	r3, r3, r2
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	440b      	add	r3, r1
 800405e:	3328      	adds	r3, #40	@ 0x28
 8004060:	881b      	ldrh	r3, [r3, #0]
 8004062:	461a      	mov	r2, r3
 8004064:	693b      	ldr	r3, [r7, #16]
 8004066:	4293      	cmp	r3, r2
 8004068:	d13f      	bne.n	80040ea <HCD_RXQLVL_IRQHandler+0x1b4>
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2b00      	cmp	r3, #0
 800406e:	d03c      	beq.n	80040ea <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8004070:	69bb      	ldr	r3, [r7, #24]
 8004072:	015a      	lsls	r2, r3, #5
 8004074:	6a3b      	ldr	r3, [r7, #32]
 8004076:	4413      	add	r3, r2
 8004078:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8004086:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8004088:	68bb      	ldr	r3, [r7, #8]
 800408a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800408e:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8004090:	69bb      	ldr	r3, [r7, #24]
 8004092:	015a      	lsls	r2, r3, #5
 8004094:	6a3b      	ldr	r3, [r7, #32]
 8004096:	4413      	add	r3, r2
 8004098:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800409c:	461a      	mov	r2, r3
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 80040a2:	6879      	ldr	r1, [r7, #4]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	4613      	mov	r3, r2
 80040a8:	011b      	lsls	r3, r3, #4
 80040aa:	1a9b      	subs	r3, r3, r2
 80040ac:	009b      	lsls	r3, r3, #2
 80040ae:	440b      	add	r3, r1
 80040b0:	333c      	adds	r3, #60	@ 0x3c
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	f083 0301 	eor.w	r3, r3, #1
 80040b8:	b2d8      	uxtb	r0, r3
 80040ba:	6879      	ldr	r1, [r7, #4]
 80040bc:	69ba      	ldr	r2, [r7, #24]
 80040be:	4613      	mov	r3, r2
 80040c0:	011b      	lsls	r3, r3, #4
 80040c2:	1a9b      	subs	r3, r3, r2
 80040c4:	009b      	lsls	r3, r3, #2
 80040c6:	440b      	add	r3, r1
 80040c8:	333c      	adds	r3, #60	@ 0x3c
 80040ca:	4602      	mov	r2, r0
 80040cc:	701a      	strb	r2, [r3, #0]
      break;
 80040ce:	e00c      	b.n	80040ea <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 80040d0:	6879      	ldr	r1, [r7, #4]
 80040d2:	69ba      	ldr	r2, [r7, #24]
 80040d4:	4613      	mov	r3, r2
 80040d6:	011b      	lsls	r3, r3, #4
 80040d8:	1a9b      	subs	r3, r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	440b      	add	r3, r1
 80040de:	334c      	adds	r3, #76	@ 0x4c
 80040e0:	2204      	movs	r2, #4
 80040e2:	701a      	strb	r2, [r3, #0]
      break;
 80040e4:	e001      	b.n	80040ea <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 80040e6:	bf00      	nop
 80040e8:	e000      	b.n	80040ec <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 80040ea:	bf00      	nop
  }
}
 80040ec:	bf00      	nop
 80040ee:	3728      	adds	r7, #40	@ 0x28
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b086      	sub	sp, #24
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8004110:	693b      	ldr	r3, [r7, #16]
 8004112:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8004120:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b02      	cmp	r3, #2
 800412a:	d10b      	bne.n	8004144 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	f003 0301 	and.w	r3, r3, #1
 8004132:	2b01      	cmp	r3, #1
 8004134:	d102      	bne.n	800413c <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f005 ffc0 	bl	800a0bc <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 800413c:	68bb      	ldr	r3, [r7, #8]
 800413e:	f043 0302 	orr.w	r3, r3, #2
 8004142:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f003 0308 	and.w	r3, r3, #8
 800414a:	2b08      	cmp	r3, #8
 800414c:	d132      	bne.n	80041b4 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	f043 0308 	orr.w	r3, r3, #8
 8004154:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b04      	cmp	r3, #4
 800415e:	d126      	bne.n	80041ae <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	7a5b      	ldrb	r3, [r3, #9]
 8004164:	2b02      	cmp	r3, #2
 8004166:	d113      	bne.n	8004190 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 800416e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004172:	d106      	bne.n	8004182 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2102      	movs	r1, #2
 800417a:	4618      	mov	r0, r3
 800417c:	f002 ffe2 	bl	8007144 <USB_InitFSLSPClkSel>
 8004180:	e011      	b.n	80041a6 <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	2101      	movs	r1, #1
 8004188:	4618      	mov	r0, r3
 800418a:	f002 ffdb 	bl	8007144 <USB_InitFSLSPClkSel>
 800418e:	e00a      	b.n	80041a6 <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	79db      	ldrb	r3, [r3, #7]
 8004194:	2b01      	cmp	r3, #1
 8004196:	d106      	bne.n	80041a6 <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800419e:	461a      	mov	r2, r3
 80041a0:	f64e 2360 	movw	r3, #60000	@ 0xea60
 80041a4:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 80041a6:	6878      	ldr	r0, [r7, #4]
 80041a8:	f005 ffb2 	bl	800a110 <HAL_HCD_PortEnabled_Callback>
 80041ac:	e002      	b.n	80041b4 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f005 ffbc 	bl	800a12c <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 0320 	and.w	r3, r3, #32
 80041ba:	2b20      	cmp	r3, #32
 80041bc:	d103      	bne.n	80041c6 <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	f043 0320 	orr.w	r3, r3, #32
 80041c4:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80041cc:	461a      	mov	r2, r3
 80041ce:	68bb      	ldr	r3, [r7, #8]
 80041d0:	6013      	str	r3, [r2, #0]
}
 80041d2:	bf00      	nop
 80041d4:	3718      	adds	r7, #24
 80041d6:	46bd      	mov	sp, r7
 80041d8:	bd80      	pop	{r7, pc}
	...

080041dc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80041dc:	b580      	push	{r7, lr}
 80041de:	b084      	sub	sp, #16
 80041e0:	af00      	add	r7, sp, #0
 80041e2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d101      	bne.n	80041ee <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e12b      	b.n	8004446 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d106      	bne.n	8004208 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	2200      	movs	r2, #0
 80041fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7fc fd70 	bl	8000ce8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2224      	movs	r2, #36	@ 0x24
 800420c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f022 0201 	bic.w	r2, r2, #1
 800421e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	681a      	ldr	r2, [r3, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800422e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	681a      	ldr	r2, [r3, #0]
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800423e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004240:	f001 fa20 	bl	8005684 <HAL_RCC_GetPCLK1Freq>
 8004244:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	4a81      	ldr	r2, [pc, #516]	@ (8004450 <HAL_I2C_Init+0x274>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d807      	bhi.n	8004260 <HAL_I2C_Init+0x84>
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4a80      	ldr	r2, [pc, #512]	@ (8004454 <HAL_I2C_Init+0x278>)
 8004254:	4293      	cmp	r3, r2
 8004256:	bf94      	ite	ls
 8004258:	2301      	movls	r3, #1
 800425a:	2300      	movhi	r3, #0
 800425c:	b2db      	uxtb	r3, r3
 800425e:	e006      	b.n	800426e <HAL_I2C_Init+0x92>
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	4a7d      	ldr	r2, [pc, #500]	@ (8004458 <HAL_I2C_Init+0x27c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	bf94      	ite	ls
 8004268:	2301      	movls	r3, #1
 800426a:	2300      	movhi	r3, #0
 800426c:	b2db      	uxtb	r3, r3
 800426e:	2b00      	cmp	r3, #0
 8004270:	d001      	beq.n	8004276 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004272:	2301      	movs	r3, #1
 8004274:	e0e7      	b.n	8004446 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	4a78      	ldr	r2, [pc, #480]	@ (800445c <HAL_I2C_Init+0x280>)
 800427a:	fba2 2303 	umull	r2, r3, r2, r3
 800427e:	0c9b      	lsrs	r3, r3, #18
 8004280:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	685b      	ldr	r3, [r3, #4]
 8004288:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	68ba      	ldr	r2, [r7, #8]
 8004292:	430a      	orrs	r2, r1
 8004294:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	685b      	ldr	r3, [r3, #4]
 80042a4:	4a6a      	ldr	r2, [pc, #424]	@ (8004450 <HAL_I2C_Init+0x274>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d802      	bhi.n	80042b0 <HAL_I2C_Init+0xd4>
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	3301      	adds	r3, #1
 80042ae:	e009      	b.n	80042c4 <HAL_I2C_Init+0xe8>
 80042b0:	68bb      	ldr	r3, [r7, #8]
 80042b2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80042b6:	fb02 f303 	mul.w	r3, r2, r3
 80042ba:	4a69      	ldr	r2, [pc, #420]	@ (8004460 <HAL_I2C_Init+0x284>)
 80042bc:	fba2 2303 	umull	r2, r3, r2, r3
 80042c0:	099b      	lsrs	r3, r3, #6
 80042c2:	3301      	adds	r3, #1
 80042c4:	687a      	ldr	r2, [r7, #4]
 80042c6:	6812      	ldr	r2, [r2, #0]
 80042c8:	430b      	orrs	r3, r1
 80042ca:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	69db      	ldr	r3, [r3, #28]
 80042d2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80042d6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	495c      	ldr	r1, [pc, #368]	@ (8004450 <HAL_I2C_Init+0x274>)
 80042e0:	428b      	cmp	r3, r1
 80042e2:	d819      	bhi.n	8004318 <HAL_I2C_Init+0x13c>
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	1e59      	subs	r1, r3, #1
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	685b      	ldr	r3, [r3, #4]
 80042ec:	005b      	lsls	r3, r3, #1
 80042ee:	fbb1 f3f3 	udiv	r3, r1, r3
 80042f2:	1c59      	adds	r1, r3, #1
 80042f4:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80042f8:	400b      	ands	r3, r1
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00a      	beq.n	8004314 <HAL_I2C_Init+0x138>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	1e59      	subs	r1, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	685b      	ldr	r3, [r3, #4]
 8004306:	005b      	lsls	r3, r3, #1
 8004308:	fbb1 f3f3 	udiv	r3, r1, r3
 800430c:	3301      	adds	r3, #1
 800430e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004312:	e051      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004314:	2304      	movs	r3, #4
 8004316:	e04f      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	689b      	ldr	r3, [r3, #8]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d111      	bne.n	8004344 <HAL_I2C_Init+0x168>
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	1e58      	subs	r0, r3, #1
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	460b      	mov	r3, r1
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	440b      	add	r3, r1
 800432e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004332:	3301      	adds	r3, #1
 8004334:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004338:	2b00      	cmp	r3, #0
 800433a:	bf0c      	ite	eq
 800433c:	2301      	moveq	r3, #1
 800433e:	2300      	movne	r3, #0
 8004340:	b2db      	uxtb	r3, r3
 8004342:	e012      	b.n	800436a <HAL_I2C_Init+0x18e>
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	1e58      	subs	r0, r3, #1
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6859      	ldr	r1, [r3, #4]
 800434c:	460b      	mov	r3, r1
 800434e:	009b      	lsls	r3, r3, #2
 8004350:	440b      	add	r3, r1
 8004352:	0099      	lsls	r1, r3, #2
 8004354:	440b      	add	r3, r1
 8004356:	fbb0 f3f3 	udiv	r3, r0, r3
 800435a:	3301      	adds	r3, #1
 800435c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004360:	2b00      	cmp	r3, #0
 8004362:	bf0c      	ite	eq
 8004364:	2301      	moveq	r3, #1
 8004366:	2300      	movne	r3, #0
 8004368:	b2db      	uxtb	r3, r3
 800436a:	2b00      	cmp	r3, #0
 800436c:	d001      	beq.n	8004372 <HAL_I2C_Init+0x196>
 800436e:	2301      	movs	r3, #1
 8004370:	e022      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10e      	bne.n	8004398 <HAL_I2C_Init+0x1bc>
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	1e58      	subs	r0, r3, #1
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6859      	ldr	r1, [r3, #4]
 8004382:	460b      	mov	r3, r1
 8004384:	005b      	lsls	r3, r3, #1
 8004386:	440b      	add	r3, r1
 8004388:	fbb0 f3f3 	udiv	r3, r0, r3
 800438c:	3301      	adds	r3, #1
 800438e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004392:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004396:	e00f      	b.n	80043b8 <HAL_I2C_Init+0x1dc>
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	1e58      	subs	r0, r3, #1
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6859      	ldr	r1, [r3, #4]
 80043a0:	460b      	mov	r3, r1
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	440b      	add	r3, r1
 80043a6:	0099      	lsls	r1, r3, #2
 80043a8:	440b      	add	r3, r1
 80043aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80043ae:	3301      	adds	r3, #1
 80043b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80043b4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80043b8:	6879      	ldr	r1, [r7, #4]
 80043ba:	6809      	ldr	r1, [r1, #0]
 80043bc:	4313      	orrs	r3, r2
 80043be:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	69da      	ldr	r2, [r3, #28]
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	431a      	orrs	r2, r3
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	430a      	orrs	r2, r1
 80043da:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80043e6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80043ea:	687a      	ldr	r2, [r7, #4]
 80043ec:	6911      	ldr	r1, [r2, #16]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	68d2      	ldr	r2, [r2, #12]
 80043f2:	4311      	orrs	r1, r2
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	6812      	ldr	r2, [r2, #0]
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	695a      	ldr	r2, [r3, #20]
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	699b      	ldr	r3, [r3, #24]
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	430a      	orrs	r2, r1
 8004416:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f042 0201 	orr.w	r2, r2, #1
 8004426:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	2200      	movs	r2, #0
 800442c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2220      	movs	r2, #32
 8004432:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
 800444e:	bf00      	nop
 8004450:	000186a0 	.word	0x000186a0
 8004454:	001e847f 	.word	0x001e847f
 8004458:	003d08ff 	.word	0x003d08ff
 800445c:	431bde83 	.word	0x431bde83
 8004460:	10624dd3 	.word	0x10624dd3

08004464 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b088      	sub	sp, #32
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d101      	bne.n	8004476 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e128      	b.n	80046c8 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800447c:	b2db      	uxtb	r3, r3
 800447e:	2b00      	cmp	r3, #0
 8004480:	d109      	bne.n	8004496 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a90      	ldr	r2, [pc, #576]	@ (80046d0 <HAL_I2S_Init+0x26c>)
 800448e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7fc fc71 	bl	8000d78 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2202      	movs	r2, #2
 800449a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	69db      	ldr	r3, [r3, #28]
 80044a4:	687a      	ldr	r2, [r7, #4]
 80044a6:	6812      	ldr	r2, [r2, #0]
 80044a8:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80044ac:	f023 030f 	bic.w	r3, r3, #15
 80044b0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	2202      	movs	r2, #2
 80044b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	695b      	ldr	r3, [r3, #20]
 80044be:	2b02      	cmp	r3, #2
 80044c0:	d060      	beq.n	8004584 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	68db      	ldr	r3, [r3, #12]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d102      	bne.n	80044d0 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80044ca:	2310      	movs	r3, #16
 80044cc:	617b      	str	r3, [r7, #20]
 80044ce:	e001      	b.n	80044d4 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80044d0:	2320      	movs	r3, #32
 80044d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	689b      	ldr	r3, [r3, #8]
 80044d8:	2b20      	cmp	r3, #32
 80044da:	d802      	bhi.n	80044e2 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80044dc:	697b      	ldr	r3, [r7, #20]
 80044de:	005b      	lsls	r3, r3, #1
 80044e0:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80044e2:	2001      	movs	r0, #1
 80044e4:	f001 f9c4 	bl	8005870 <HAL_RCCEx_GetPeriphCLKFreq>
 80044e8:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	691b      	ldr	r3, [r3, #16]
 80044ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044f2:	d125      	bne.n	8004540 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	68db      	ldr	r3, [r3, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d010      	beq.n	800451e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80044fc:	697b      	ldr	r3, [r7, #20]
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	68fa      	ldr	r2, [r7, #12]
 8004502:	fbb2 f2f3 	udiv	r2, r2, r3
 8004506:	4613      	mov	r3, r2
 8004508:	009b      	lsls	r3, r3, #2
 800450a:	4413      	add	r3, r2
 800450c:	005b      	lsls	r3, r3, #1
 800450e:	461a      	mov	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	695b      	ldr	r3, [r3, #20]
 8004514:	fbb2 f3f3 	udiv	r3, r2, r3
 8004518:	3305      	adds	r3, #5
 800451a:	613b      	str	r3, [r7, #16]
 800451c:	e01f      	b.n	800455e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	00db      	lsls	r3, r3, #3
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	fbb2 f2f3 	udiv	r2, r2, r3
 8004528:	4613      	mov	r3, r2
 800452a:	009b      	lsls	r3, r3, #2
 800452c:	4413      	add	r3, r2
 800452e:	005b      	lsls	r3, r3, #1
 8004530:	461a      	mov	r2, r3
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	695b      	ldr	r3, [r3, #20]
 8004536:	fbb2 f3f3 	udiv	r3, r2, r3
 800453a:	3305      	adds	r3, #5
 800453c:	613b      	str	r3, [r7, #16]
 800453e:	e00e      	b.n	800455e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8004540:	68fa      	ldr	r2, [r7, #12]
 8004542:	697b      	ldr	r3, [r7, #20]
 8004544:	fbb2 f2f3 	udiv	r2, r2, r3
 8004548:	4613      	mov	r3, r2
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	461a      	mov	r2, r3
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	695b      	ldr	r3, [r3, #20]
 8004556:	fbb2 f3f3 	udiv	r3, r2, r3
 800455a:	3305      	adds	r3, #5
 800455c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	4a5c      	ldr	r2, [pc, #368]	@ (80046d4 <HAL_I2S_Init+0x270>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	08db      	lsrs	r3, r3, #3
 8004568:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	f003 0301 	and.w	r3, r3, #1
 8004570:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	69bb      	ldr	r3, [r7, #24]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	085b      	lsrs	r3, r3, #1
 800457a:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800457c:	69bb      	ldr	r3, [r7, #24]
 800457e:	021b      	lsls	r3, r3, #8
 8004580:	61bb      	str	r3, [r7, #24]
 8004582:	e003      	b.n	800458c <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004584:	2302      	movs	r3, #2
 8004586:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004588:	2300      	movs	r3, #0
 800458a:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800458c:	69fb      	ldr	r3, [r7, #28]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d902      	bls.n	8004598 <HAL_I2S_Init+0x134>
 8004592:	69fb      	ldr	r3, [r7, #28]
 8004594:	2bff      	cmp	r3, #255	@ 0xff
 8004596:	d907      	bls.n	80045a8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800459c:	f043 0210 	orr.w	r2, r3, #16
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e08f      	b.n	80046c8 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	69bb      	ldr	r3, [r7, #24]
 80045ae:	ea42 0103 	orr.w	r1, r2, r3
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	69fa      	ldr	r2, [r7, #28]
 80045b8:	430a      	orrs	r2, r1
 80045ba:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	69db      	ldr	r3, [r3, #28]
 80045c2:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80045c6:	f023 030f 	bic.w	r3, r3, #15
 80045ca:	687a      	ldr	r2, [r7, #4]
 80045cc:	6851      	ldr	r1, [r2, #4]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	6892      	ldr	r2, [r2, #8]
 80045d2:	4311      	orrs	r1, r2
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68d2      	ldr	r2, [r2, #12]
 80045d8:	4311      	orrs	r1, r2
 80045da:	687a      	ldr	r2, [r7, #4]
 80045dc:	6992      	ldr	r2, [r2, #24]
 80045de:	430a      	orrs	r2, r1
 80045e0:	431a      	orrs	r2, r3
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80045ea:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	2b01      	cmp	r3, #1
 80045f2:	d161      	bne.n	80046b8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	4a38      	ldr	r2, [pc, #224]	@ (80046d8 <HAL_I2S_Init+0x274>)
 80045f8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	4a37      	ldr	r2, [pc, #220]	@ (80046dc <HAL_I2S_Init+0x278>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d101      	bne.n	8004608 <HAL_I2S_Init+0x1a4>
 8004604:	4b36      	ldr	r3, [pc, #216]	@ (80046e0 <HAL_I2S_Init+0x27c>)
 8004606:	e001      	b.n	800460c <HAL_I2S_Init+0x1a8>
 8004608:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800460c:	69db      	ldr	r3, [r3, #28]
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6812      	ldr	r2, [r2, #0]
 8004612:	4932      	ldr	r1, [pc, #200]	@ (80046dc <HAL_I2S_Init+0x278>)
 8004614:	428a      	cmp	r2, r1
 8004616:	d101      	bne.n	800461c <HAL_I2S_Init+0x1b8>
 8004618:	4a31      	ldr	r2, [pc, #196]	@ (80046e0 <HAL_I2S_Init+0x27c>)
 800461a:	e001      	b.n	8004620 <HAL_I2S_Init+0x1bc>
 800461c:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 8004620:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004624:	f023 030f 	bic.w	r3, r3, #15
 8004628:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	4a2b      	ldr	r2, [pc, #172]	@ (80046dc <HAL_I2S_Init+0x278>)
 8004630:	4293      	cmp	r3, r2
 8004632:	d101      	bne.n	8004638 <HAL_I2S_Init+0x1d4>
 8004634:	4b2a      	ldr	r3, [pc, #168]	@ (80046e0 <HAL_I2S_Init+0x27c>)
 8004636:	e001      	b.n	800463c <HAL_I2S_Init+0x1d8>
 8004638:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800463c:	2202      	movs	r2, #2
 800463e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	4a25      	ldr	r2, [pc, #148]	@ (80046dc <HAL_I2S_Init+0x278>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d101      	bne.n	800464e <HAL_I2S_Init+0x1ea>
 800464a:	4b25      	ldr	r3, [pc, #148]	@ (80046e0 <HAL_I2S_Init+0x27c>)
 800464c:	e001      	b.n	8004652 <HAL_I2S_Init+0x1ee>
 800464e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004652:	69db      	ldr	r3, [r3, #28]
 8004654:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	685b      	ldr	r3, [r3, #4]
 800465a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800465e:	d003      	beq.n	8004668 <HAL_I2S_Init+0x204>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d103      	bne.n	8004670 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004668:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800466c:	613b      	str	r3, [r7, #16]
 800466e:	e001      	b.n	8004674 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8004670:	2300      	movs	r3, #0
 8004672:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800467e:	4313      	orrs	r3, r2
 8004680:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004688:	4313      	orrs	r3, r2
 800468a:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	699b      	ldr	r3, [r3, #24]
 8004690:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004692:	4313      	orrs	r3, r2
 8004694:	b29a      	uxth	r2, r3
 8004696:	897b      	ldrh	r3, [r7, #10]
 8004698:	4313      	orrs	r3, r2
 800469a:	b29b      	uxth	r3, r3
 800469c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80046a0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a0d      	ldr	r2, [pc, #52]	@ (80046dc <HAL_I2S_Init+0x278>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d101      	bne.n	80046b0 <HAL_I2S_Init+0x24c>
 80046ac:	4b0c      	ldr	r3, [pc, #48]	@ (80046e0 <HAL_I2S_Init+0x27c>)
 80046ae:	e001      	b.n	80046b4 <HAL_I2S_Init+0x250>
 80046b0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046b4:	897a      	ldrh	r2, [r7, #10]
 80046b6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	2200      	movs	r2, #0
 80046bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	2201      	movs	r2, #1
 80046c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80046c6:	2300      	movs	r3, #0
}
 80046c8:	4618      	mov	r0, r3
 80046ca:	3720      	adds	r7, #32
 80046cc:	46bd      	mov	sp, r7
 80046ce:	bd80      	pop	{r7, pc}
 80046d0:	080047db 	.word	0x080047db
 80046d4:	cccccccd 	.word	0xcccccccd
 80046d8:	080048f1 	.word	0x080048f1
 80046dc:	40003800 	.word	0x40003800
 80046e0:	40003400 	.word	0x40003400

080046e4 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046e4:	b480      	push	{r7}
 80046e6:	b083      	sub	sp, #12
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80046ec:	bf00      	nop
 80046ee:	370c      	adds	r7, #12
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b083      	sub	sp, #12
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8004700:	bf00      	nop
 8004702:	370c      	adds	r7, #12
 8004704:	46bd      	mov	sp, r7
 8004706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470a:	4770      	bx	lr

0800470c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 800470c:	b480      	push	{r7}
 800470e:	b083      	sub	sp, #12
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004714:	bf00      	nop
 8004716:	370c      	adds	r7, #12
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8004720:	b580      	push	{r7, lr}
 8004722:	b082      	sub	sp, #8
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800472c:	881a      	ldrh	r2, [r3, #0]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004738:	1c9a      	adds	r2, r3, #2
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004750:	b29b      	uxth	r3, r3
 8004752:	2b00      	cmp	r3, #0
 8004754:	d10e      	bne.n	8004774 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	685a      	ldr	r2, [r3, #4]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004764:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2201      	movs	r2, #1
 800476a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff ffb8 	bl	80046e4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004774:	bf00      	nop
 8004776:	3708      	adds	r7, #8
 8004778:	46bd      	mov	sp, r7
 800477a:	bd80      	pop	{r7, pc}

0800477c <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	68da      	ldr	r2, [r3, #12]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800478e:	b292      	uxth	r2, r2
 8004790:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004796:	1c9a      	adds	r2, r3, #2
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047a0:	b29b      	uxth	r3, r3
 80047a2:	3b01      	subs	r3, #1
 80047a4:	b29a      	uxth	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047ae:	b29b      	uxth	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10e      	bne.n	80047d2 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685a      	ldr	r2, [r3, #4]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80047c2:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2201      	movs	r2, #1
 80047c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80047cc:	6878      	ldr	r0, [r7, #4]
 80047ce:	f7ff ff93 	bl	80046f8 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80047d2:	bf00      	nop
 80047d4:	3708      	adds	r7, #8
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}

080047da <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80047da:	b580      	push	{r7, lr}
 80047dc:	b086      	sub	sp, #24
 80047de:	af00      	add	r7, sp, #0
 80047e0:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80047f0:	b2db      	uxtb	r3, r3
 80047f2:	2b04      	cmp	r3, #4
 80047f4:	d13a      	bne.n	800486c <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d109      	bne.n	8004814 <I2S_IRQHandler+0x3a>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800480a:	2b40      	cmp	r3, #64	@ 0x40
 800480c:	d102      	bne.n	8004814 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f7ff ffb4 	bl	800477c <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004814:	697b      	ldr	r3, [r7, #20]
 8004816:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800481a:	2b40      	cmp	r3, #64	@ 0x40
 800481c:	d126      	bne.n	800486c <I2S_IRQHandler+0x92>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	685b      	ldr	r3, [r3, #4]
 8004824:	f003 0320 	and.w	r3, r3, #32
 8004828:	2b20      	cmp	r3, #32
 800482a:	d11f      	bne.n	800486c <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	685a      	ldr	r2, [r3, #4]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800483a:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800483c:	2300      	movs	r3, #0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68db      	ldr	r3, [r3, #12]
 8004846:	613b      	str	r3, [r7, #16]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	689b      	ldr	r3, [r3, #8]
 800484e:	613b      	str	r3, [r7, #16]
 8004850:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2201      	movs	r2, #1
 8004856:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485e:	f043 0202 	orr.w	r2, r3, #2
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004866:	6878      	ldr	r0, [r7, #4]
 8004868:	f7ff ff50 	bl	800470c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b03      	cmp	r3, #3
 8004876:	d136      	bne.n	80048e6 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004878:	697b      	ldr	r3, [r7, #20]
 800487a:	f003 0302 	and.w	r3, r3, #2
 800487e:	2b02      	cmp	r3, #2
 8004880:	d109      	bne.n	8004896 <I2S_IRQHandler+0xbc>
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	685b      	ldr	r3, [r3, #4]
 8004888:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800488c:	2b80      	cmp	r3, #128	@ 0x80
 800488e:	d102      	bne.n	8004896 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8004890:	6878      	ldr	r0, [r7, #4]
 8004892:	f7ff ff45 	bl	8004720 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004896:	697b      	ldr	r3, [r7, #20]
 8004898:	f003 0308 	and.w	r3, r3, #8
 800489c:	2b08      	cmp	r3, #8
 800489e:	d122      	bne.n	80048e6 <I2S_IRQHandler+0x10c>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	f003 0320 	and.w	r3, r3, #32
 80048aa:	2b20      	cmp	r3, #32
 80048ac:	d11b      	bne.n	80048e6 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	685a      	ldr	r2, [r3, #4]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80048bc:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80048be:	2300      	movs	r3, #0
 80048c0:	60fb      	str	r3, [r7, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	689b      	ldr	r3, [r3, #8]
 80048c8:	60fb      	str	r3, [r7, #12]
 80048ca:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	2201      	movs	r2, #1
 80048d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048d8:	f043 0204 	orr.w	r2, r3, #4
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80048e0:	6878      	ldr	r0, [r7, #4]
 80048e2:	f7ff ff13 	bl	800470c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048e6:	bf00      	nop
 80048e8:	3718      	adds	r7, #24
 80048ea:	46bd      	mov	sp, r7
 80048ec:	bd80      	pop	{r7, pc}
	...

080048f0 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b088      	sub	sp, #32
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a92      	ldr	r2, [pc, #584]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 800490a:	4b92      	ldr	r3, [pc, #584]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800490c:	e001      	b.n	8004912 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 800490e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004912:	689b      	ldr	r3, [r3, #8]
 8004914:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	685b      	ldr	r3, [r3, #4]
 800491c:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4a8b      	ldr	r2, [pc, #556]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004924:	4293      	cmp	r3, r2
 8004926:	d101      	bne.n	800492c <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004928:	4b8a      	ldr	r3, [pc, #552]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800492a:	e001      	b.n	8004930 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 800492c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800493c:	d004      	beq.n	8004948 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	685b      	ldr	r3, [r3, #4]
 8004942:	2b00      	cmp	r3, #0
 8004944:	f040 8099 	bne.w	8004a7a <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004948:	69fb      	ldr	r3, [r7, #28]
 800494a:	f003 0302 	and.w	r3, r3, #2
 800494e:	2b02      	cmp	r3, #2
 8004950:	d107      	bne.n	8004962 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8004952:	697b      	ldr	r3, [r7, #20]
 8004954:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004958:	2b00      	cmp	r3, #0
 800495a:	d002      	beq.n	8004962 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f925 	bl	8004bac <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8004962:	69bb      	ldr	r3, [r7, #24]
 8004964:	f003 0301 	and.w	r3, r3, #1
 8004968:	2b01      	cmp	r3, #1
 800496a:	d107      	bne.n	800497c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 800496c:	693b      	ldr	r3, [r7, #16]
 800496e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004972:	2b00      	cmp	r3, #0
 8004974:	d002      	beq.n	800497c <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004976:	6878      	ldr	r0, [r7, #4]
 8004978:	f000 f9c8 	bl	8004d0c <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800497c:	69bb      	ldr	r3, [r7, #24]
 800497e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004982:	2b40      	cmp	r3, #64	@ 0x40
 8004984:	d13a      	bne.n	80049fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d035      	beq.n	80049fc <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	4a6e      	ldr	r2, [pc, #440]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d101      	bne.n	800499e <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 800499a:	4b6e      	ldr	r3, [pc, #440]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800499c:	e001      	b.n	80049a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800499e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049a2:	685a      	ldr	r2, [r3, #4]
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	4969      	ldr	r1, [pc, #420]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80049aa:	428b      	cmp	r3, r1
 80049ac:	d101      	bne.n	80049b2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 80049ae:	4b69      	ldr	r3, [pc, #420]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80049b0:	e001      	b.n	80049b6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 80049b2:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80049b6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80049ba:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	685a      	ldr	r2, [r3, #4]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80049ca:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80049cc:	2300      	movs	r3, #0
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68db      	ldr	r3, [r3, #12]
 80049d6:	60fb      	str	r3, [r7, #12]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	689b      	ldr	r3, [r3, #8]
 80049de:	60fb      	str	r3, [r7, #12]
 80049e0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2201      	movs	r2, #1
 80049e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80049ee:	f043 0202 	orr.w	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80049f6:	6878      	ldr	r0, [r7, #4]
 80049f8:	f7ff fe88 	bl	800470c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80049fc:	69fb      	ldr	r3, [r7, #28]
 80049fe:	f003 0308 	and.w	r3, r3, #8
 8004a02:	2b08      	cmp	r3, #8
 8004a04:	f040 80c3 	bne.w	8004b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 8004a08:	697b      	ldr	r3, [r7, #20]
 8004a0a:	f003 0320 	and.w	r3, r3, #32
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	f000 80bd 	beq.w	8004b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	685a      	ldr	r2, [r3, #4]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004a22:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	4a49      	ldr	r2, [pc, #292]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a2a:	4293      	cmp	r3, r2
 8004a2c:	d101      	bne.n	8004a32 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8004a2e:	4b49      	ldr	r3, [pc, #292]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a30:	e001      	b.n	8004a36 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8004a32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a36:	685a      	ldr	r2, [r3, #4]
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	4944      	ldr	r1, [pc, #272]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004a3e:	428b      	cmp	r3, r1
 8004a40:	d101      	bne.n	8004a46 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8004a42:	4b44      	ldr	r3, [pc, #272]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004a44:	e001      	b.n	8004a4a <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004a46:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004a4a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004a4e:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8004a50:	2300      	movs	r3, #0
 8004a52:	60bb      	str	r3, [r7, #8]
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	60bb      	str	r3, [r7, #8]
 8004a5c:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	2201      	movs	r2, #1
 8004a62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a6a:	f043 0204 	orr.w	r2, r3, #4
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f7ff fe4a 	bl	800470c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004a78:	e089      	b.n	8004b8e <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004a7a:	69bb      	ldr	r3, [r7, #24]
 8004a7c:	f003 0302 	and.w	r3, r3, #2
 8004a80:	2b02      	cmp	r3, #2
 8004a82:	d107      	bne.n	8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004a84:	693b      	ldr	r3, [r7, #16]
 8004a86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d002      	beq.n	8004a94 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8004a8e:	6878      	ldr	r0, [r7, #4]
 8004a90:	f000 f8be 	bl	8004c10 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004a94:	69fb      	ldr	r3, [r7, #28]
 8004a96:	f003 0301 	and.w	r3, r3, #1
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d107      	bne.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8004a9e:	697b      	ldr	r3, [r7, #20]
 8004aa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d002      	beq.n	8004aae <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004aa8:	6878      	ldr	r0, [r7, #4]
 8004aaa:	f000 f8fd 	bl	8004ca8 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ab4:	2b40      	cmp	r3, #64	@ 0x40
 8004ab6:	d12f      	bne.n	8004b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d02a      	beq.n	8004b18 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	685a      	ldr	r2, [r3, #4]
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004ad0:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d101      	bne.n	8004ae0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8004adc:	4b1d      	ldr	r3, [pc, #116]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004ade:	e001      	b.n	8004ae4 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8004ae0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	4919      	ldr	r1, [pc, #100]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004aec:	428b      	cmp	r3, r1
 8004aee:	d101      	bne.n	8004af4 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8004af0:	4b18      	ldr	r3, [pc, #96]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004af2:	e001      	b.n	8004af8 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8004af4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004af8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004afc:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2201      	movs	r2, #1
 8004b02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f043 0202 	orr.w	r2, r3, #2
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fdfa 	bl	800470c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b08      	cmp	r3, #8
 8004b20:	d136      	bne.n	8004b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 8004b22:	693b      	ldr	r3, [r7, #16]
 8004b24:	f003 0320 	and.w	r3, r3, #32
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d031      	beq.n	8004b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	4a07      	ldr	r2, [pc, #28]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d101      	bne.n	8004b3a <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004b36:	4b07      	ldr	r3, [pc, #28]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b38:	e001      	b.n	8004b3e <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004b3a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b3e:	685a      	ldr	r2, [r3, #4]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4902      	ldr	r1, [pc, #8]	@ (8004b50 <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004b46:	428b      	cmp	r3, r1
 8004b48:	d106      	bne.n	8004b58 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004b4a:	4b02      	ldr	r3, [pc, #8]	@ (8004b54 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004b4c:	e006      	b.n	8004b5c <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 8004b4e:	bf00      	nop
 8004b50:	40003800 	.word	0x40003800
 8004b54:	40003400 	.word	0x40003400
 8004b58:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004b5c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004b60:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	685a      	ldr	r2, [r3, #4]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004b70:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2201      	movs	r2, #1
 8004b76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b7e:	f043 0204 	orr.w	r2, r3, #4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004b86:	6878      	ldr	r0, [r7, #4]
 8004b88:	f7ff fdc0 	bl	800470c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004b8c:	e000      	b.n	8004b90 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004b8e:	bf00      	nop
}
 8004b90:	bf00      	nop
 8004b92:	3720      	adds	r7, #32
 8004b94:	46bd      	mov	sp, r7
 8004b96:	bd80      	pop	{r7, pc}

08004b98 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b083      	sub	sp, #12
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8004ba0:	bf00      	nop
 8004ba2:	370c      	adds	r7, #12
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr

08004bac <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb8:	1c99      	adds	r1, r3, #2
 8004bba:	687a      	ldr	r2, [r7, #4]
 8004bbc:	6251      	str	r1, [r2, #36]	@ 0x24
 8004bbe:	881a      	ldrh	r2, [r3, #0]
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bca:	b29b      	uxth	r3, r3
 8004bcc:	3b01      	subs	r3, #1
 8004bce:	b29a      	uxth	r2, r3
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d113      	bne.n	8004c06 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	685a      	ldr	r2, [r3, #4]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004bec:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d106      	bne.n	8004c06 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c00:	6878      	ldr	r0, [r7, #4]
 8004c02:	f7ff ffc9 	bl	8004b98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c06:	bf00      	nop
 8004c08:	3708      	adds	r7, #8
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}
	...

08004c10 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004c10:	b580      	push	{r7, lr}
 8004c12:	b082      	sub	sp, #8
 8004c14:	af00      	add	r7, sp, #0
 8004c16:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c1c:	1c99      	adds	r1, r3, #2
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	6251      	str	r1, [r2, #36]	@ 0x24
 8004c22:	8819      	ldrh	r1, [r3, #0]
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a1d      	ldr	r2, [pc, #116]	@ (8004ca0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d101      	bne.n	8004c32 <I2SEx_TxISR_I2SExt+0x22>
 8004c2e:	4b1d      	ldr	r3, [pc, #116]	@ (8004ca4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c30:	e001      	b.n	8004c36 <I2SEx_TxISR_I2SExt+0x26>
 8004c32:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c36:	460a      	mov	r2, r1
 8004c38:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c3e:	b29b      	uxth	r3, r3
 8004c40:	3b01      	subs	r3, #1
 8004c42:	b29a      	uxth	r2, r3
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d121      	bne.n	8004c96 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4a12      	ldr	r2, [pc, #72]	@ (8004ca0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c58:	4293      	cmp	r3, r2
 8004c5a:	d101      	bne.n	8004c60 <I2SEx_TxISR_I2SExt+0x50>
 8004c5c:	4b11      	ldr	r3, [pc, #68]	@ (8004ca4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c5e:	e001      	b.n	8004c64 <I2SEx_TxISR_I2SExt+0x54>
 8004c60:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	490d      	ldr	r1, [pc, #52]	@ (8004ca0 <I2SEx_TxISR_I2SExt+0x90>)
 8004c6c:	428b      	cmp	r3, r1
 8004c6e:	d101      	bne.n	8004c74 <I2SEx_TxISR_I2SExt+0x64>
 8004c70:	4b0c      	ldr	r3, [pc, #48]	@ (8004ca4 <I2SEx_TxISR_I2SExt+0x94>)
 8004c72:	e001      	b.n	8004c78 <I2SEx_TxISR_I2SExt+0x68>
 8004c74:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004c78:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004c7c:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004c82:	b29b      	uxth	r3, r3
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2201      	movs	r2, #1
 8004c8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004c90:	6878      	ldr	r0, [r7, #4]
 8004c92:	f7ff ff81 	bl	8004b98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004c96:	bf00      	nop
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40003800 	.word	0x40003800
 8004ca4:	40003400 	.word	0x40003400

08004ca8 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b082      	sub	sp, #8
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	68d8      	ldr	r0, [r3, #12]
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cba:	1c99      	adds	r1, r3, #2
 8004cbc:	687a      	ldr	r2, [r7, #4]
 8004cbe:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004cc0:	b282      	uxth	r2, r0
 8004cc2:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cc8:	b29b      	uxth	r3, r3
 8004cca:	3b01      	subs	r3, #1
 8004ccc:	b29a      	uxth	r2, r3
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d113      	bne.n	8004d04 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004cea:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cf0:	b29b      	uxth	r3, r3
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d106      	bne.n	8004d04 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	2201      	movs	r2, #1
 8004cfa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004cfe:	6878      	ldr	r0, [r7, #4]
 8004d00:	f7ff ff4a 	bl	8004b98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d04:	bf00      	nop
 8004d06:	3708      	adds	r7, #8
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	bd80      	pop	{r7, pc}

08004d0c <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b082      	sub	sp, #8
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a20      	ldr	r2, [pc, #128]	@ (8004d9c <I2SEx_RxISR_I2SExt+0x90>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d101      	bne.n	8004d22 <I2SEx_RxISR_I2SExt+0x16>
 8004d1e:	4b20      	ldr	r3, [pc, #128]	@ (8004da0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d20:	e001      	b.n	8004d26 <I2SEx_RxISR_I2SExt+0x1a>
 8004d22:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d26:	68d8      	ldr	r0, [r3, #12]
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d2c:	1c99      	adds	r1, r3, #2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	62d1      	str	r1, [r2, #44]	@ 0x2c
 8004d32:	b282      	uxth	r2, r0
 8004d34:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d3a:	b29b      	uxth	r3, r3
 8004d3c:	3b01      	subs	r3, #1
 8004d3e:	b29a      	uxth	r2, r3
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d121      	bne.n	8004d92 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	4a12      	ldr	r2, [pc, #72]	@ (8004d9c <I2SEx_RxISR_I2SExt+0x90>)
 8004d54:	4293      	cmp	r3, r2
 8004d56:	d101      	bne.n	8004d5c <I2SEx_RxISR_I2SExt+0x50>
 8004d58:	4b11      	ldr	r3, [pc, #68]	@ (8004da0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d5a:	e001      	b.n	8004d60 <I2SEx_RxISR_I2SExt+0x54>
 8004d5c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d60:	685a      	ldr	r2, [r3, #4]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	490d      	ldr	r1, [pc, #52]	@ (8004d9c <I2SEx_RxISR_I2SExt+0x90>)
 8004d68:	428b      	cmp	r3, r1
 8004d6a:	d101      	bne.n	8004d70 <I2SEx_RxISR_I2SExt+0x64>
 8004d6c:	4b0c      	ldr	r3, [pc, #48]	@ (8004da0 <I2SEx_RxISR_I2SExt+0x94>)
 8004d6e:	e001      	b.n	8004d74 <I2SEx_RxISR_I2SExt+0x68>
 8004d70:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004d74:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004d78:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d7e:	b29b      	uxth	r3, r3
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d106      	bne.n	8004d92 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	2201      	movs	r2, #1
 8004d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004d8c:	6878      	ldr	r0, [r7, #4]
 8004d8e:	f7ff ff03 	bl	8004b98 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40003800 	.word	0x40003800
 8004da0:	40003400 	.word	0x40003400

08004da4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b086      	sub	sp, #24
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e267      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	f003 0301 	and.w	r3, r3, #1
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d075      	beq.n	8004eae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dc2:	4b88      	ldr	r3, [pc, #544]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004dc4:	689b      	ldr	r3, [r3, #8]
 8004dc6:	f003 030c 	and.w	r3, r3, #12
 8004dca:	2b04      	cmp	r3, #4
 8004dcc:	d00c      	beq.n	8004de8 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dce:	4b85      	ldr	r3, [pc, #532]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004dd0:	689b      	ldr	r3, [r3, #8]
 8004dd2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8004dd6:	2b08      	cmp	r3, #8
 8004dd8:	d112      	bne.n	8004e00 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dda:	4b82      	ldr	r3, [pc, #520]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004ddc:	685b      	ldr	r3, [r3, #4]
 8004dde:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004de2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004de6:	d10b      	bne.n	8004e00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004de8:	4b7e      	ldr	r3, [pc, #504]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d05b      	beq.n	8004eac <HAL_RCC_OscConfig+0x108>
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	685b      	ldr	r3, [r3, #4]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d157      	bne.n	8004eac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e242      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	685b      	ldr	r3, [r3, #4]
 8004e04:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e08:	d106      	bne.n	8004e18 <HAL_RCC_OscConfig+0x74>
 8004e0a:	4b76      	ldr	r3, [pc, #472]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e0c:	681b      	ldr	r3, [r3, #0]
 8004e0e:	4a75      	ldr	r2, [pc, #468]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e14:	6013      	str	r3, [r2, #0]
 8004e16:	e01d      	b.n	8004e54 <HAL_RCC_OscConfig+0xb0>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e20:	d10c      	bne.n	8004e3c <HAL_RCC_OscConfig+0x98>
 8004e22:	4b70      	ldr	r3, [pc, #448]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	4a6f      	ldr	r2, [pc, #444]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e28:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004e2c:	6013      	str	r3, [r2, #0]
 8004e2e:	4b6d      	ldr	r3, [pc, #436]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a6c      	ldr	r2, [pc, #432]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e00b      	b.n	8004e54 <HAL_RCC_OscConfig+0xb0>
 8004e3c:	4b69      	ldr	r3, [pc, #420]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	4a68      	ldr	r2, [pc, #416]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	4b66      	ldr	r3, [pc, #408]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	4a65      	ldr	r2, [pc, #404]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004e52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d013      	beq.n	8004e84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e5c:	f7fc fa84 	bl	8001368 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e62:	e008      	b.n	8004e76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e64:	f7fc fa80 	bl	8001368 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	@ 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e207      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e76:	4b5b      	ldr	r3, [pc, #364]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCC_OscConfig+0xc0>
 8004e82:	e014      	b.n	8004eae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e84:	f7fc fa70 	bl	8001368 <HAL_GetTick>
 8004e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e8a:	e008      	b.n	8004e9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004e8c:	f7fc fa6c 	bl	8001368 <HAL_GetTick>
 8004e90:	4602      	mov	r2, r0
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	2b64      	cmp	r3, #100	@ 0x64
 8004e98:	d901      	bls.n	8004e9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004e9a:	2303      	movs	r3, #3
 8004e9c:	e1f3      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e9e:	4b51      	ldr	r3, [pc, #324]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d1f0      	bne.n	8004e8c <HAL_RCC_OscConfig+0xe8>
 8004eaa:	e000      	b.n	8004eae <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	f003 0302 	and.w	r3, r3, #2
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d063      	beq.n	8004f82 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004eba:	4b4a      	ldr	r3, [pc, #296]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004ebc:	689b      	ldr	r3, [r3, #8]
 8004ebe:	f003 030c 	and.w	r3, r3, #12
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d00b      	beq.n	8004ede <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ec6:	4b47      	ldr	r3, [pc, #284]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ece:	2b08      	cmp	r3, #8
 8004ed0:	d11c      	bne.n	8004f0c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ed2:	4b44      	ldr	r3, [pc, #272]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	685b      	ldr	r3, [r3, #4]
 8004ed6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d116      	bne.n	8004f0c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ede:	4b41      	ldr	r3, [pc, #260]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	f003 0302 	and.w	r3, r3, #2
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d005      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x152>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	68db      	ldr	r3, [r3, #12]
 8004eee:	2b01      	cmp	r3, #1
 8004ef0:	d001      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	e1c7      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ef6:	4b3b      	ldr	r3, [pc, #236]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	691b      	ldr	r3, [r3, #16]
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4937      	ldr	r1, [pc, #220]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f0a:	e03a      	b.n	8004f82 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d020      	beq.n	8004f56 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f14:	4b34      	ldr	r3, [pc, #208]	@ (8004fe8 <HAL_RCC_OscConfig+0x244>)
 8004f16:	2201      	movs	r2, #1
 8004f18:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f1a:	f7fc fa25 	bl	8001368 <HAL_GetTick>
 8004f1e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f20:	e008      	b.n	8004f34 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f22:	f7fc fa21 	bl	8001368 <HAL_GetTick>
 8004f26:	4602      	mov	r2, r0
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	1ad3      	subs	r3, r2, r3
 8004f2c:	2b02      	cmp	r3, #2
 8004f2e:	d901      	bls.n	8004f34 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f30:	2303      	movs	r3, #3
 8004f32:	e1a8      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f34:	4b2b      	ldr	r3, [pc, #172]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	f003 0302 	and.w	r3, r3, #2
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d0f0      	beq.n	8004f22 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f40:	4b28      	ldr	r3, [pc, #160]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	691b      	ldr	r3, [r3, #16]
 8004f4c:	00db      	lsls	r3, r3, #3
 8004f4e:	4925      	ldr	r1, [pc, #148]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004f50:	4313      	orrs	r3, r2
 8004f52:	600b      	str	r3, [r1, #0]
 8004f54:	e015      	b.n	8004f82 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f56:	4b24      	ldr	r3, [pc, #144]	@ (8004fe8 <HAL_RCC_OscConfig+0x244>)
 8004f58:	2200      	movs	r2, #0
 8004f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fc fa04 	bl	8001368 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004f64:	f7fc fa00 	bl	8001368 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b02      	cmp	r3, #2
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e187      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f76:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f003 0302 	and.w	r3, r3, #2
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d1f0      	bne.n	8004f64 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	f003 0308 	and.w	r3, r3, #8
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d036      	beq.n	8004ffc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	695b      	ldr	r3, [r3, #20]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d016      	beq.n	8004fc4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004f96:	4b15      	ldr	r3, [pc, #84]	@ (8004fec <HAL_RCC_OscConfig+0x248>)
 8004f98:	2201      	movs	r2, #1
 8004f9a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f9c:	f7fc f9e4 	bl	8001368 <HAL_GetTick>
 8004fa0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fa2:	e008      	b.n	8004fb6 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fa4:	f7fc f9e0 	bl	8001368 <HAL_GetTick>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	693b      	ldr	r3, [r7, #16]
 8004fac:	1ad3      	subs	r3, r2, r3
 8004fae:	2b02      	cmp	r3, #2
 8004fb0:	d901      	bls.n	8004fb6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fb2:	2303      	movs	r3, #3
 8004fb4:	e167      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fb6:	4b0b      	ldr	r3, [pc, #44]	@ (8004fe4 <HAL_RCC_OscConfig+0x240>)
 8004fb8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004fba:	f003 0302 	and.w	r3, r3, #2
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d0f0      	beq.n	8004fa4 <HAL_RCC_OscConfig+0x200>
 8004fc2:	e01b      	b.n	8004ffc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fc4:	4b09      	ldr	r3, [pc, #36]	@ (8004fec <HAL_RCC_OscConfig+0x248>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fca:	f7fc f9cd 	bl	8001368 <HAL_GetTick>
 8004fce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fd0:	e00e      	b.n	8004ff0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004fd2:	f7fc f9c9 	bl	8001368 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	693b      	ldr	r3, [r7, #16]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2b02      	cmp	r3, #2
 8004fde:	d907      	bls.n	8004ff0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004fe0:	2303      	movs	r3, #3
 8004fe2:	e150      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
 8004fe4:	40023800 	.word	0x40023800
 8004fe8:	42470000 	.word	0x42470000
 8004fec:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff0:	4b88      	ldr	r3, [pc, #544]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8004ff2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ff4:	f003 0302 	and.w	r3, r3, #2
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d1ea      	bne.n	8004fd2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f003 0304 	and.w	r3, r3, #4
 8005004:	2b00      	cmp	r3, #0
 8005006:	f000 8097 	beq.w	8005138 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800500a:	2300      	movs	r3, #0
 800500c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800500e:	4b81      	ldr	r3, [pc, #516]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005016:	2b00      	cmp	r3, #0
 8005018:	d10f      	bne.n	800503a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800501a:	2300      	movs	r3, #0
 800501c:	60bb      	str	r3, [r7, #8]
 800501e:	4b7d      	ldr	r3, [pc, #500]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005022:	4a7c      	ldr	r2, [pc, #496]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005024:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005028:	6413      	str	r3, [r2, #64]	@ 0x40
 800502a:	4b7a      	ldr	r3, [pc, #488]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 800502c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800502e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005032:	60bb      	str	r3, [r7, #8]
 8005034:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005036:	2301      	movs	r3, #1
 8005038:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800503a:	4b77      	ldr	r3, [pc, #476]	@ (8005218 <HAL_RCC_OscConfig+0x474>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005042:	2b00      	cmp	r3, #0
 8005044:	d118      	bne.n	8005078 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005046:	4b74      	ldr	r3, [pc, #464]	@ (8005218 <HAL_RCC_OscConfig+0x474>)
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a73      	ldr	r2, [pc, #460]	@ (8005218 <HAL_RCC_OscConfig+0x474>)
 800504c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005050:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005052:	f7fc f989 	bl	8001368 <HAL_GetTick>
 8005056:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005058:	e008      	b.n	800506c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800505a:	f7fc f985 	bl	8001368 <HAL_GetTick>
 800505e:	4602      	mov	r2, r0
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	1ad3      	subs	r3, r2, r3
 8005064:	2b02      	cmp	r3, #2
 8005066:	d901      	bls.n	800506c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005068:	2303      	movs	r3, #3
 800506a:	e10c      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800506c:	4b6a      	ldr	r3, [pc, #424]	@ (8005218 <HAL_RCC_OscConfig+0x474>)
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005074:	2b00      	cmp	r3, #0
 8005076:	d0f0      	beq.n	800505a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d106      	bne.n	800508e <HAL_RCC_OscConfig+0x2ea>
 8005080:	4b64      	ldr	r3, [pc, #400]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005082:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005084:	4a63      	ldr	r2, [pc, #396]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005086:	f043 0301 	orr.w	r3, r3, #1
 800508a:	6713      	str	r3, [r2, #112]	@ 0x70
 800508c:	e01c      	b.n	80050c8 <HAL_RCC_OscConfig+0x324>
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	2b05      	cmp	r3, #5
 8005094:	d10c      	bne.n	80050b0 <HAL_RCC_OscConfig+0x30c>
 8005096:	4b5f      	ldr	r3, [pc, #380]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800509a:	4a5e      	ldr	r2, [pc, #376]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 800509c:	f043 0304 	orr.w	r3, r3, #4
 80050a0:	6713      	str	r3, [r2, #112]	@ 0x70
 80050a2:	4b5c      	ldr	r3, [pc, #368]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80050a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050a6:	4a5b      	ldr	r2, [pc, #364]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80050a8:	f043 0301 	orr.w	r3, r3, #1
 80050ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80050ae:	e00b      	b.n	80050c8 <HAL_RCC_OscConfig+0x324>
 80050b0:	4b58      	ldr	r3, [pc, #352]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80050b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050b4:	4a57      	ldr	r2, [pc, #348]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80050b6:	f023 0301 	bic.w	r3, r3, #1
 80050ba:	6713      	str	r3, [r2, #112]	@ 0x70
 80050bc:	4b55      	ldr	r3, [pc, #340]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80050be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050c0:	4a54      	ldr	r2, [pc, #336]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80050c2:	f023 0304 	bic.w	r3, r3, #4
 80050c6:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	689b      	ldr	r3, [r3, #8]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	d015      	beq.n	80050fc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d0:	f7fc f94a 	bl	8001368 <HAL_GetTick>
 80050d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050d6:	e00a      	b.n	80050ee <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80050d8:	f7fc f946 	bl	8001368 <HAL_GetTick>
 80050dc:	4602      	mov	r2, r0
 80050de:	693b      	ldr	r3, [r7, #16]
 80050e0:	1ad3      	subs	r3, r2, r3
 80050e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80050e6:	4293      	cmp	r3, r2
 80050e8:	d901      	bls.n	80050ee <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80050ea:	2303      	movs	r3, #3
 80050ec:	e0cb      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80050ee:	4b49      	ldr	r3, [pc, #292]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80050f2:	f003 0302 	and.w	r3, r3, #2
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d0ee      	beq.n	80050d8 <HAL_RCC_OscConfig+0x334>
 80050fa:	e014      	b.n	8005126 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050fc:	f7fc f934 	bl	8001368 <HAL_GetTick>
 8005100:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005102:	e00a      	b.n	800511a <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005104:	f7fc f930 	bl	8001368 <HAL_GetTick>
 8005108:	4602      	mov	r2, r0
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1ad3      	subs	r3, r2, r3
 800510e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005112:	4293      	cmp	r3, r2
 8005114:	d901      	bls.n	800511a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005116:	2303      	movs	r3, #3
 8005118:	e0b5      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800511a:	4b3e      	ldr	r3, [pc, #248]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 800511c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800511e:	f003 0302 	and.w	r3, r3, #2
 8005122:	2b00      	cmp	r3, #0
 8005124:	d1ee      	bne.n	8005104 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005126:	7dfb      	ldrb	r3, [r7, #23]
 8005128:	2b01      	cmp	r3, #1
 800512a:	d105      	bne.n	8005138 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800512c:	4b39      	ldr	r3, [pc, #228]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005130:	4a38      	ldr	r2, [pc, #224]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005132:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005136:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	699b      	ldr	r3, [r3, #24]
 800513c:	2b00      	cmp	r3, #0
 800513e:	f000 80a1 	beq.w	8005284 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005142:	4b34      	ldr	r3, [pc, #208]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005144:	689b      	ldr	r3, [r3, #8]
 8005146:	f003 030c 	and.w	r3, r3, #12
 800514a:	2b08      	cmp	r3, #8
 800514c:	d05c      	beq.n	8005208 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	699b      	ldr	r3, [r3, #24]
 8005152:	2b02      	cmp	r3, #2
 8005154:	d141      	bne.n	80051da <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005156:	4b31      	ldr	r3, [pc, #196]	@ (800521c <HAL_RCC_OscConfig+0x478>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800515c:	f7fc f904 	bl	8001368 <HAL_GetTick>
 8005160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005162:	e008      	b.n	8005176 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005164:	f7fc f900 	bl	8001368 <HAL_GetTick>
 8005168:	4602      	mov	r2, r0
 800516a:	693b      	ldr	r3, [r7, #16]
 800516c:	1ad3      	subs	r3, r2, r3
 800516e:	2b02      	cmp	r3, #2
 8005170:	d901      	bls.n	8005176 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005172:	2303      	movs	r3, #3
 8005174:	e087      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005176:	4b27      	ldr	r3, [pc, #156]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800517e:	2b00      	cmp	r3, #0
 8005180:	d1f0      	bne.n	8005164 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69da      	ldr	r2, [r3, #28]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	6a1b      	ldr	r3, [r3, #32]
 800518a:	431a      	orrs	r2, r3
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	019b      	lsls	r3, r3, #6
 8005192:	431a      	orrs	r2, r3
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005198:	085b      	lsrs	r3, r3, #1
 800519a:	3b01      	subs	r3, #1
 800519c:	041b      	lsls	r3, r3, #16
 800519e:	431a      	orrs	r2, r3
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80051a4:	061b      	lsls	r3, r3, #24
 80051a6:	491b      	ldr	r1, [pc, #108]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80051a8:	4313      	orrs	r3, r2
 80051aa:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051ac:	4b1b      	ldr	r3, [pc, #108]	@ (800521c <HAL_RCC_OscConfig+0x478>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051b2:	f7fc f8d9 	bl	8001368 <HAL_GetTick>
 80051b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051b8:	e008      	b.n	80051cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051ba:	f7fc f8d5 	bl	8001368 <HAL_GetTick>
 80051be:	4602      	mov	r2, r0
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	1ad3      	subs	r3, r2, r3
 80051c4:	2b02      	cmp	r3, #2
 80051c6:	d901      	bls.n	80051cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80051c8:	2303      	movs	r3, #3
 80051ca:	e05c      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051cc:	4b11      	ldr	r3, [pc, #68]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d0f0      	beq.n	80051ba <HAL_RCC_OscConfig+0x416>
 80051d8:	e054      	b.n	8005284 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80051da:	4b10      	ldr	r3, [pc, #64]	@ (800521c <HAL_RCC_OscConfig+0x478>)
 80051dc:	2200      	movs	r2, #0
 80051de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051e0:	f7fc f8c2 	bl	8001368 <HAL_GetTick>
 80051e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051e6:	e008      	b.n	80051fa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051e8:	f7fc f8be 	bl	8001368 <HAL_GetTick>
 80051ec:	4602      	mov	r2, r0
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	1ad3      	subs	r3, r2, r3
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d901      	bls.n	80051fa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80051f6:	2303      	movs	r3, #3
 80051f8:	e045      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051fa:	4b06      	ldr	r3, [pc, #24]	@ (8005214 <HAL_RCC_OscConfig+0x470>)
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005202:	2b00      	cmp	r3, #0
 8005204:	d1f0      	bne.n	80051e8 <HAL_RCC_OscConfig+0x444>
 8005206:	e03d      	b.n	8005284 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	699b      	ldr	r3, [r3, #24]
 800520c:	2b01      	cmp	r3, #1
 800520e:	d107      	bne.n	8005220 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005210:	2301      	movs	r3, #1
 8005212:	e038      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
 8005214:	40023800 	.word	0x40023800
 8005218:	40007000 	.word	0x40007000
 800521c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005220:	4b1b      	ldr	r3, [pc, #108]	@ (8005290 <HAL_RCC_OscConfig+0x4ec>)
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	699b      	ldr	r3, [r3, #24]
 800522a:	2b01      	cmp	r3, #1
 800522c:	d028      	beq.n	8005280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005238:	429a      	cmp	r2, r3
 800523a:	d121      	bne.n	8005280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005246:	429a      	cmp	r2, r3
 8005248:	d11a      	bne.n	8005280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800524a:	68fa      	ldr	r2, [r7, #12]
 800524c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005250:	4013      	ands	r3, r2
 8005252:	687a      	ldr	r2, [r7, #4]
 8005254:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005256:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005258:	4293      	cmp	r3, r2
 800525a:	d111      	bne.n	8005280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005266:	085b      	lsrs	r3, r3, #1
 8005268:	3b01      	subs	r3, #1
 800526a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800526c:	429a      	cmp	r2, r3
 800526e:	d107      	bne.n	8005280 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800527a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800527c:	429a      	cmp	r2, r3
 800527e:	d001      	beq.n	8005284 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005280:	2301      	movs	r3, #1
 8005282:	e000      	b.n	8005286 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005284:	2300      	movs	r3, #0
}
 8005286:	4618      	mov	r0, r3
 8005288:	3718      	adds	r7, #24
 800528a:	46bd      	mov	sp, r7
 800528c:	bd80      	pop	{r7, pc}
 800528e:	bf00      	nop
 8005290:	40023800 	.word	0x40023800

08005294 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b084      	sub	sp, #16
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
 800529c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d101      	bne.n	80052a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052a4:	2301      	movs	r3, #1
 80052a6:	e0cc      	b.n	8005442 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80052a8:	4b68      	ldr	r3, [pc, #416]	@ (800544c <HAL_RCC_ClockConfig+0x1b8>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	f003 0307 	and.w	r3, r3, #7
 80052b0:	683a      	ldr	r2, [r7, #0]
 80052b2:	429a      	cmp	r2, r3
 80052b4:	d90c      	bls.n	80052d0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052b6:	4b65      	ldr	r3, [pc, #404]	@ (800544c <HAL_RCC_ClockConfig+0x1b8>)
 80052b8:	683a      	ldr	r2, [r7, #0]
 80052ba:	b2d2      	uxtb	r2, r2
 80052bc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80052be:	4b63      	ldr	r3, [pc, #396]	@ (800544c <HAL_RCC_ClockConfig+0x1b8>)
 80052c0:	681b      	ldr	r3, [r3, #0]
 80052c2:	f003 0307 	and.w	r3, r3, #7
 80052c6:	683a      	ldr	r2, [r7, #0]
 80052c8:	429a      	cmp	r2, r3
 80052ca:	d001      	beq.n	80052d0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052cc:	2301      	movs	r3, #1
 80052ce:	e0b8      	b.n	8005442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d020      	beq.n	800531e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d005      	beq.n	80052f4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052e8:	4b59      	ldr	r3, [pc, #356]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 80052ea:	689b      	ldr	r3, [r3, #8]
 80052ec:	4a58      	ldr	r2, [pc, #352]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 80052ee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80052f2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f003 0308 	and.w	r3, r3, #8
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d005      	beq.n	800530c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005300:	4b53      	ldr	r3, [pc, #332]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	689b      	ldr	r3, [r3, #8]
 8005304:	4a52      	ldr	r2, [pc, #328]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005306:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800530a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800530c:	4b50      	ldr	r3, [pc, #320]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 800530e:	689b      	ldr	r3, [r3, #8]
 8005310:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	494d      	ldr	r1, [pc, #308]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	4313      	orrs	r3, r2
 800531c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f003 0301 	and.w	r3, r3, #1
 8005326:	2b00      	cmp	r3, #0
 8005328:	d044      	beq.n	80053b4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d107      	bne.n	8005342 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005332:	4b47      	ldr	r3, [pc, #284]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800533a:	2b00      	cmp	r3, #0
 800533c:	d119      	bne.n	8005372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e07f      	b.n	8005442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	685b      	ldr	r3, [r3, #4]
 8005346:	2b02      	cmp	r3, #2
 8005348:	d003      	beq.n	8005352 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800534e:	2b03      	cmp	r3, #3
 8005350:	d107      	bne.n	8005362 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005352:	4b3f      	ldr	r3, [pc, #252]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800535a:	2b00      	cmp	r3, #0
 800535c:	d109      	bne.n	8005372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800535e:	2301      	movs	r3, #1
 8005360:	e06f      	b.n	8005442 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005362:	4b3b      	ldr	r3, [pc, #236]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 0302 	and.w	r3, r3, #2
 800536a:	2b00      	cmp	r3, #0
 800536c:	d101      	bne.n	8005372 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800536e:	2301      	movs	r3, #1
 8005370:	e067      	b.n	8005442 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005372:	4b37      	ldr	r3, [pc, #220]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f023 0203 	bic.w	r2, r3, #3
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	685b      	ldr	r3, [r3, #4]
 800537e:	4934      	ldr	r1, [pc, #208]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005380:	4313      	orrs	r3, r2
 8005382:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005384:	f7fb fff0 	bl	8001368 <HAL_GetTick>
 8005388:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800538a:	e00a      	b.n	80053a2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800538c:	f7fb ffec 	bl	8001368 <HAL_GetTick>
 8005390:	4602      	mov	r2, r0
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	1ad3      	subs	r3, r2, r3
 8005396:	f241 3288 	movw	r2, #5000	@ 0x1388
 800539a:	4293      	cmp	r3, r2
 800539c:	d901      	bls.n	80053a2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800539e:	2303      	movs	r3, #3
 80053a0:	e04f      	b.n	8005442 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053a2:	4b2b      	ldr	r3, [pc, #172]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 80053a4:	689b      	ldr	r3, [r3, #8]
 80053a6:	f003 020c 	and.w	r2, r3, #12
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	429a      	cmp	r2, r3
 80053b2:	d1eb      	bne.n	800538c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80053b4:	4b25      	ldr	r3, [pc, #148]	@ (800544c <HAL_RCC_ClockConfig+0x1b8>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	f003 0307 	and.w	r3, r3, #7
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	429a      	cmp	r2, r3
 80053c0:	d20c      	bcs.n	80053dc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053c2:	4b22      	ldr	r3, [pc, #136]	@ (800544c <HAL_RCC_ClockConfig+0x1b8>)
 80053c4:	683a      	ldr	r2, [r7, #0]
 80053c6:	b2d2      	uxtb	r2, r2
 80053c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80053ca:	4b20      	ldr	r3, [pc, #128]	@ (800544c <HAL_RCC_ClockConfig+0x1b8>)
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	f003 0307 	and.w	r3, r3, #7
 80053d2:	683a      	ldr	r2, [r7, #0]
 80053d4:	429a      	cmp	r2, r3
 80053d6:	d001      	beq.n	80053dc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e032      	b.n	8005442 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 0304 	and.w	r3, r3, #4
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053e8:	4b19      	ldr	r3, [pc, #100]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	68db      	ldr	r3, [r3, #12]
 80053f4:	4916      	ldr	r1, [pc, #88]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 80053f6:	4313      	orrs	r3, r2
 80053f8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f003 0308 	and.w	r3, r3, #8
 8005402:	2b00      	cmp	r3, #0
 8005404:	d009      	beq.n	800541a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005406:	4b12      	ldr	r3, [pc, #72]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005408:	689b      	ldr	r3, [r3, #8]
 800540a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	691b      	ldr	r3, [r3, #16]
 8005412:	00db      	lsls	r3, r3, #3
 8005414:	490e      	ldr	r1, [pc, #56]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005416:	4313      	orrs	r3, r2
 8005418:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800541a:	f000 f821 	bl	8005460 <HAL_RCC_GetSysClockFreq>
 800541e:	4602      	mov	r2, r0
 8005420:	4b0b      	ldr	r3, [pc, #44]	@ (8005450 <HAL_RCC_ClockConfig+0x1bc>)
 8005422:	689b      	ldr	r3, [r3, #8]
 8005424:	091b      	lsrs	r3, r3, #4
 8005426:	f003 030f 	and.w	r3, r3, #15
 800542a:	490a      	ldr	r1, [pc, #40]	@ (8005454 <HAL_RCC_ClockConfig+0x1c0>)
 800542c:	5ccb      	ldrb	r3, [r1, r3]
 800542e:	fa22 f303 	lsr.w	r3, r2, r3
 8005432:	4a09      	ldr	r2, [pc, #36]	@ (8005458 <HAL_RCC_ClockConfig+0x1c4>)
 8005434:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8005436:	4b09      	ldr	r3, [pc, #36]	@ (800545c <HAL_RCC_ClockConfig+0x1c8>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4618      	mov	r0, r3
 800543c:	f7fb ff50 	bl	80012e0 <HAL_InitTick>

  return HAL_OK;
 8005440:	2300      	movs	r3, #0
}
 8005442:	4618      	mov	r0, r3
 8005444:	3710      	adds	r7, #16
 8005446:	46bd      	mov	sp, r7
 8005448:	bd80      	pop	{r7, pc}
 800544a:	bf00      	nop
 800544c:	40023c00 	.word	0x40023c00
 8005450:	40023800 	.word	0x40023800
 8005454:	0800a7e8 	.word	0x0800a7e8
 8005458:	20000000 	.word	0x20000000
 800545c:	20000004 	.word	0x20000004

08005460 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005460:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005464:	b094      	sub	sp, #80	@ 0x50
 8005466:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005468:	2300      	movs	r3, #0
 800546a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800546c:	2300      	movs	r3, #0
 800546e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005470:	2300      	movs	r3, #0
 8005472:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005474:	2300      	movs	r3, #0
 8005476:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005478:	4b79      	ldr	r3, [pc, #484]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x200>)
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f003 030c 	and.w	r3, r3, #12
 8005480:	2b08      	cmp	r3, #8
 8005482:	d00d      	beq.n	80054a0 <HAL_RCC_GetSysClockFreq+0x40>
 8005484:	2b08      	cmp	r3, #8
 8005486:	f200 80e1 	bhi.w	800564c <HAL_RCC_GetSysClockFreq+0x1ec>
 800548a:	2b00      	cmp	r3, #0
 800548c:	d002      	beq.n	8005494 <HAL_RCC_GetSysClockFreq+0x34>
 800548e:	2b04      	cmp	r3, #4
 8005490:	d003      	beq.n	800549a <HAL_RCC_GetSysClockFreq+0x3a>
 8005492:	e0db      	b.n	800564c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005494:	4b73      	ldr	r3, [pc, #460]	@ (8005664 <HAL_RCC_GetSysClockFreq+0x204>)
 8005496:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005498:	e0db      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800549a:	4b73      	ldr	r3, [pc, #460]	@ (8005668 <HAL_RCC_GetSysClockFreq+0x208>)
 800549c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800549e:	e0d8      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054a0:	4b6f      	ldr	r3, [pc, #444]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x200>)
 80054a2:	685b      	ldr	r3, [r3, #4]
 80054a4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054a8:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054aa:	4b6d      	ldr	r3, [pc, #436]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x200>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d063      	beq.n	800557e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054b6:	4b6a      	ldr	r3, [pc, #424]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x200>)
 80054b8:	685b      	ldr	r3, [r3, #4]
 80054ba:	099b      	lsrs	r3, r3, #6
 80054bc:	2200      	movs	r2, #0
 80054be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80054c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80054c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80054c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80054ca:	2300      	movs	r3, #0
 80054cc:	637b      	str	r3, [r7, #52]	@ 0x34
 80054ce:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80054d2:	4622      	mov	r2, r4
 80054d4:	462b      	mov	r3, r5
 80054d6:	f04f 0000 	mov.w	r0, #0
 80054da:	f04f 0100 	mov.w	r1, #0
 80054de:	0159      	lsls	r1, r3, #5
 80054e0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80054e4:	0150      	lsls	r0, r2, #5
 80054e6:	4602      	mov	r2, r0
 80054e8:	460b      	mov	r3, r1
 80054ea:	4621      	mov	r1, r4
 80054ec:	1a51      	subs	r1, r2, r1
 80054ee:	6139      	str	r1, [r7, #16]
 80054f0:	4629      	mov	r1, r5
 80054f2:	eb63 0301 	sbc.w	r3, r3, r1
 80054f6:	617b      	str	r3, [r7, #20]
 80054f8:	f04f 0200 	mov.w	r2, #0
 80054fc:	f04f 0300 	mov.w	r3, #0
 8005500:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005504:	4659      	mov	r1, fp
 8005506:	018b      	lsls	r3, r1, #6
 8005508:	4651      	mov	r1, sl
 800550a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800550e:	4651      	mov	r1, sl
 8005510:	018a      	lsls	r2, r1, #6
 8005512:	4651      	mov	r1, sl
 8005514:	ebb2 0801 	subs.w	r8, r2, r1
 8005518:	4659      	mov	r1, fp
 800551a:	eb63 0901 	sbc.w	r9, r3, r1
 800551e:	f04f 0200 	mov.w	r2, #0
 8005522:	f04f 0300 	mov.w	r3, #0
 8005526:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800552a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800552e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005532:	4690      	mov	r8, r2
 8005534:	4699      	mov	r9, r3
 8005536:	4623      	mov	r3, r4
 8005538:	eb18 0303 	adds.w	r3, r8, r3
 800553c:	60bb      	str	r3, [r7, #8]
 800553e:	462b      	mov	r3, r5
 8005540:	eb49 0303 	adc.w	r3, r9, r3
 8005544:	60fb      	str	r3, [r7, #12]
 8005546:	f04f 0200 	mov.w	r2, #0
 800554a:	f04f 0300 	mov.w	r3, #0
 800554e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005552:	4629      	mov	r1, r5
 8005554:	024b      	lsls	r3, r1, #9
 8005556:	4621      	mov	r1, r4
 8005558:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800555c:	4621      	mov	r1, r4
 800555e:	024a      	lsls	r2, r1, #9
 8005560:	4610      	mov	r0, r2
 8005562:	4619      	mov	r1, r3
 8005564:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005566:	2200      	movs	r2, #0
 8005568:	62bb      	str	r3, [r7, #40]	@ 0x28
 800556a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800556c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005570:	f7fa fe2a 	bl	80001c8 <__aeabi_uldivmod>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4613      	mov	r3, r2
 800557a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800557c:	e058      	b.n	8005630 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800557e:	4b38      	ldr	r3, [pc, #224]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x200>)
 8005580:	685b      	ldr	r3, [r3, #4]
 8005582:	099b      	lsrs	r3, r3, #6
 8005584:	2200      	movs	r2, #0
 8005586:	4618      	mov	r0, r3
 8005588:	4611      	mov	r1, r2
 800558a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800558e:	623b      	str	r3, [r7, #32]
 8005590:	2300      	movs	r3, #0
 8005592:	627b      	str	r3, [r7, #36]	@ 0x24
 8005594:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	f04f 0000 	mov.w	r0, #0
 80055a0:	f04f 0100 	mov.w	r1, #0
 80055a4:	0159      	lsls	r1, r3, #5
 80055a6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80055aa:	0150      	lsls	r0, r2, #5
 80055ac:	4602      	mov	r2, r0
 80055ae:	460b      	mov	r3, r1
 80055b0:	4641      	mov	r1, r8
 80055b2:	ebb2 0a01 	subs.w	sl, r2, r1
 80055b6:	4649      	mov	r1, r9
 80055b8:	eb63 0b01 	sbc.w	fp, r3, r1
 80055bc:	f04f 0200 	mov.w	r2, #0
 80055c0:	f04f 0300 	mov.w	r3, #0
 80055c4:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80055c8:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80055cc:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80055d0:	ebb2 040a 	subs.w	r4, r2, sl
 80055d4:	eb63 050b 	sbc.w	r5, r3, fp
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	00eb      	lsls	r3, r5, #3
 80055e2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80055e6:	00e2      	lsls	r2, r4, #3
 80055e8:	4614      	mov	r4, r2
 80055ea:	461d      	mov	r5, r3
 80055ec:	4643      	mov	r3, r8
 80055ee:	18e3      	adds	r3, r4, r3
 80055f0:	603b      	str	r3, [r7, #0]
 80055f2:	464b      	mov	r3, r9
 80055f4:	eb45 0303 	adc.w	r3, r5, r3
 80055f8:	607b      	str	r3, [r7, #4]
 80055fa:	f04f 0200 	mov.w	r2, #0
 80055fe:	f04f 0300 	mov.w	r3, #0
 8005602:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005606:	4629      	mov	r1, r5
 8005608:	028b      	lsls	r3, r1, #10
 800560a:	4621      	mov	r1, r4
 800560c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005610:	4621      	mov	r1, r4
 8005612:	028a      	lsls	r2, r1, #10
 8005614:	4610      	mov	r0, r2
 8005616:	4619      	mov	r1, r3
 8005618:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800561a:	2200      	movs	r2, #0
 800561c:	61bb      	str	r3, [r7, #24]
 800561e:	61fa      	str	r2, [r7, #28]
 8005620:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005624:	f7fa fdd0 	bl	80001c8 <__aeabi_uldivmod>
 8005628:	4602      	mov	r2, r0
 800562a:	460b      	mov	r3, r1
 800562c:	4613      	mov	r3, r2
 800562e:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005630:	4b0b      	ldr	r3, [pc, #44]	@ (8005660 <HAL_RCC_GetSysClockFreq+0x200>)
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	3301      	adds	r3, #1
 800563c:	005b      	lsls	r3, r3, #1
 800563e:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005640:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005642:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005644:	fbb2 f3f3 	udiv	r3, r2, r3
 8005648:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800564a:	e002      	b.n	8005652 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800564c:	4b05      	ldr	r3, [pc, #20]	@ (8005664 <HAL_RCC_GetSysClockFreq+0x204>)
 800564e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005650:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005652:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005654:	4618      	mov	r0, r3
 8005656:	3750      	adds	r7, #80	@ 0x50
 8005658:	46bd      	mov	sp, r7
 800565a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800565e:	bf00      	nop
 8005660:	40023800 	.word	0x40023800
 8005664:	00f42400 	.word	0x00f42400
 8005668:	007a1200 	.word	0x007a1200

0800566c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800566c:	b480      	push	{r7}
 800566e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005670:	4b03      	ldr	r3, [pc, #12]	@ (8005680 <HAL_RCC_GetHCLKFreq+0x14>)
 8005672:	681b      	ldr	r3, [r3, #0]
}
 8005674:	4618      	mov	r0, r3
 8005676:	46bd      	mov	sp, r7
 8005678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800567c:	4770      	bx	lr
 800567e:	bf00      	nop
 8005680:	20000000 	.word	0x20000000

08005684 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005684:	b580      	push	{r7, lr}
 8005686:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005688:	f7ff fff0 	bl	800566c <HAL_RCC_GetHCLKFreq>
 800568c:	4602      	mov	r2, r0
 800568e:	4b05      	ldr	r3, [pc, #20]	@ (80056a4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005690:	689b      	ldr	r3, [r3, #8]
 8005692:	0a9b      	lsrs	r3, r3, #10
 8005694:	f003 0307 	and.w	r3, r3, #7
 8005698:	4903      	ldr	r1, [pc, #12]	@ (80056a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800569a:	5ccb      	ldrb	r3, [r1, r3]
 800569c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80056a0:	4618      	mov	r0, r3
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	40023800 	.word	0x40023800
 80056a8:	0800a7f8 	.word	0x0800a7f8

080056ac <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b086      	sub	sp, #24
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80056b4:	2300      	movs	r3, #0
 80056b6:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80056b8:	2300      	movs	r3, #0
 80056ba:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	f003 0301 	and.w	r3, r3, #1
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d105      	bne.n	80056d4 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d035      	beq.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80056d4:	4b62      	ldr	r3, [pc, #392]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80056d6:	2200      	movs	r2, #0
 80056d8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80056da:	f7fb fe45 	bl	8001368 <HAL_GetTick>
 80056de:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056e0:	e008      	b.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80056e2:	f7fb fe41 	bl	8001368 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d901      	bls.n	80056f4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056f0:	2303      	movs	r3, #3
 80056f2:	e0b0      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056f4:	4b5b      	ldr	r3, [pc, #364]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d1f0      	bne.n	80056e2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	685b      	ldr	r3, [r3, #4]
 8005704:	019a      	lsls	r2, r3, #6
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	689b      	ldr	r3, [r3, #8]
 800570a:	071b      	lsls	r3, r3, #28
 800570c:	4955      	ldr	r1, [pc, #340]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800570e:	4313      	orrs	r3, r2
 8005710:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005714:	4b52      	ldr	r3, [pc, #328]	@ (8005860 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8005716:	2201      	movs	r2, #1
 8005718:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800571a:	f7fb fe25 	bl	8001368 <HAL_GetTick>
 800571e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005720:	e008      	b.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005722:	f7fb fe21 	bl	8001368 <HAL_GetTick>
 8005726:	4602      	mov	r2, r0
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	1ad3      	subs	r3, r2, r3
 800572c:	2b02      	cmp	r3, #2
 800572e:	d901      	bls.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005730:	2303      	movs	r3, #3
 8005732:	e090      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005734:	4b4b      	ldr	r3, [pc, #300]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800573c:	2b00      	cmp	r3, #0
 800573e:	d0f0      	beq.n	8005722 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 0302 	and.w	r3, r3, #2
 8005748:	2b00      	cmp	r3, #0
 800574a:	f000 8083 	beq.w	8005854 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800574e:	2300      	movs	r3, #0
 8005750:	60fb      	str	r3, [r7, #12]
 8005752:	4b44      	ldr	r3, [pc, #272]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005756:	4a43      	ldr	r2, [pc, #268]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005758:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800575c:	6413      	str	r3, [r2, #64]	@ 0x40
 800575e:	4b41      	ldr	r3, [pc, #260]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005762:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005766:	60fb      	str	r3, [r7, #12]
 8005768:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800576a:	4b3f      	ldr	r3, [pc, #252]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	4a3e      	ldr	r2, [pc, #248]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005770:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005774:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8005776:	f7fb fdf7 	bl	8001368 <HAL_GetTick>
 800577a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800577c:	e008      	b.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800577e:	f7fb fdf3 	bl	8001368 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	2b02      	cmp	r3, #2
 800578a:	d901      	bls.n	8005790 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 800578c:	2303      	movs	r3, #3
 800578e:	e062      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8005790:	4b35      	ldr	r3, [pc, #212]	@ (8005868 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005798:	2b00      	cmp	r3, #0
 800579a:	d0f0      	beq.n	800577e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800579c:	4b31      	ldr	r3, [pc, #196]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800579e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057a4:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d02f      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x160>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	68db      	ldr	r3, [r3, #12]
 80057b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80057b4:	693a      	ldr	r2, [r7, #16]
 80057b6:	429a      	cmp	r2, r3
 80057b8:	d028      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80057ba:	4b2a      	ldr	r3, [pc, #168]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80057c2:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80057c4:	4b29      	ldr	r3, [pc, #164]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057c6:	2201      	movs	r2, #1
 80057c8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80057ca:	4b28      	ldr	r3, [pc, #160]	@ (800586c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80057d0:	4a24      	ldr	r2, [pc, #144]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d2:	693b      	ldr	r3, [r7, #16]
 80057d4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80057d6:	4b23      	ldr	r3, [pc, #140]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80057d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b01      	cmp	r3, #1
 80057e0:	d114      	bne.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80057e2:	f7fb fdc1 	bl	8001368 <HAL_GetTick>
 80057e6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80057e8:	e00a      	b.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80057ea:	f7fb fdbd 	bl	8001368 <HAL_GetTick>
 80057ee:	4602      	mov	r2, r0
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	1ad3      	subs	r3, r2, r3
 80057f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80057f8:	4293      	cmp	r3, r2
 80057fa:	d901      	bls.n	8005800 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80057fc:	2303      	movs	r3, #3
 80057fe:	e02a      	b.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005800:	4b18      	ldr	r3, [pc, #96]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005802:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005804:	f003 0302 	and.w	r3, r3, #2
 8005808:	2b00      	cmp	r3, #0
 800580a:	d0ee      	beq.n	80057ea <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	68db      	ldr	r3, [r3, #12]
 8005810:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005814:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005818:	d10d      	bne.n	8005836 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800581a:	4b12      	ldr	r3, [pc, #72]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800582a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800582e:	490d      	ldr	r1, [pc, #52]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005830:	4313      	orrs	r3, r2
 8005832:	608b      	str	r3, [r1, #8]
 8005834:	e005      	b.n	8005842 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8005836:	4b0b      	ldr	r3, [pc, #44]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005838:	689b      	ldr	r3, [r3, #8]
 800583a:	4a0a      	ldr	r2, [pc, #40]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800583c:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005840:	6093      	str	r3, [r2, #8]
 8005842:	4b08      	ldr	r3, [pc, #32]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005844:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	68db      	ldr	r3, [r3, #12]
 800584a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800584e:	4905      	ldr	r1, [pc, #20]	@ (8005864 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005850:	4313      	orrs	r3, r2
 8005852:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	3718      	adds	r7, #24
 800585a:	46bd      	mov	sp, r7
 800585c:	bd80      	pop	{r7, pc}
 800585e:	bf00      	nop
 8005860:	42470068 	.word	0x42470068
 8005864:	40023800 	.word	0x40023800
 8005868:	40007000 	.word	0x40007000
 800586c:	42470e40 	.word	0x42470e40

08005870 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005870:	b480      	push	{r7}
 8005872:	b087      	sub	sp, #28
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8005878:	2300      	movs	r3, #0
 800587a:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005880:	2300      	movs	r3, #0
 8005882:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005884:	2300      	movs	r3, #0
 8005886:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	2b01      	cmp	r3, #1
 800588c:	d13f      	bne.n	800590e <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
    case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 800588e:	4b24      	ldr	r3, [pc, #144]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005896:	60fb      	str	r3, [r7, #12]
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	2b00      	cmp	r3, #0
 800589c:	d006      	beq.n	80058ac <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80058a4:	d12f      	bne.n	8005906 <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
        case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80058a6:	4b1f      	ldr	r3, [pc, #124]	@ (8005924 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80058a8:	617b      	str	r3, [r7, #20]
          break;
 80058aa:	e02f      	b.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80058ac:	4b1c      	ldr	r3, [pc, #112]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80058b4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80058b8:	d108      	bne.n	80058cc <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058ba:	4b19      	ldr	r3, [pc, #100]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058bc:	685b      	ldr	r3, [r3, #4]
 80058be:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058c2:	4a19      	ldr	r2, [pc, #100]	@ (8005928 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80058c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80058c8:	613b      	str	r3, [r7, #16]
 80058ca:	e007      	b.n	80058dc <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80058cc:	4b14      	ldr	r3, [pc, #80]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80058d4:	4a15      	ldr	r2, [pc, #84]	@ (800592c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80058d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80058da:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80058dc:	4b10      	ldr	r3, [pc, #64]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058e2:	099b      	lsrs	r3, r3, #6
 80058e4:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80058e8:	693b      	ldr	r3, [r7, #16]
 80058ea:	fb02 f303 	mul.w	r3, r2, r3
 80058ee:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput / (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 80058f0:	4b0b      	ldr	r3, [pc, #44]	@ (8005920 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80058f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80058f6:	0f1b      	lsrs	r3, r3, #28
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005902:	617b      	str	r3, [r7, #20]
          break;
 8005904:	e002      	b.n	800590c <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
        default:
        {
          frequency = 0U;
 8005906:	2300      	movs	r3, #0
 8005908:	617b      	str	r3, [r7, #20]
          break;
 800590a:	bf00      	nop
        }
      }
      break;
 800590c:	e000      	b.n	8005910 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
    default:
    {
      break;
 800590e:	bf00      	nop
    }
  }
  return frequency;
 8005910:	697b      	ldr	r3, [r7, #20]
}
 8005912:	4618      	mov	r0, r3
 8005914:	371c      	adds	r7, #28
 8005916:	46bd      	mov	sp, r7
 8005918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800591c:	4770      	bx	lr
 800591e:	bf00      	nop
 8005920:	40023800 	.word	0x40023800
 8005924:	00bb8000 	.word	0x00bb8000
 8005928:	007a1200 	.word	0x007a1200
 800592c:	00f42400 	.word	0x00f42400

08005930 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005930:	b580      	push	{r7, lr}
 8005932:	b082      	sub	sp, #8
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2b00      	cmp	r3, #0
 800593c:	d101      	bne.n	8005942 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800593e:	2301      	movs	r3, #1
 8005940:	e07b      	b.n	8005a3a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005946:	2b00      	cmp	r3, #0
 8005948:	d108      	bne.n	800595c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005952:	d009      	beq.n	8005968 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	61da      	str	r2, [r3, #28]
 800595a:	e005      	b.n	8005968 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2200      	movs	r2, #0
 8005960:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2200      	movs	r2, #0
 8005966:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2200      	movs	r2, #0
 800596c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005974:	b2db      	uxtb	r3, r3
 8005976:	2b00      	cmp	r3, #0
 8005978:	d106      	bne.n	8005988 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2200      	movs	r2, #0
 800597e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005982:	6878      	ldr	r0, [r7, #4]
 8005984:	f7fb fa78 	bl	8000e78 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	681a      	ldr	r2, [r3, #0]
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800599e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	685b      	ldr	r3, [r3, #4]
 80059a4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80059b0:	431a      	orrs	r2, r3
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	68db      	ldr	r3, [r3, #12]
 80059b6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80059ba:	431a      	orrs	r2, r3
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	691b      	ldr	r3, [r3, #16]
 80059c0:	f003 0302 	and.w	r3, r3, #2
 80059c4:	431a      	orrs	r2, r3
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	695b      	ldr	r3, [r3, #20]
 80059ca:	f003 0301 	and.w	r3, r3, #1
 80059ce:	431a      	orrs	r2, r3
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	699b      	ldr	r3, [r3, #24]
 80059d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059d8:	431a      	orrs	r2, r3
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	69db      	ldr	r3, [r3, #28]
 80059de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80059e2:	431a      	orrs	r2, r3
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a1b      	ldr	r3, [r3, #32]
 80059e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ec:	ea42 0103 	orr.w	r1, r2, r3
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80059f4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	430a      	orrs	r2, r1
 80059fe:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	699b      	ldr	r3, [r3, #24]
 8005a04:	0c1b      	lsrs	r3, r3, #16
 8005a06:	f003 0104 	and.w	r1, r3, #4
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a0e:	f003 0210 	and.w	r2, r3, #16
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	430a      	orrs	r2, r1
 8005a18:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	69da      	ldr	r2, [r3, #28]
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005a28:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2200      	movs	r2, #0
 8005a2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2201      	movs	r2, #1
 8005a34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005a38:	2300      	movs	r3, #0
}
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	3708      	adds	r7, #8
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	bd80      	pop	{r7, pc}

08005a42 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005a42:	b580      	push	{r7, lr}
 8005a44:	b082      	sub	sp, #8
 8005a46:	af00      	add	r7, sp, #0
 8005a48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e041      	b.n	8005ad8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d106      	bne.n	8005a6e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	2200      	movs	r2, #0
 8005a64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005a68:	6878      	ldr	r0, [r7, #4]
 8005a6a:	f7fb fa4d 	bl	8000f08 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2202      	movs	r2, #2
 8005a72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681a      	ldr	r2, [r3, #0]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4619      	mov	r1, r3
 8005a80:	4610      	mov	r0, r2
 8005a82:	f000 fc61 	bl	8006348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2201      	movs	r2, #1
 8005a8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	2201      	movs	r2, #1
 8005a92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	2201      	movs	r2, #1
 8005a9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2201      	movs	r2, #1
 8005aa2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	2201      	movs	r2, #1
 8005ab2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2201      	movs	r2, #1
 8005aba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2201      	movs	r2, #1
 8005ac2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	2201      	movs	r2, #1
 8005aca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2201      	movs	r2, #1
 8005ad2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005ad6:	2300      	movs	r3, #0
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3708      	adds	r7, #8
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}

08005ae0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b085      	sub	sp, #20
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d001      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	e04e      	b.n	8005b96 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	2202      	movs	r2, #2
 8005afc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	68da      	ldr	r2, [r3, #12]
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	f042 0201 	orr.w	r2, r2, #1
 8005b0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	4a23      	ldr	r2, [pc, #140]	@ (8005ba4 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b16:	4293      	cmp	r3, r2
 8005b18:	d022      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005b22:	d01d      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	4a1f      	ldr	r2, [pc, #124]	@ (8005ba8 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b2a:	4293      	cmp	r3, r2
 8005b2c:	d018      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	4a1e      	ldr	r2, [pc, #120]	@ (8005bac <HAL_TIM_Base_Start_IT+0xcc>)
 8005b34:	4293      	cmp	r3, r2
 8005b36:	d013      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bb0 <HAL_TIM_Base_Start_IT+0xd0>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d00e      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	4a1b      	ldr	r2, [pc, #108]	@ (8005bb4 <HAL_TIM_Base_Start_IT+0xd4>)
 8005b48:	4293      	cmp	r3, r2
 8005b4a:	d009      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	4a19      	ldr	r2, [pc, #100]	@ (8005bb8 <HAL_TIM_Base_Start_IT+0xd8>)
 8005b52:	4293      	cmp	r3, r2
 8005b54:	d004      	beq.n	8005b60 <HAL_TIM_Base_Start_IT+0x80>
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a18      	ldr	r2, [pc, #96]	@ (8005bbc <HAL_TIM_Base_Start_IT+0xdc>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d111      	bne.n	8005b84 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	689b      	ldr	r3, [r3, #8]
 8005b66:	f003 0307 	and.w	r3, r3, #7
 8005b6a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d010      	beq.n	8005b94 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	681a      	ldr	r2, [r3, #0]
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f042 0201 	orr.w	r2, r2, #1
 8005b80:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b82:	e007      	b.n	8005b94 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f042 0201 	orr.w	r2, r2, #1
 8005b92:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b94:	2300      	movs	r3, #0
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr
 8005ba2:	bf00      	nop
 8005ba4:	40010000 	.word	0x40010000
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	40000800 	.word	0x40000800
 8005bb0:	40000c00 	.word	0x40000c00
 8005bb4:	40010400 	.word	0x40010400
 8005bb8:	40014000 	.word	0x40014000
 8005bbc:	40001800 	.word	0x40001800

08005bc0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b082      	sub	sp, #8
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e041      	b.n	8005c56 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005bd8:	b2db      	uxtb	r3, r3
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d106      	bne.n	8005bec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	2200      	movs	r2, #0
 8005be2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005be6:	6878      	ldr	r0, [r7, #4]
 8005be8:	f000 f839 	bl	8005c5e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2202      	movs	r2, #2
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	3304      	adds	r3, #4
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	4610      	mov	r0, r2
 8005c00:	f000 fba2 	bl	8006348 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	2201      	movs	r2, #1
 8005c08:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2201      	movs	r2, #1
 8005c10:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	2201      	movs	r2, #1
 8005c18:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2201      	movs	r2, #1
 8005c20:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	2201      	movs	r2, #1
 8005c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2201      	movs	r2, #1
 8005c30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2201      	movs	r2, #1
 8005c38:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2201      	movs	r2, #1
 8005c40:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2201      	movs	r2, #1
 8005c48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	2201      	movs	r2, #1
 8005c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8005c54:	2300      	movs	r3, #0
}
 8005c56:	4618      	mov	r0, r3
 8005c58:	3708      	adds	r7, #8
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005c5e:	b480      	push	{r7}
 8005c60:	b083      	sub	sp, #12
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005c66:	bf00      	nop
 8005c68:	370c      	adds	r7, #12
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
	...

08005c74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c74:	b580      	push	{r7, lr}
 8005c76:	b084      	sub	sp, #16
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
 8005c7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d109      	bne.n	8005c98 <HAL_TIM_PWM_Start+0x24>
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b01      	cmp	r3, #1
 8005c8e:	bf14      	ite	ne
 8005c90:	2301      	movne	r3, #1
 8005c92:	2300      	moveq	r3, #0
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	e022      	b.n	8005cde <HAL_TIM_PWM_Start+0x6a>
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	2b04      	cmp	r3, #4
 8005c9c:	d109      	bne.n	8005cb2 <HAL_TIM_PWM_Start+0x3e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b01      	cmp	r3, #1
 8005ca8:	bf14      	ite	ne
 8005caa:	2301      	movne	r3, #1
 8005cac:	2300      	moveq	r3, #0
 8005cae:	b2db      	uxtb	r3, r3
 8005cb0:	e015      	b.n	8005cde <HAL_TIM_PWM_Start+0x6a>
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	2b08      	cmp	r3, #8
 8005cb6:	d109      	bne.n	8005ccc <HAL_TIM_PWM_Start+0x58>
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8005cbe:	b2db      	uxtb	r3, r3
 8005cc0:	2b01      	cmp	r3, #1
 8005cc2:	bf14      	ite	ne
 8005cc4:	2301      	movne	r3, #1
 8005cc6:	2300      	moveq	r3, #0
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	e008      	b.n	8005cde <HAL_TIM_PWM_Start+0x6a>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	bf14      	ite	ne
 8005cd8:	2301      	movne	r3, #1
 8005cda:	2300      	moveq	r3, #0
 8005cdc:	b2db      	uxtb	r3, r3
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d001      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005ce2:	2301      	movs	r3, #1
 8005ce4:	e07c      	b.n	8005de0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d104      	bne.n	8005cf6 <HAL_TIM_PWM_Start+0x82>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	2202      	movs	r2, #2
 8005cf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8005cf4:	e013      	b.n	8005d1e <HAL_TIM_PWM_Start+0xaa>
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	2b04      	cmp	r3, #4
 8005cfa:	d104      	bne.n	8005d06 <HAL_TIM_PWM_Start+0x92>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2202      	movs	r2, #2
 8005d00:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8005d04:	e00b      	b.n	8005d1e <HAL_TIM_PWM_Start+0xaa>
 8005d06:	683b      	ldr	r3, [r7, #0]
 8005d08:	2b08      	cmp	r3, #8
 8005d0a:	d104      	bne.n	8005d16 <HAL_TIM_PWM_Start+0xa2>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8005d14:	e003      	b.n	8005d1e <HAL_TIM_PWM_Start+0xaa>
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2202      	movs	r2, #2
 8005d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2201      	movs	r2, #1
 8005d24:	6839      	ldr	r1, [r7, #0]
 8005d26:	4618      	mov	r0, r3
 8005d28:	f000 fe04 	bl	8006934 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	4a2d      	ldr	r2, [pc, #180]	@ (8005de8 <HAL_TIM_PWM_Start+0x174>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	d004      	beq.n	8005d40 <HAL_TIM_PWM_Start+0xcc>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	4a2c      	ldr	r2, [pc, #176]	@ (8005dec <HAL_TIM_PWM_Start+0x178>)
 8005d3c:	4293      	cmp	r3, r2
 8005d3e:	d101      	bne.n	8005d44 <HAL_TIM_PWM_Start+0xd0>
 8005d40:	2301      	movs	r3, #1
 8005d42:	e000      	b.n	8005d46 <HAL_TIM_PWM_Start+0xd2>
 8005d44:	2300      	movs	r3, #0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d007      	beq.n	8005d5a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005d58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	4a22      	ldr	r2, [pc, #136]	@ (8005de8 <HAL_TIM_PWM_Start+0x174>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d022      	beq.n	8005daa <HAL_TIM_PWM_Start+0x136>
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005d6c:	d01d      	beq.n	8005daa <HAL_TIM_PWM_Start+0x136>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	681b      	ldr	r3, [r3, #0]
 8005d72:	4a1f      	ldr	r2, [pc, #124]	@ (8005df0 <HAL_TIM_PWM_Start+0x17c>)
 8005d74:	4293      	cmp	r3, r2
 8005d76:	d018      	beq.n	8005daa <HAL_TIM_PWM_Start+0x136>
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4a1d      	ldr	r2, [pc, #116]	@ (8005df4 <HAL_TIM_PWM_Start+0x180>)
 8005d7e:	4293      	cmp	r3, r2
 8005d80:	d013      	beq.n	8005daa <HAL_TIM_PWM_Start+0x136>
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	4a1c      	ldr	r2, [pc, #112]	@ (8005df8 <HAL_TIM_PWM_Start+0x184>)
 8005d88:	4293      	cmp	r3, r2
 8005d8a:	d00e      	beq.n	8005daa <HAL_TIM_PWM_Start+0x136>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	4a16      	ldr	r2, [pc, #88]	@ (8005dec <HAL_TIM_PWM_Start+0x178>)
 8005d92:	4293      	cmp	r3, r2
 8005d94:	d009      	beq.n	8005daa <HAL_TIM_PWM_Start+0x136>
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	4a18      	ldr	r2, [pc, #96]	@ (8005dfc <HAL_TIM_PWM_Start+0x188>)
 8005d9c:	4293      	cmp	r3, r2
 8005d9e:	d004      	beq.n	8005daa <HAL_TIM_PWM_Start+0x136>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	4a16      	ldr	r2, [pc, #88]	@ (8005e00 <HAL_TIM_PWM_Start+0x18c>)
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d111      	bne.n	8005dce <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	689b      	ldr	r3, [r3, #8]
 8005db0:	f003 0307 	and.w	r3, r3, #7
 8005db4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db6:	68fb      	ldr	r3, [r7, #12]
 8005db8:	2b06      	cmp	r3, #6
 8005dba:	d010      	beq.n	8005dde <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	681b      	ldr	r3, [r3, #0]
 8005dc0:	681a      	ldr	r2, [r3, #0]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	f042 0201 	orr.w	r2, r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dcc:	e007      	b.n	8005dde <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	681a      	ldr	r2, [r3, #0]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f042 0201 	orr.w	r2, r2, #1
 8005ddc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005dde:	2300      	movs	r3, #0
}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3710      	adds	r7, #16
 8005de4:	46bd      	mov	sp, r7
 8005de6:	bd80      	pop	{r7, pc}
 8005de8:	40010000 	.word	0x40010000
 8005dec:	40010400 	.word	0x40010400
 8005df0:	40000400 	.word	0x40000400
 8005df4:	40000800 	.word	0x40000800
 8005df8:	40000c00 	.word	0x40000c00
 8005dfc:	40014000 	.word	0x40014000
 8005e00:	40001800 	.word	0x40001800

08005e04 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b084      	sub	sp, #16
 8005e08:	af00      	add	r7, sp, #0
 8005e0a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	68db      	ldr	r3, [r3, #12]
 8005e12:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	691b      	ldr	r3, [r3, #16]
 8005e1a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005e1c:	68bb      	ldr	r3, [r7, #8]
 8005e1e:	f003 0302 	and.w	r3, r3, #2
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d020      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	f003 0302 	and.w	r3, r3, #2
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d01b      	beq.n	8005e68 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	f06f 0202 	mvn.w	r2, #2
 8005e38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	699b      	ldr	r3, [r3, #24]
 8005e46:	f003 0303 	and.w	r3, r3, #3
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d003      	beq.n	8005e56 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 fa5b 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 8005e54:	e005      	b.n	8005e62 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e56:	6878      	ldr	r0, [r7, #4]
 8005e58:	f000 fa4d 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 fa5e 	bl	800631e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2200      	movs	r2, #0
 8005e66:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	f003 0304 	and.w	r3, r3, #4
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d020      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f003 0304 	and.w	r3, r3, #4
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d01b      	beq.n	8005eb4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f06f 0204 	mvn.w	r2, #4
 8005e84:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2202      	movs	r2, #2
 8005e8a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d003      	beq.n	8005ea2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e9a:	6878      	ldr	r0, [r7, #4]
 8005e9c:	f000 fa35 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 8005ea0:	e005      	b.n	8005eae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 fa27 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fa38 	bl	800631e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2200      	movs	r2, #0
 8005eb2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005eb4:	68bb      	ldr	r3, [r7, #8]
 8005eb6:	f003 0308 	and.w	r3, r3, #8
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d020      	beq.n	8005f00 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	f003 0308 	and.w	r3, r3, #8
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d01b      	beq.n	8005f00 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	f06f 0208 	mvn.w	r2, #8
 8005ed0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2204      	movs	r2, #4
 8005ed6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	69db      	ldr	r3, [r3, #28]
 8005ede:	f003 0303 	and.w	r3, r3, #3
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d003      	beq.n	8005eee <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fa0f 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 8005eec:	e005      	b.n	8005efa <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	f000 fa01 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ef4:	6878      	ldr	r0, [r7, #4]
 8005ef6:	f000 fa12 	bl	800631e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	f003 0310 	and.w	r3, r3, #16
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d020      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	f003 0310 	and.w	r3, r3, #16
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d01b      	beq.n	8005f4c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f06f 0210 	mvn.w	r2, #16
 8005f1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2208      	movs	r2, #8
 8005f22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	69db      	ldr	r3, [r3, #28]
 8005f2a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d003      	beq.n	8005f3a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f9e9 	bl	800630a <HAL_TIM_IC_CaptureCallback>
 8005f38:	e005      	b.n	8005f46 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f3a:	6878      	ldr	r0, [r7, #4]
 8005f3c:	f000 f9db 	bl	80062f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f40:	6878      	ldr	r0, [r7, #4]
 8005f42:	f000 f9ec 	bl	800631e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2200      	movs	r2, #0
 8005f4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005f4c:	68bb      	ldr	r3, [r7, #8]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00c      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d007      	beq.n	8005f70 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f06f 0201 	mvn.w	r2, #1
 8005f68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6a:	6878      	ldr	r0, [r7, #4]
 8005f6c:	f7fa fe84 	bl	8000c78 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d00c      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d007      	beq.n	8005f94 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8005f8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f8e:	6878      	ldr	r0, [r7, #4]
 8005f90:	f000 fdce 	bl	8006b30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d00c      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d007      	beq.n	8005fb8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005fb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005fb2:	6878      	ldr	r0, [r7, #4]
 8005fb4:	f000 f9bd 	bl	8006332 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005fb8:	68bb      	ldr	r3, [r7, #8]
 8005fba:	f003 0320 	and.w	r3, r3, #32
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00c      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f003 0320 	and.w	r3, r3, #32
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d007      	beq.n	8005fdc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f06f 0220 	mvn.w	r2, #32
 8005fd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fda0 	bl	8006b1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005fdc:	bf00      	nop
 8005fde:	3710      	adds	r7, #16
 8005fe0:	46bd      	mov	sp, r7
 8005fe2:	bd80      	pop	{r7, pc}

08005fe4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b086      	sub	sp, #24
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	60f8      	str	r0, [r7, #12]
 8005fec:	60b9      	str	r1, [r7, #8]
 8005fee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d101      	bne.n	8006002 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005ffe:	2302      	movs	r3, #2
 8006000:	e0ae      	b.n	8006160 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	2201      	movs	r2, #1
 8006006:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2b0c      	cmp	r3, #12
 800600e:	f200 809f 	bhi.w	8006150 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006012:	a201      	add	r2, pc, #4	@ (adr r2, 8006018 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006014:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006018:	0800604d 	.word	0x0800604d
 800601c:	08006151 	.word	0x08006151
 8006020:	08006151 	.word	0x08006151
 8006024:	08006151 	.word	0x08006151
 8006028:	0800608d 	.word	0x0800608d
 800602c:	08006151 	.word	0x08006151
 8006030:	08006151 	.word	0x08006151
 8006034:	08006151 	.word	0x08006151
 8006038:	080060cf 	.word	0x080060cf
 800603c:	08006151 	.word	0x08006151
 8006040:	08006151 	.word	0x08006151
 8006044:	08006151 	.word	0x08006151
 8006048:	0800610f 	.word	0x0800610f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	68b9      	ldr	r1, [r7, #8]
 8006052:	4618      	mov	r0, r3
 8006054:	f000 fa24 	bl	80064a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	699a      	ldr	r2, [r3, #24]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f042 0208 	orr.w	r2, r2, #8
 8006066:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	699a      	ldr	r2, [r3, #24]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f022 0204 	bic.w	r2, r2, #4
 8006076:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6999      	ldr	r1, [r3, #24]
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	691a      	ldr	r2, [r3, #16]
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	430a      	orrs	r2, r1
 8006088:	619a      	str	r2, [r3, #24]
      break;
 800608a:	e064      	b.n	8006156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	68b9      	ldr	r1, [r7, #8]
 8006092:	4618      	mov	r0, r3
 8006094:	f000 fa74 	bl	8006580 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	699a      	ldr	r2, [r3, #24]
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80060a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	699a      	ldr	r2, [r3, #24]
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	6999      	ldr	r1, [r3, #24]
 80060be:	68bb      	ldr	r3, [r7, #8]
 80060c0:	691b      	ldr	r3, [r3, #16]
 80060c2:	021a      	lsls	r2, r3, #8
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	430a      	orrs	r2, r1
 80060ca:	619a      	str	r2, [r3, #24]
      break;
 80060cc:	e043      	b.n	8006156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681b      	ldr	r3, [r3, #0]
 80060d2:	68b9      	ldr	r1, [r7, #8]
 80060d4:	4618      	mov	r0, r3
 80060d6:	f000 fac9 	bl	800666c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	69da      	ldr	r2, [r3, #28]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f042 0208 	orr.w	r2, r2, #8
 80060e8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	69da      	ldr	r2, [r3, #28]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f022 0204 	bic.w	r2, r2, #4
 80060f8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	69d9      	ldr	r1, [r3, #28]
 8006100:	68bb      	ldr	r3, [r7, #8]
 8006102:	691a      	ldr	r2, [r3, #16]
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	430a      	orrs	r2, r1
 800610a:	61da      	str	r2, [r3, #28]
      break;
 800610c:	e023      	b.n	8006156 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68b9      	ldr	r1, [r7, #8]
 8006114:	4618      	mov	r0, r3
 8006116:	f000 fb1d 	bl	8006754 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	69da      	ldr	r2, [r3, #28]
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006128:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69da      	ldr	r2, [r3, #28]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	69d9      	ldr	r1, [r3, #28]
 8006140:	68bb      	ldr	r3, [r7, #8]
 8006142:	691b      	ldr	r3, [r3, #16]
 8006144:	021a      	lsls	r2, r3, #8
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	430a      	orrs	r2, r1
 800614c:	61da      	str	r2, [r3, #28]
      break;
 800614e:	e002      	b.n	8006156 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006150:	2301      	movs	r3, #1
 8006152:	75fb      	strb	r3, [r7, #23]
      break;
 8006154:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	2200      	movs	r2, #0
 800615a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800615e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006160:	4618      	mov	r0, r3
 8006162:	3718      	adds	r7, #24
 8006164:	46bd      	mov	sp, r7
 8006166:	bd80      	pop	{r7, pc}

08006168 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006168:	b580      	push	{r7, lr}
 800616a:	b084      	sub	sp, #16
 800616c:	af00      	add	r7, sp, #0
 800616e:	6078      	str	r0, [r7, #4]
 8006170:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006172:	2300      	movs	r3, #0
 8006174:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800617c:	2b01      	cmp	r3, #1
 800617e:	d101      	bne.n	8006184 <HAL_TIM_ConfigClockSource+0x1c>
 8006180:	2302      	movs	r3, #2
 8006182:	e0b4      	b.n	80062ee <HAL_TIM_ConfigClockSource+0x186>
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2201      	movs	r2, #1
 8006188:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2202      	movs	r2, #2
 8006190:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800619c:	68bb      	ldr	r3, [r7, #8]
 800619e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80061a2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80061a4:	68bb      	ldr	r3, [r7, #8]
 80061a6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80061aa:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	68ba      	ldr	r2, [r7, #8]
 80061b2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061bc:	d03e      	beq.n	800623c <HAL_TIM_ConfigClockSource+0xd4>
 80061be:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80061c2:	f200 8087 	bhi.w	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 80061c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061ca:	f000 8086 	beq.w	80062da <HAL_TIM_ConfigClockSource+0x172>
 80061ce:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80061d2:	d87f      	bhi.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 80061d4:	2b70      	cmp	r3, #112	@ 0x70
 80061d6:	d01a      	beq.n	800620e <HAL_TIM_ConfigClockSource+0xa6>
 80061d8:	2b70      	cmp	r3, #112	@ 0x70
 80061da:	d87b      	bhi.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 80061dc:	2b60      	cmp	r3, #96	@ 0x60
 80061de:	d050      	beq.n	8006282 <HAL_TIM_ConfigClockSource+0x11a>
 80061e0:	2b60      	cmp	r3, #96	@ 0x60
 80061e2:	d877      	bhi.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 80061e4:	2b50      	cmp	r3, #80	@ 0x50
 80061e6:	d03c      	beq.n	8006262 <HAL_TIM_ConfigClockSource+0xfa>
 80061e8:	2b50      	cmp	r3, #80	@ 0x50
 80061ea:	d873      	bhi.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 80061ec:	2b40      	cmp	r3, #64	@ 0x40
 80061ee:	d058      	beq.n	80062a2 <HAL_TIM_ConfigClockSource+0x13a>
 80061f0:	2b40      	cmp	r3, #64	@ 0x40
 80061f2:	d86f      	bhi.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 80061f4:	2b30      	cmp	r3, #48	@ 0x30
 80061f6:	d064      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x15a>
 80061f8:	2b30      	cmp	r3, #48	@ 0x30
 80061fa:	d86b      	bhi.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 80061fc:	2b20      	cmp	r3, #32
 80061fe:	d060      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006200:	2b20      	cmp	r3, #32
 8006202:	d867      	bhi.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
 8006204:	2b00      	cmp	r3, #0
 8006206:	d05c      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x15a>
 8006208:	2b10      	cmp	r3, #16
 800620a:	d05a      	beq.n	80062c2 <HAL_TIM_ConfigClockSource+0x15a>
 800620c:	e062      	b.n	80062d4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800621e:	f000 fb69 	bl	80068f4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800622a:	68bb      	ldr	r3, [r7, #8]
 800622c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8006230:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	68ba      	ldr	r2, [r7, #8]
 8006238:	609a      	str	r2, [r3, #8]
      break;
 800623a:	e04f      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006240:	683b      	ldr	r3, [r7, #0]
 8006242:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006248:	683b      	ldr	r3, [r7, #0]
 800624a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800624c:	f000 fb52 	bl	80068f4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	689a      	ldr	r2, [r3, #8]
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800625e:	609a      	str	r2, [r3, #8]
      break;
 8006260:	e03c      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800626a:	683b      	ldr	r3, [r7, #0]
 800626c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800626e:	461a      	mov	r2, r3
 8006270:	f000 fac6 	bl	8006800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2150      	movs	r1, #80	@ 0x50
 800627a:	4618      	mov	r0, r3
 800627c:	f000 fb1f 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 8006280:	e02c      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006286:	683b      	ldr	r3, [r7, #0]
 8006288:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800628e:	461a      	mov	r2, r3
 8006290:	f000 fae5 	bl	800685e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	2160      	movs	r1, #96	@ 0x60
 800629a:	4618      	mov	r0, r3
 800629c:	f000 fb0f 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 80062a0:	e01c      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80062a6:	683b      	ldr	r3, [r7, #0]
 80062a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80062aa:	683b      	ldr	r3, [r7, #0]
 80062ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80062ae:	461a      	mov	r2, r3
 80062b0:	f000 faa6 	bl	8006800 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2140      	movs	r1, #64	@ 0x40
 80062ba:	4618      	mov	r0, r3
 80062bc:	f000 faff 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 80062c0:	e00c      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	683b      	ldr	r3, [r7, #0]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	4619      	mov	r1, r3
 80062cc:	4610      	mov	r0, r2
 80062ce:	f000 faf6 	bl	80068be <TIM_ITRx_SetConfig>
      break;
 80062d2:	e003      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80062d4:	2301      	movs	r3, #1
 80062d6:	73fb      	strb	r3, [r7, #15]
      break;
 80062d8:	e000      	b.n	80062dc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80062da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	2201      	movs	r2, #1
 80062e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80062ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80062ee:	4618      	mov	r0, r3
 80062f0:	3710      	adds	r7, #16
 80062f2:	46bd      	mov	sp, r7
 80062f4:	bd80      	pop	{r7, pc}

080062f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80062f6:	b480      	push	{r7}
 80062f8:	b083      	sub	sp, #12
 80062fa:	af00      	add	r7, sp, #0
 80062fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80062fe:	bf00      	nop
 8006300:	370c      	adds	r7, #12
 8006302:	46bd      	mov	sp, r7
 8006304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006308:	4770      	bx	lr

0800630a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800630a:	b480      	push	{r7}
 800630c:	b083      	sub	sp, #12
 800630e:	af00      	add	r7, sp, #0
 8006310:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006312:	bf00      	nop
 8006314:	370c      	adds	r7, #12
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr

0800631e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800631e:	b480      	push	{r7}
 8006320:	b083      	sub	sp, #12
 8006322:	af00      	add	r7, sp, #0
 8006324:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006326:	bf00      	nop
 8006328:	370c      	adds	r7, #12
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr

08006332 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006332:	b480      	push	{r7}
 8006334:	b083      	sub	sp, #12
 8006336:	af00      	add	r7, sp, #0
 8006338:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800633a:	bf00      	nop
 800633c:	370c      	adds	r7, #12
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
	...

08006348 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006348:	b480      	push	{r7}
 800634a:	b085      	sub	sp, #20
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
 8006350:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	681b      	ldr	r3, [r3, #0]
 8006356:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a46      	ldr	r2, [pc, #280]	@ (8006474 <TIM_Base_SetConfig+0x12c>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d013      	beq.n	8006388 <TIM_Base_SetConfig+0x40>
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006366:	d00f      	beq.n	8006388 <TIM_Base_SetConfig+0x40>
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	4a43      	ldr	r2, [pc, #268]	@ (8006478 <TIM_Base_SetConfig+0x130>)
 800636c:	4293      	cmp	r3, r2
 800636e:	d00b      	beq.n	8006388 <TIM_Base_SetConfig+0x40>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	4a42      	ldr	r2, [pc, #264]	@ (800647c <TIM_Base_SetConfig+0x134>)
 8006374:	4293      	cmp	r3, r2
 8006376:	d007      	beq.n	8006388 <TIM_Base_SetConfig+0x40>
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	4a41      	ldr	r2, [pc, #260]	@ (8006480 <TIM_Base_SetConfig+0x138>)
 800637c:	4293      	cmp	r3, r2
 800637e:	d003      	beq.n	8006388 <TIM_Base_SetConfig+0x40>
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	4a40      	ldr	r2, [pc, #256]	@ (8006484 <TIM_Base_SetConfig+0x13c>)
 8006384:	4293      	cmp	r3, r2
 8006386:	d108      	bne.n	800639a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800638e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006390:	683b      	ldr	r3, [r7, #0]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	68fa      	ldr	r2, [r7, #12]
 8006396:	4313      	orrs	r3, r2
 8006398:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	4a35      	ldr	r2, [pc, #212]	@ (8006474 <TIM_Base_SetConfig+0x12c>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	d02b      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80063a8:	d027      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	4a32      	ldr	r2, [pc, #200]	@ (8006478 <TIM_Base_SetConfig+0x130>)
 80063ae:	4293      	cmp	r3, r2
 80063b0:	d023      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	4a31      	ldr	r2, [pc, #196]	@ (800647c <TIM_Base_SetConfig+0x134>)
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d01f      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	4a30      	ldr	r2, [pc, #192]	@ (8006480 <TIM_Base_SetConfig+0x138>)
 80063be:	4293      	cmp	r3, r2
 80063c0:	d01b      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	4a2f      	ldr	r2, [pc, #188]	@ (8006484 <TIM_Base_SetConfig+0x13c>)
 80063c6:	4293      	cmp	r3, r2
 80063c8:	d017      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	4a2e      	ldr	r2, [pc, #184]	@ (8006488 <TIM_Base_SetConfig+0x140>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d013      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	4a2d      	ldr	r2, [pc, #180]	@ (800648c <TIM_Base_SetConfig+0x144>)
 80063d6:	4293      	cmp	r3, r2
 80063d8:	d00f      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	4a2c      	ldr	r2, [pc, #176]	@ (8006490 <TIM_Base_SetConfig+0x148>)
 80063de:	4293      	cmp	r3, r2
 80063e0:	d00b      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	4a2b      	ldr	r2, [pc, #172]	@ (8006494 <TIM_Base_SetConfig+0x14c>)
 80063e6:	4293      	cmp	r3, r2
 80063e8:	d007      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	4a2a      	ldr	r2, [pc, #168]	@ (8006498 <TIM_Base_SetConfig+0x150>)
 80063ee:	4293      	cmp	r3, r2
 80063f0:	d003      	beq.n	80063fa <TIM_Base_SetConfig+0xb2>
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	4a29      	ldr	r2, [pc, #164]	@ (800649c <TIM_Base_SetConfig+0x154>)
 80063f6:	4293      	cmp	r3, r2
 80063f8:	d108      	bne.n	800640c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8006400:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4313      	orrs	r3, r2
 800640a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	4313      	orrs	r3, r2
 8006418:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	689a      	ldr	r2, [r3, #8]
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006428:	683b      	ldr	r3, [r7, #0]
 800642a:	681a      	ldr	r2, [r3, #0]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	4a10      	ldr	r2, [pc, #64]	@ (8006474 <TIM_Base_SetConfig+0x12c>)
 8006434:	4293      	cmp	r3, r2
 8006436:	d003      	beq.n	8006440 <TIM_Base_SetConfig+0xf8>
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	4a12      	ldr	r2, [pc, #72]	@ (8006484 <TIM_Base_SetConfig+0x13c>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d103      	bne.n	8006448 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	691a      	ldr	r2, [r3, #16]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2201      	movs	r2, #1
 800644c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	691b      	ldr	r3, [r3, #16]
 8006452:	f003 0301 	and.w	r3, r3, #1
 8006456:	2b01      	cmp	r3, #1
 8006458:	d105      	bne.n	8006466 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	691b      	ldr	r3, [r3, #16]
 800645e:	f023 0201 	bic.w	r2, r3, #1
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	611a      	str	r2, [r3, #16]
  }
}
 8006466:	bf00      	nop
 8006468:	3714      	adds	r7, #20
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010000 	.word	0x40010000
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40010400 	.word	0x40010400
 8006488:	40014000 	.word	0x40014000
 800648c:	40014400 	.word	0x40014400
 8006490:	40014800 	.word	0x40014800
 8006494:	40001800 	.word	0x40001800
 8006498:	40001c00 	.word	0x40001c00
 800649c:	40002000 	.word	0x40002000

080064a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80064a0:	b480      	push	{r7}
 80064a2:	b087      	sub	sp, #28
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
 80064a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6a1b      	ldr	r3, [r3, #32]
 80064ae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	6a1b      	ldr	r3, [r3, #32]
 80064b4:	f023 0201 	bic.w	r2, r3, #1
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	685b      	ldr	r3, [r3, #4]
 80064c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	699b      	ldr	r3, [r3, #24]
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80064ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	f023 0303 	bic.w	r3, r3, #3
 80064d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	68fa      	ldr	r2, [r7, #12]
 80064de:	4313      	orrs	r3, r2
 80064e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f023 0302 	bic.w	r3, r3, #2
 80064e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80064ea:	683b      	ldr	r3, [r7, #0]
 80064ec:	689b      	ldr	r3, [r3, #8]
 80064ee:	697a      	ldr	r2, [r7, #20]
 80064f0:	4313      	orrs	r3, r2
 80064f2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	4a20      	ldr	r2, [pc, #128]	@ (8006578 <TIM_OC1_SetConfig+0xd8>)
 80064f8:	4293      	cmp	r3, r2
 80064fa:	d003      	beq.n	8006504 <TIM_OC1_SetConfig+0x64>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	4a1f      	ldr	r2, [pc, #124]	@ (800657c <TIM_OC1_SetConfig+0xdc>)
 8006500:	4293      	cmp	r3, r2
 8006502:	d10c      	bne.n	800651e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	f023 0308 	bic.w	r3, r3, #8
 800650a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800650c:	683b      	ldr	r3, [r7, #0]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	697a      	ldr	r2, [r7, #20]
 8006512:	4313      	orrs	r3, r2
 8006514:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f023 0304 	bic.w	r3, r3, #4
 800651c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	4a15      	ldr	r2, [pc, #84]	@ (8006578 <TIM_OC1_SetConfig+0xd8>)
 8006522:	4293      	cmp	r3, r2
 8006524:	d003      	beq.n	800652e <TIM_OC1_SetConfig+0x8e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	4a14      	ldr	r2, [pc, #80]	@ (800657c <TIM_OC1_SetConfig+0xdc>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d111      	bne.n	8006552 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006534:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800653c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	693a      	ldr	r2, [r7, #16]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006548:	683b      	ldr	r3, [r7, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	693a      	ldr	r2, [r7, #16]
 800654e:	4313      	orrs	r3, r2
 8006550:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	693a      	ldr	r2, [r7, #16]
 8006556:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	685a      	ldr	r2, [r3, #4]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	697a      	ldr	r2, [r7, #20]
 800656a:	621a      	str	r2, [r3, #32]
}
 800656c:	bf00      	nop
 800656e:	371c      	adds	r7, #28
 8006570:	46bd      	mov	sp, r7
 8006572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006576:	4770      	bx	lr
 8006578:	40010000 	.word	0x40010000
 800657c:	40010400 	.word	0x40010400

08006580 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	6a1b      	ldr	r3, [r3, #32]
 8006594:	f023 0210 	bic.w	r2, r3, #16
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	699b      	ldr	r3, [r3, #24]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80065b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	021b      	lsls	r3, r3, #8
 80065be:	68fa      	ldr	r2, [r7, #12]
 80065c0:	4313      	orrs	r3, r2
 80065c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80065c4:	697b      	ldr	r3, [r7, #20]
 80065c6:	f023 0320 	bic.w	r3, r3, #32
 80065ca:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	011b      	lsls	r3, r3, #4
 80065d2:	697a      	ldr	r2, [r7, #20]
 80065d4:	4313      	orrs	r3, r2
 80065d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	4a22      	ldr	r2, [pc, #136]	@ (8006664 <TIM_OC2_SetConfig+0xe4>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d003      	beq.n	80065e8 <TIM_OC2_SetConfig+0x68>
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	4a21      	ldr	r2, [pc, #132]	@ (8006668 <TIM_OC2_SetConfig+0xe8>)
 80065e4:	4293      	cmp	r3, r2
 80065e6:	d10d      	bne.n	8006604 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80065f0:	683b      	ldr	r3, [r7, #0]
 80065f2:	68db      	ldr	r3, [r3, #12]
 80065f4:	011b      	lsls	r3, r3, #4
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4313      	orrs	r3, r2
 80065fa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006602:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	4a17      	ldr	r2, [pc, #92]	@ (8006664 <TIM_OC2_SetConfig+0xe4>)
 8006608:	4293      	cmp	r3, r2
 800660a:	d003      	beq.n	8006614 <TIM_OC2_SetConfig+0x94>
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	4a16      	ldr	r2, [pc, #88]	@ (8006668 <TIM_OC2_SetConfig+0xe8>)
 8006610:	4293      	cmp	r3, r2
 8006612:	d113      	bne.n	800663c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800661a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800661c:	693b      	ldr	r3, [r7, #16]
 800661e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8006622:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006624:	683b      	ldr	r3, [r7, #0]
 8006626:	695b      	ldr	r3, [r3, #20]
 8006628:	009b      	lsls	r3, r3, #2
 800662a:	693a      	ldr	r2, [r7, #16]
 800662c:	4313      	orrs	r3, r2
 800662e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	699b      	ldr	r3, [r3, #24]
 8006634:	009b      	lsls	r3, r3, #2
 8006636:	693a      	ldr	r2, [r7, #16]
 8006638:	4313      	orrs	r3, r2
 800663a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	693a      	ldr	r2, [r7, #16]
 8006640:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	68fa      	ldr	r2, [r7, #12]
 8006646:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006648:	683b      	ldr	r3, [r7, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	697a      	ldr	r2, [r7, #20]
 8006654:	621a      	str	r2, [r3, #32]
}
 8006656:	bf00      	nop
 8006658:	371c      	adds	r7, #28
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40010000 	.word	0x40010000
 8006668:	40010400 	.word	0x40010400

0800666c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	6a1b      	ldr	r3, [r3, #32]
 8006680:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800669a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f023 0303 	bic.w	r3, r3, #3
 80066a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	68fa      	ldr	r2, [r7, #12]
 80066aa:	4313      	orrs	r3, r2
 80066ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80066b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80066b6:	683b      	ldr	r3, [r7, #0]
 80066b8:	689b      	ldr	r3, [r3, #8]
 80066ba:	021b      	lsls	r3, r3, #8
 80066bc:	697a      	ldr	r2, [r7, #20]
 80066be:	4313      	orrs	r3, r2
 80066c0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	4a21      	ldr	r2, [pc, #132]	@ (800674c <TIM_OC3_SetConfig+0xe0>)
 80066c6:	4293      	cmp	r3, r2
 80066c8:	d003      	beq.n	80066d2 <TIM_OC3_SetConfig+0x66>
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	4a20      	ldr	r2, [pc, #128]	@ (8006750 <TIM_OC3_SetConfig+0xe4>)
 80066ce:	4293      	cmp	r3, r2
 80066d0:	d10d      	bne.n	80066ee <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80066d2:	697b      	ldr	r3, [r7, #20]
 80066d4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80066d8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80066da:	683b      	ldr	r3, [r7, #0]
 80066dc:	68db      	ldr	r3, [r3, #12]
 80066de:	021b      	lsls	r3, r3, #8
 80066e0:	697a      	ldr	r2, [r7, #20]
 80066e2:	4313      	orrs	r3, r2
 80066e4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80066ec:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	4a16      	ldr	r2, [pc, #88]	@ (800674c <TIM_OC3_SetConfig+0xe0>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d003      	beq.n	80066fe <TIM_OC3_SetConfig+0x92>
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	4a15      	ldr	r2, [pc, #84]	@ (8006750 <TIM_OC3_SetConfig+0xe4>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d113      	bne.n	8006726 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80066fe:	693b      	ldr	r3, [r7, #16]
 8006700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006706:	693b      	ldr	r3, [r7, #16]
 8006708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800670c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800670e:	683b      	ldr	r3, [r7, #0]
 8006710:	695b      	ldr	r3, [r3, #20]
 8006712:	011b      	lsls	r3, r3, #4
 8006714:	693a      	ldr	r2, [r7, #16]
 8006716:	4313      	orrs	r3, r2
 8006718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	699b      	ldr	r3, [r3, #24]
 800671e:	011b      	lsls	r3, r3, #4
 8006720:	693a      	ldr	r2, [r7, #16]
 8006722:	4313      	orrs	r3, r2
 8006724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	693a      	ldr	r2, [r7, #16]
 800672a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	68fa      	ldr	r2, [r7, #12]
 8006730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006732:	683b      	ldr	r3, [r7, #0]
 8006734:	685a      	ldr	r2, [r3, #4]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	697a      	ldr	r2, [r7, #20]
 800673e:	621a      	str	r2, [r3, #32]
}
 8006740:	bf00      	nop
 8006742:	371c      	adds	r7, #28
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	40010000 	.word	0x40010000
 8006750:	40010400 	.word	0x40010400

08006754 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006754:	b480      	push	{r7}
 8006756:	b087      	sub	sp, #28
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
 800675c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	6a1b      	ldr	r3, [r3, #32]
 8006762:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	6a1b      	ldr	r3, [r3, #32]
 8006768:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	685b      	ldr	r3, [r3, #4]
 8006774:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	69db      	ldr	r3, [r3, #28]
 800677a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8006782:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800678a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	68fa      	ldr	r2, [r7, #12]
 8006794:	4313      	orrs	r3, r2
 8006796:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006798:	693b      	ldr	r3, [r7, #16]
 800679a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800679e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80067a0:	683b      	ldr	r3, [r7, #0]
 80067a2:	689b      	ldr	r3, [r3, #8]
 80067a4:	031b      	lsls	r3, r3, #12
 80067a6:	693a      	ldr	r2, [r7, #16]
 80067a8:	4313      	orrs	r3, r2
 80067aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	4a12      	ldr	r2, [pc, #72]	@ (80067f8 <TIM_OC4_SetConfig+0xa4>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d003      	beq.n	80067bc <TIM_OC4_SetConfig+0x68>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4a11      	ldr	r2, [pc, #68]	@ (80067fc <TIM_OC4_SetConfig+0xa8>)
 80067b8:	4293      	cmp	r3, r2
 80067ba:	d109      	bne.n	80067d0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80067c2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80067c4:	683b      	ldr	r3, [r7, #0]
 80067c6:	695b      	ldr	r3, [r3, #20]
 80067c8:	019b      	lsls	r3, r3, #6
 80067ca:	697a      	ldr	r2, [r7, #20]
 80067cc:	4313      	orrs	r3, r2
 80067ce:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	697a      	ldr	r2, [r7, #20]
 80067d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	68fa      	ldr	r2, [r7, #12]
 80067da:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	685a      	ldr	r2, [r3, #4]
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	693a      	ldr	r2, [r7, #16]
 80067e8:	621a      	str	r2, [r3, #32]
}
 80067ea:	bf00      	nop
 80067ec:	371c      	adds	r7, #28
 80067ee:	46bd      	mov	sp, r7
 80067f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f4:	4770      	bx	lr
 80067f6:	bf00      	nop
 80067f8:	40010000 	.word	0x40010000
 80067fc:	40010400 	.word	0x40010400

08006800 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006800:	b480      	push	{r7}
 8006802:	b087      	sub	sp, #28
 8006804:	af00      	add	r7, sp, #0
 8006806:	60f8      	str	r0, [r7, #12]
 8006808:	60b9      	str	r1, [r7, #8]
 800680a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800680c:	68fb      	ldr	r3, [r7, #12]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6a1b      	ldr	r3, [r3, #32]
 8006816:	f023 0201 	bic.w	r2, r3, #1
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	699b      	ldr	r3, [r3, #24]
 8006822:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800682a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	011b      	lsls	r3, r3, #4
 8006830:	693a      	ldr	r2, [r7, #16]
 8006832:	4313      	orrs	r3, r2
 8006834:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006836:	697b      	ldr	r3, [r7, #20]
 8006838:	f023 030a 	bic.w	r3, r3, #10
 800683c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800683e:	697a      	ldr	r2, [r7, #20]
 8006840:	68bb      	ldr	r3, [r7, #8]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	693a      	ldr	r2, [r7, #16]
 800684a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	697a      	ldr	r2, [r7, #20]
 8006850:	621a      	str	r2, [r3, #32]
}
 8006852:	bf00      	nop
 8006854:	371c      	adds	r7, #28
 8006856:	46bd      	mov	sp, r7
 8006858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685c:	4770      	bx	lr

0800685e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800685e:	b480      	push	{r7}
 8006860:	b087      	sub	sp, #28
 8006862:	af00      	add	r7, sp, #0
 8006864:	60f8      	str	r0, [r7, #12]
 8006866:	60b9      	str	r1, [r7, #8]
 8006868:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	6a1b      	ldr	r3, [r3, #32]
 800686e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	6a1b      	ldr	r3, [r3, #32]
 8006874:	f023 0210 	bic.w	r2, r3, #16
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8006888:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	031b      	lsls	r3, r3, #12
 800688e:	693a      	ldr	r2, [r7, #16]
 8006890:	4313      	orrs	r3, r2
 8006892:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006894:	697b      	ldr	r3, [r7, #20]
 8006896:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800689a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800689c:	68bb      	ldr	r3, [r7, #8]
 800689e:	011b      	lsls	r3, r3, #4
 80068a0:	697a      	ldr	r2, [r7, #20]
 80068a2:	4313      	orrs	r3, r2
 80068a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	693a      	ldr	r2, [r7, #16]
 80068aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	697a      	ldr	r2, [r7, #20]
 80068b0:	621a      	str	r2, [r3, #32]
}
 80068b2:	bf00      	nop
 80068b4:	371c      	adds	r7, #28
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80068be:	b480      	push	{r7}
 80068c0:	b085      	sub	sp, #20
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
 80068c6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	689b      	ldr	r3, [r3, #8]
 80068cc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80068ce:	68fb      	ldr	r3, [r7, #12]
 80068d0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80068d4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	4313      	orrs	r3, r2
 80068dc:	f043 0307 	orr.w	r3, r3, #7
 80068e0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	609a      	str	r2, [r3, #8]
}
 80068e8:	bf00      	nop
 80068ea:	3714      	adds	r7, #20
 80068ec:	46bd      	mov	sp, r7
 80068ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068f2:	4770      	bx	lr

080068f4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b087      	sub	sp, #28
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	60f8      	str	r0, [r7, #12]
 80068fc:	60b9      	str	r1, [r7, #8]
 80068fe:	607a      	str	r2, [r7, #4]
 8006900:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800690e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	021a      	lsls	r2, r3, #8
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	431a      	orrs	r2, r3
 8006918:	68bb      	ldr	r3, [r7, #8]
 800691a:	4313      	orrs	r3, r2
 800691c:	697a      	ldr	r2, [r7, #20]
 800691e:	4313      	orrs	r3, r2
 8006920:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	697a      	ldr	r2, [r7, #20]
 8006926:	609a      	str	r2, [r3, #8]
}
 8006928:	bf00      	nop
 800692a:	371c      	adds	r7, #28
 800692c:	46bd      	mov	sp, r7
 800692e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006932:	4770      	bx	lr

08006934 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006934:	b480      	push	{r7}
 8006936:	b087      	sub	sp, #28
 8006938:	af00      	add	r7, sp, #0
 800693a:	60f8      	str	r0, [r7, #12]
 800693c:	60b9      	str	r1, [r7, #8]
 800693e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006940:	68bb      	ldr	r3, [r7, #8]
 8006942:	f003 031f 	and.w	r3, r3, #31
 8006946:	2201      	movs	r2, #1
 8006948:	fa02 f303 	lsl.w	r3, r2, r3
 800694c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	6a1a      	ldr	r2, [r3, #32]
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	43db      	mvns	r3, r3
 8006956:	401a      	ands	r2, r3
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	6a1a      	ldr	r2, [r3, #32]
 8006960:	68bb      	ldr	r3, [r7, #8]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	6879      	ldr	r1, [r7, #4]
 8006968:	fa01 f303 	lsl.w	r3, r1, r3
 800696c:	431a      	orrs	r2, r3
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	621a      	str	r2, [r3, #32]
}
 8006972:	bf00      	nop
 8006974:	371c      	adds	r7, #28
 8006976:	46bd      	mov	sp, r7
 8006978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697c:	4770      	bx	lr
	...

08006980 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	6078      	str	r0, [r7, #4]
 8006988:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006990:	2b01      	cmp	r3, #1
 8006992:	d101      	bne.n	8006998 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006994:	2302      	movs	r3, #2
 8006996:	e05a      	b.n	8006a4e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	2202      	movs	r2, #2
 80069a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80069be:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80069c0:	683b      	ldr	r3, [r7, #0]
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	68fa      	ldr	r2, [r7, #12]
 80069c6:	4313      	orrs	r3, r2
 80069c8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	68fa      	ldr	r2, [r7, #12]
 80069d0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	4a21      	ldr	r2, [pc, #132]	@ (8006a5c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80069d8:	4293      	cmp	r3, r2
 80069da:	d022      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80069e4:	d01d      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	4a1d      	ldr	r2, [pc, #116]	@ (8006a60 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80069ec:	4293      	cmp	r3, r2
 80069ee:	d018      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	4a1b      	ldr	r2, [pc, #108]	@ (8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80069f6:	4293      	cmp	r3, r2
 80069f8:	d013      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	4a1a      	ldr	r2, [pc, #104]	@ (8006a68 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006a00:	4293      	cmp	r3, r2
 8006a02:	d00e      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	4a18      	ldr	r2, [pc, #96]	@ (8006a6c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006a0a:	4293      	cmp	r3, r2
 8006a0c:	d009      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	4a17      	ldr	r2, [pc, #92]	@ (8006a70 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d004      	beq.n	8006a22 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	681b      	ldr	r3, [r3, #0]
 8006a1c:	4a15      	ldr	r2, [pc, #84]	@ (8006a74 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006a1e:	4293      	cmp	r3, r2
 8006a20:	d10c      	bne.n	8006a3c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a28:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	685b      	ldr	r3, [r3, #4]
 8006a2e:	68ba      	ldr	r2, [r7, #8]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	68ba      	ldr	r2, [r7, #8]
 8006a3a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	2201      	movs	r2, #1
 8006a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2200      	movs	r2, #0
 8006a48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006a4c:	2300      	movs	r3, #0
}
 8006a4e:	4618      	mov	r0, r3
 8006a50:	3714      	adds	r7, #20
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40010000 	.word	0x40010000
 8006a60:	40000400 	.word	0x40000400
 8006a64:	40000800 	.word	0x40000800
 8006a68:	40000c00 	.word	0x40000c00
 8006a6c:	40010400 	.word	0x40010400
 8006a70:	40014000 	.word	0x40014000
 8006a74:	40001800 	.word	0x40001800

08006a78 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006a78:	b480      	push	{r7}
 8006a7a:	b085      	sub	sp, #20
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006a8c:	2b01      	cmp	r3, #1
 8006a8e:	d101      	bne.n	8006a94 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006a90:	2302      	movs	r3, #2
 8006a92:	e03d      	b.n	8006b10 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	2201      	movs	r2, #1
 8006a98:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8006aa2:	683b      	ldr	r3, [r7, #0]
 8006aa4:	68db      	ldr	r3, [r3, #12]
 8006aa6:	4313      	orrs	r3, r2
 8006aa8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	689b      	ldr	r3, [r3, #8]
 8006ab4:	4313      	orrs	r3, r2
 8006ab6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006abe:	683b      	ldr	r3, [r7, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	4313      	orrs	r3, r2
 8006ac4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006acc:	683b      	ldr	r3, [r7, #0]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006ada:	683b      	ldr	r3, [r7, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	4313      	orrs	r3, r2
 8006ae0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	4313      	orrs	r3, r2
 8006aee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8006af6:	683b      	ldr	r3, [r7, #0]
 8006af8:	69db      	ldr	r3, [r3, #28]
 8006afa:	4313      	orrs	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68fa      	ldr	r2, [r7, #12]
 8006b04:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	2200      	movs	r2, #0
 8006b0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006b0e:	2300      	movs	r3, #0
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3714      	adds	r7, #20
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr

08006b1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006b1c:	b480      	push	{r7}
 8006b1e:	b083      	sub	sp, #12
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006b24:	bf00      	nop
 8006b26:	370c      	adds	r7, #12
 8006b28:	46bd      	mov	sp, r7
 8006b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b2e:	4770      	bx	lr

08006b30 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006b30:	b480      	push	{r7}
 8006b32:	b083      	sub	sp, #12
 8006b34:	af00      	add	r7, sp, #0
 8006b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006b38:	bf00      	nop
 8006b3a:	370c      	adds	r7, #12
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b44:	b084      	sub	sp, #16
 8006b46:	b580      	push	{r7, lr}
 8006b48:	b084      	sub	sp, #16
 8006b4a:	af00      	add	r7, sp, #0
 8006b4c:	6078      	str	r0, [r7, #4]
 8006b4e:	f107 001c 	add.w	r0, r7, #28
 8006b52:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006b56:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006b5a:	2b01      	cmp	r3, #1
 8006b5c:	d123      	bne.n	8006ba6 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b62:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8006b72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006b76:	687a      	ldr	r2, [r7, #4]
 8006b78:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	68db      	ldr	r3, [r3, #12]
 8006b7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006b86:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006b8a:	2b01      	cmp	r3, #1
 8006b8c:	d105      	bne.n	8006b9a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006b9a:	6878      	ldr	r0, [r7, #4]
 8006b9c:	f000 f9dc 	bl	8006f58 <USB_CoreReset>
 8006ba0:	4603      	mov	r3, r0
 8006ba2:	73fb      	strb	r3, [r7, #15]
 8006ba4:	e01b      	b.n	8006bde <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	68db      	ldr	r3, [r3, #12]
 8006baa:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006bb2:	6878      	ldr	r0, [r7, #4]
 8006bb4:	f000 f9d0 	bl	8006f58 <USB_CoreReset>
 8006bb8:	4603      	mov	r3, r0
 8006bba:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8006bbc:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d106      	bne.n	8006bd2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bc8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	639a      	str	r2, [r3, #56]	@ 0x38
 8006bd0:	e005      	b.n	8006bde <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006bd6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8006bde:	7fbb      	ldrb	r3, [r7, #30]
 8006be0:	2b01      	cmp	r3, #1
 8006be2:	d10b      	bne.n	8006bfc <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	689b      	ldr	r3, [r3, #8]
 8006be8:	f043 0206 	orr.w	r2, r3, #6
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	689b      	ldr	r3, [r3, #8]
 8006bf4:	f043 0220 	orr.w	r2, r3, #32
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8006bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bfe:	4618      	mov	r0, r3
 8006c00:	3710      	adds	r7, #16
 8006c02:	46bd      	mov	sp, r7
 8006c04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c08:	b004      	add	sp, #16
 8006c0a:	4770      	bx	lr

08006c0c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c0c:	b480      	push	{r7}
 8006c0e:	b083      	sub	sp, #12
 8006c10:	af00      	add	r7, sp, #0
 8006c12:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	689b      	ldr	r3, [r3, #8]
 8006c18:	f043 0201 	orr.w	r2, r3, #1
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c20:	2300      	movs	r3, #0
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	370c      	adds	r7, #12
 8006c26:	46bd      	mov	sp, r7
 8006c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2c:	4770      	bx	lr

08006c2e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006c2e:	b480      	push	{r7}
 8006c30:	b083      	sub	sp, #12
 8006c32:	af00      	add	r7, sp, #0
 8006c34:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	689b      	ldr	r3, [r3, #8]
 8006c3a:	f023 0201 	bic.w	r2, r3, #1
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006c42:	2300      	movs	r3, #0
}
 8006c44:	4618      	mov	r0, r3
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr

08006c50 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	460b      	mov	r3, r1
 8006c5a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68db      	ldr	r3, [r3, #12]
 8006c64:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8006c6c:	78fb      	ldrb	r3, [r7, #3]
 8006c6e:	2b01      	cmp	r3, #1
 8006c70:	d115      	bne.n	8006c9e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	68db      	ldr	r3, [r3, #12]
 8006c76:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006c7e:	200a      	movs	r0, #10
 8006c80:	f7fa fb7e 	bl	8001380 <HAL_Delay>
      ms += 10U;
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	330a      	adds	r3, #10
 8006c88:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f956 	bl	8006f3c <USB_GetMode>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b01      	cmp	r3, #1
 8006c94:	d01e      	beq.n	8006cd4 <USB_SetCurrentMode+0x84>
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	2bc7      	cmp	r3, #199	@ 0xc7
 8006c9a:	d9f0      	bls.n	8006c7e <USB_SetCurrentMode+0x2e>
 8006c9c:	e01a      	b.n	8006cd4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006c9e:	78fb      	ldrb	r3, [r7, #3]
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d115      	bne.n	8006cd0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8006cb0:	200a      	movs	r0, #10
 8006cb2:	f7fa fb65 	bl	8001380 <HAL_Delay>
      ms += 10U;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	330a      	adds	r3, #10
 8006cba:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006cbc:	6878      	ldr	r0, [r7, #4]
 8006cbe:	f000 f93d 	bl	8006f3c <USB_GetMode>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d005      	beq.n	8006cd4 <USB_SetCurrentMode+0x84>
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	2bc7      	cmp	r3, #199	@ 0xc7
 8006ccc:	d9f0      	bls.n	8006cb0 <USB_SetCurrentMode+0x60>
 8006cce:	e001      	b.n	8006cd4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8006cd0:	2301      	movs	r3, #1
 8006cd2:	e005      	b.n	8006ce0 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	2bc8      	cmp	r3, #200	@ 0xc8
 8006cd8:	d101      	bne.n	8006cde <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006cda:	2301      	movs	r3, #1
 8006cdc:	e000      	b.n	8006ce0 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8006cde:	2300      	movs	r3, #0
}
 8006ce0:	4618      	mov	r0, r3
 8006ce2:	3710      	adds	r7, #16
 8006ce4:	46bd      	mov	sp, r7
 8006ce6:	bd80      	pop	{r7, pc}

08006ce8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006ce8:	b480      	push	{r7}
 8006cea:	b085      	sub	sp, #20
 8006cec:	af00      	add	r7, sp, #0
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	3301      	adds	r3, #1
 8006cfa:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006cfc:	68fb      	ldr	r3, [r7, #12]
 8006cfe:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d02:	d901      	bls.n	8006d08 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006d04:	2303      	movs	r3, #3
 8006d06:	e01b      	b.n	8006d40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	691b      	ldr	r3, [r3, #16]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	daf2      	bge.n	8006cf6 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	019b      	lsls	r3, r3, #6
 8006d18:	f043 0220 	orr.w	r2, r3, #32
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	3301      	adds	r3, #1
 8006d24:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d2c:	d901      	bls.n	8006d32 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006d2e:	2303      	movs	r3, #3
 8006d30:	e006      	b.n	8006d40 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0320 	and.w	r3, r3, #32
 8006d3a:	2b20      	cmp	r3, #32
 8006d3c:	d0f0      	beq.n	8006d20 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006d3e:	2300      	movs	r3, #0
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3714      	adds	r7, #20
 8006d44:	46bd      	mov	sp, r7
 8006d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4a:	4770      	bx	lr

08006d4c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006d4c:	b480      	push	{r7}
 8006d4e:	b085      	sub	sp, #20
 8006d50:	af00      	add	r7, sp, #0
 8006d52:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006d54:	2300      	movs	r3, #0
 8006d56:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	3301      	adds	r3, #1
 8006d5c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d64:	d901      	bls.n	8006d6a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8006d66:	2303      	movs	r3, #3
 8006d68:	e018      	b.n	8006d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	691b      	ldr	r3, [r3, #16]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	daf2      	bge.n	8006d58 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8006d72:	2300      	movs	r3, #0
 8006d74:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2210      	movs	r2, #16
 8006d7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3301      	adds	r3, #1
 8006d80:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006d88:	d901      	bls.n	8006d8e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006d8a:	2303      	movs	r3, #3
 8006d8c:	e006      	b.n	8006d9c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	691b      	ldr	r3, [r3, #16]
 8006d92:	f003 0310 	and.w	r3, r3, #16
 8006d96:	2b10      	cmp	r3, #16
 8006d98:	d0f0      	beq.n	8006d7c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3714      	adds	r7, #20
 8006da0:	46bd      	mov	sp, r7
 8006da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006da6:	4770      	bx	lr

08006da8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8006da8:	b480      	push	{r7}
 8006daa:	b089      	sub	sp, #36	@ 0x24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	4611      	mov	r1, r2
 8006db4:	461a      	mov	r2, r3
 8006db6:	460b      	mov	r3, r1
 8006db8:	71fb      	strb	r3, [r7, #7]
 8006dba:	4613      	mov	r3, r2
 8006dbc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8006dc2:	68bb      	ldr	r3, [r7, #8]
 8006dc4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8006dc6:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d123      	bne.n	8006e16 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8006dce:	88bb      	ldrh	r3, [r7, #4]
 8006dd0:	3303      	adds	r3, #3
 8006dd2:	089b      	lsrs	r3, r3, #2
 8006dd4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	61bb      	str	r3, [r7, #24]
 8006dda:	e018      	b.n	8006e0e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8006ddc:	79fb      	ldrb	r3, [r7, #7]
 8006dde:	031a      	lsls	r2, r3, #12
 8006de0:	697b      	ldr	r3, [r7, #20]
 8006de2:	4413      	add	r3, r2
 8006de4:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006de8:	461a      	mov	r2, r3
 8006dea:	69fb      	ldr	r3, [r7, #28]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	6013      	str	r3, [r2, #0]
      pSrc++;
 8006df0:	69fb      	ldr	r3, [r7, #28]
 8006df2:	3301      	adds	r3, #1
 8006df4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006df6:	69fb      	ldr	r3, [r7, #28]
 8006df8:	3301      	adds	r3, #1
 8006dfa:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	3301      	adds	r3, #1
 8006e00:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8006e02:	69fb      	ldr	r3, [r7, #28]
 8006e04:	3301      	adds	r3, #1
 8006e06:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8006e08:	69bb      	ldr	r3, [r7, #24]
 8006e0a:	3301      	adds	r3, #1
 8006e0c:	61bb      	str	r3, [r7, #24]
 8006e0e:	69ba      	ldr	r2, [r7, #24]
 8006e10:	693b      	ldr	r3, [r7, #16]
 8006e12:	429a      	cmp	r2, r3
 8006e14:	d3e2      	bcc.n	8006ddc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8006e16:	2300      	movs	r3, #0
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3724      	adds	r7, #36	@ 0x24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e22:	4770      	bx	lr

08006e24 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006e24:	b480      	push	{r7}
 8006e26:	b08b      	sub	sp, #44	@ 0x2c
 8006e28:	af00      	add	r7, sp, #0
 8006e2a:	60f8      	str	r0, [r7, #12]
 8006e2c:	60b9      	str	r1, [r7, #8]
 8006e2e:	4613      	mov	r3, r2
 8006e30:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006e36:	68bb      	ldr	r3, [r7, #8]
 8006e38:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006e3a:	88fb      	ldrh	r3, [r7, #6]
 8006e3c:	089b      	lsrs	r3, r3, #2
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006e42:	88fb      	ldrh	r3, [r7, #6]
 8006e44:	f003 0303 	and.w	r3, r3, #3
 8006e48:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	623b      	str	r3, [r7, #32]
 8006e4e:	e014      	b.n	8006e7a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006e50:	69bb      	ldr	r3, [r7, #24]
 8006e52:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5a:	601a      	str	r2, [r3, #0]
    pDest++;
 8006e5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e5e:	3301      	adds	r3, #1
 8006e60:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e64:	3301      	adds	r3, #1
 8006e66:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e6a:	3301      	adds	r3, #1
 8006e6c:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 8006e6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e70:	3301      	adds	r3, #1
 8006e72:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8006e74:	6a3b      	ldr	r3, [r7, #32]
 8006e76:	3301      	adds	r3, #1
 8006e78:	623b      	str	r3, [r7, #32]
 8006e7a:	6a3a      	ldr	r2, [r7, #32]
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	429a      	cmp	r2, r3
 8006e80:	d3e6      	bcc.n	8006e50 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006e82:	8bfb      	ldrh	r3, [r7, #30]
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d01e      	beq.n	8006ec6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006e88:	2300      	movs	r3, #0
 8006e8a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006e8c:	69bb      	ldr	r3, [r7, #24]
 8006e8e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8006e92:	461a      	mov	r2, r3
 8006e94:	f107 0310 	add.w	r3, r7, #16
 8006e98:	6812      	ldr	r2, [r2, #0]
 8006e9a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006e9c:	693a      	ldr	r2, [r7, #16]
 8006e9e:	6a3b      	ldr	r3, [r7, #32]
 8006ea0:	b2db      	uxtb	r3, r3
 8006ea2:	00db      	lsls	r3, r3, #3
 8006ea4:	fa22 f303 	lsr.w	r3, r2, r3
 8006ea8:	b2da      	uxtb	r2, r3
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eac:	701a      	strb	r2, [r3, #0]
      i++;
 8006eae:	6a3b      	ldr	r3, [r7, #32]
 8006eb0:	3301      	adds	r3, #1
 8006eb2:	623b      	str	r3, [r7, #32]
      pDest++;
 8006eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 8006eba:	8bfb      	ldrh	r3, [r7, #30]
 8006ebc:	3b01      	subs	r3, #1
 8006ebe:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006ec0:	8bfb      	ldrh	r3, [r7, #30]
 8006ec2:	2b00      	cmp	r3, #0
 8006ec4:	d1ea      	bne.n	8006e9c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006ec6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	372c      	adds	r7, #44	@ 0x2c
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ed2:	4770      	bx	lr

08006ed4 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8006ed4:	b480      	push	{r7}
 8006ed6:	b085      	sub	sp, #20
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	695b      	ldr	r3, [r3, #20]
 8006ee0:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006eec:	68fb      	ldr	r3, [r7, #12]
}
 8006eee:	4618      	mov	r0, r3
 8006ef0:	3714      	adds	r7, #20
 8006ef2:	46bd      	mov	sp, r7
 8006ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef8:	4770      	bx	lr

08006efa <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 8006efa:	b480      	push	{r7}
 8006efc:	b085      	sub	sp, #20
 8006efe:	af00      	add	r7, sp, #0
 8006f00:	6078      	str	r0, [r7, #4]
 8006f02:	460b      	mov	r3, r1
 8006f04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 8006f0a:	78fb      	ldrb	r3, [r7, #3]
 8006f0c:	015a      	lsls	r2, r3, #5
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	4413      	add	r3, r2
 8006f12:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f16:	689b      	ldr	r3, [r3, #8]
 8006f18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 8006f1a:	78fb      	ldrb	r3, [r7, #3]
 8006f1c:	015a      	lsls	r2, r3, #5
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	4413      	add	r3, r2
 8006f22:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8006f26:	68db      	ldr	r3, [r3, #12]
 8006f28:	68ba      	ldr	r2, [r7, #8]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8006f2e:	68bb      	ldr	r3, [r7, #8]
}
 8006f30:	4618      	mov	r0, r3
 8006f32:	3714      	adds	r7, #20
 8006f34:	46bd      	mov	sp, r7
 8006f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3a:	4770      	bx	lr

08006f3c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	b083      	sub	sp, #12
 8006f40:	af00      	add	r7, sp, #0
 8006f42:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	695b      	ldr	r3, [r3, #20]
 8006f48:	f003 0301 	and.w	r3, r3, #1
}
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	370c      	adds	r7, #12
 8006f50:	46bd      	mov	sp, r7
 8006f52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f56:	4770      	bx	lr

08006f58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006f58:	b480      	push	{r7}
 8006f5a:	b085      	sub	sp, #20
 8006f5c:	af00      	add	r7, sp, #0
 8006f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006f60:	2300      	movs	r3, #0
 8006f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	3301      	adds	r3, #1
 8006f68:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f70:	d901      	bls.n	8006f76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006f72:	2303      	movs	r3, #3
 8006f74:	e01b      	b.n	8006fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	691b      	ldr	r3, [r3, #16]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	daf2      	bge.n	8006f64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006f7e:	2300      	movs	r3, #0
 8006f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	691b      	ldr	r3, [r3, #16]
 8006f86:	f043 0201 	orr.w	r2, r3, #1
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	3301      	adds	r3, #1
 8006f92:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8006f9a:	d901      	bls.n	8006fa0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006f9c:	2303      	movs	r3, #3
 8006f9e:	e006      	b.n	8006fae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	691b      	ldr	r3, [r3, #16]
 8006fa4:	f003 0301 	and.w	r3, r3, #1
 8006fa8:	2b01      	cmp	r3, #1
 8006faa:	d0f0      	beq.n	8006f8e <USB_CoreReset+0x36>

  return HAL_OK;
 8006fac:	2300      	movs	r3, #0
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3714      	adds	r7, #20
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb8:	4770      	bx	lr
	...

08006fbc <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	b580      	push	{r7, lr}
 8006fc0:	b086      	sub	sp, #24
 8006fc2:	af00      	add	r7, sp, #0
 8006fc4:	6078      	str	r0, [r7, #4]
 8006fc6:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 8006fca:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006fce:	2300      	movs	r3, #0
 8006fd0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fd2:	687b      	ldr	r3, [r7, #4]
 8006fd4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8006fdc:	461a      	mov	r2, r3
 8006fde:	2300      	movs	r3, #0
 8006fe0:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006fe6:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ffe:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	68db      	ldr	r3, [r3, #12]
 800700a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800700e:	2b00      	cmp	r3, #0
 8007010:	d119      	bne.n	8007046 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8007012:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007016:	2b01      	cmp	r3, #1
 8007018:	d10a      	bne.n	8007030 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	68fa      	ldr	r2, [r7, #12]
 8007024:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007028:	f043 0304 	orr.w	r3, r3, #4
 800702c:	6013      	str	r3, [r2, #0]
 800702e:	e014      	b.n	800705a <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	68fa      	ldr	r2, [r7, #12]
 800703a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800703e:	f023 0304 	bic.w	r3, r3, #4
 8007042:	6013      	str	r3, [r2, #0]
 8007044:	e009      	b.n	800705a <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	68fa      	ldr	r2, [r7, #12]
 8007050:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007054:	f023 0304 	bic.w	r3, r3, #4
 8007058:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800705a:	2110      	movs	r1, #16
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f7ff fe43 	bl	8006ce8 <USB_FlushTxFifo>
 8007062:	4603      	mov	r3, r0
 8007064:	2b00      	cmp	r3, #0
 8007066:	d001      	beq.n	800706c <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 8007068:	2301      	movs	r3, #1
 800706a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f7ff fe6d 	bl	8006d4c <USB_FlushRxFifo>
 8007072:	4603      	mov	r3, r0
 8007074:	2b00      	cmp	r3, #0
 8007076:	d001      	beq.n	800707c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800707c:	2300      	movs	r3, #0
 800707e:	613b      	str	r3, [r7, #16]
 8007080:	e015      	b.n	80070ae <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007082:	693b      	ldr	r3, [r7, #16]
 8007084:	015a      	lsls	r2, r3, #5
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4413      	add	r3, r2
 800708a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800708e:	461a      	mov	r2, r3
 8007090:	f04f 33ff 	mov.w	r3, #4294967295
 8007094:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007096:	693b      	ldr	r3, [r7, #16]
 8007098:	015a      	lsls	r2, r3, #5
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80070a2:	461a      	mov	r2, r3
 80070a4:	2300      	movs	r3, #0
 80070a6:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80070a8:	693b      	ldr	r3, [r7, #16]
 80070aa:	3301      	adds	r3, #1
 80070ac:	613b      	str	r3, [r7, #16]
 80070ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80070b2:	461a      	mov	r2, r3
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	4293      	cmp	r3, r2
 80070b8:	d3e3      	bcc.n	8007082 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	2200      	movs	r2, #0
 80070be:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f04f 32ff 	mov.w	r2, #4294967295
 80070c6:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a18      	ldr	r2, [pc, #96]	@ (800712c <USB_HostInit+0x170>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d10b      	bne.n	80070e8 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80070d6:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a15      	ldr	r2, [pc, #84]	@ (8007130 <USB_HostInit+0x174>)
 80070dc:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	4a14      	ldr	r2, [pc, #80]	@ (8007134 <USB_HostInit+0x178>)
 80070e2:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 80070e6:	e009      	b.n	80070fc <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2280      	movs	r2, #128	@ 0x80
 80070ec:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	4a11      	ldr	r2, [pc, #68]	@ (8007138 <USB_HostInit+0x17c>)
 80070f2:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a11      	ldr	r2, [pc, #68]	@ (800713c <USB_HostInit+0x180>)
 80070f8:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80070fc:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007100:	2b00      	cmp	r3, #0
 8007102:	d105      	bne.n	8007110 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	699b      	ldr	r3, [r3, #24]
 8007108:	f043 0210 	orr.w	r2, r3, #16
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	699a      	ldr	r2, [r3, #24]
 8007114:	4b0a      	ldr	r3, [pc, #40]	@ (8007140 <USB_HostInit+0x184>)
 8007116:	4313      	orrs	r3, r2
 8007118:	687a      	ldr	r2, [r7, #4]
 800711a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 800711c:	7dfb      	ldrb	r3, [r7, #23]
}
 800711e:	4618      	mov	r0, r3
 8007120:	3718      	adds	r7, #24
 8007122:	46bd      	mov	sp, r7
 8007124:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007128:	b004      	add	sp, #16
 800712a:	4770      	bx	lr
 800712c:	40040000 	.word	0x40040000
 8007130:	01000200 	.word	0x01000200
 8007134:	00e00300 	.word	0x00e00300
 8007138:	00600080 	.word	0x00600080
 800713c:	004000e0 	.word	0x004000e0
 8007140:	a3200008 	.word	0xa3200008

08007144 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8007144:	b480      	push	{r7}
 8007146:	b085      	sub	sp, #20
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
 800714c:	460b      	mov	r3, r1
 800714e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	68fa      	ldr	r2, [r7, #12]
 800715e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 8007162:	f023 0303 	bic.w	r3, r3, #3
 8007166:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800716e:	681a      	ldr	r2, [r3, #0]
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	f003 0303 	and.w	r3, r3, #3
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800717c:	4313      	orrs	r3, r2
 800717e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007180:	78fb      	ldrb	r3, [r7, #3]
 8007182:	2b01      	cmp	r3, #1
 8007184:	d107      	bne.n	8007196 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800718c:	461a      	mov	r2, r3
 800718e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007192:	6053      	str	r3, [r2, #4]
 8007194:	e00c      	b.n	80071b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007196:	78fb      	ldrb	r3, [r7, #3]
 8007198:	2b02      	cmp	r3, #2
 800719a:	d107      	bne.n	80071ac <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80071a2:	461a      	mov	r2, r3
 80071a4:	f241 7370 	movw	r3, #6000	@ 0x1770
 80071a8:	6053      	str	r3, [r2, #4]
 80071aa:	e001      	b.n	80071b0 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 80071ac:	2301      	movs	r3, #1
 80071ae:	e000      	b.n	80071b2 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 80071b0:	2300      	movs	r3, #0
}
 80071b2:	4618      	mov	r0, r3
 80071b4:	3714      	adds	r7, #20
 80071b6:	46bd      	mov	sp, r7
 80071b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071bc:	4770      	bx	lr

080071be <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 80071be:	b580      	push	{r7, lr}
 80071c0:	b084      	sub	sp, #16
 80071c2:	af00      	add	r7, sp, #0
 80071c4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80071de:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 80071e0:	68bb      	ldr	r3, [r7, #8]
 80071e2:	68fa      	ldr	r2, [r7, #12]
 80071e4:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071ec:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 80071ee:	2064      	movs	r0, #100	@ 0x64
 80071f0:	f7fa f8c6 	bl	8001380 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 80071f4:	68bb      	ldr	r3, [r7, #8]
 80071f6:	68fa      	ldr	r2, [r7, #12]
 80071f8:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80071fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007200:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007202:	200a      	movs	r0, #10
 8007204:	f7fa f8bc 	bl	8001380 <HAL_Delay>

  return HAL_OK;
 8007208:	2300      	movs	r3, #0
}
 800720a:	4618      	mov	r0, r3
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
 800721a:	460b      	mov	r3, r1
 800721c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007222:	2300      	movs	r3, #0
 8007224:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007230:	68bb      	ldr	r3, [r7, #8]
 8007232:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8007236:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8007238:	68bb      	ldr	r3, [r7, #8]
 800723a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800723e:	2b00      	cmp	r3, #0
 8007240:	d109      	bne.n	8007256 <USB_DriveVbus+0x44>
 8007242:	78fb      	ldrb	r3, [r7, #3]
 8007244:	2b01      	cmp	r3, #1
 8007246:	d106      	bne.n	8007256 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	68fa      	ldr	r2, [r7, #12]
 800724c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007250:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8007254:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8007256:	68bb      	ldr	r3, [r7, #8]
 8007258:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800725c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007260:	d109      	bne.n	8007276 <USB_DriveVbus+0x64>
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d106      	bne.n	8007276 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8007268:	68bb      	ldr	r3, [r7, #8]
 800726a:	68fa      	ldr	r2, [r7, #12]
 800726c:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007270:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007274:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007276:	2300      	movs	r3, #0
}
 8007278:	4618      	mov	r0, r3
 800727a:	3714      	adds	r7, #20
 800727c:	46bd      	mov	sp, r7
 800727e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007282:	4770      	bx	lr

08007284 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007284:	b480      	push	{r7}
 8007286:	b085      	sub	sp, #20
 8007288:	af00      	add	r7, sp, #0
 800728a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800729e:	68bb      	ldr	r3, [r7, #8]
 80072a0:	0c5b      	lsrs	r3, r3, #17
 80072a2:	f003 0303 	and.w	r3, r3, #3
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 80072b2:	b480      	push	{r7}
 80072b4:	b085      	sub	sp, #20
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80072c4:	689b      	ldr	r3, [r3, #8]
 80072c6:	b29b      	uxth	r3, r3
}
 80072c8:	4618      	mov	r0, r3
 80072ca:	3714      	adds	r7, #20
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 80072d4:	b580      	push	{r7, lr}
 80072d6:	b088      	sub	sp, #32
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
 80072dc:	4608      	mov	r0, r1
 80072de:	4611      	mov	r1, r2
 80072e0:	461a      	mov	r2, r3
 80072e2:	4603      	mov	r3, r0
 80072e4:	70fb      	strb	r3, [r7, #3]
 80072e6:	460b      	mov	r3, r1
 80072e8:	70bb      	strb	r3, [r7, #2]
 80072ea:	4613      	mov	r3, r2
 80072ec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 80072ee:	2300      	movs	r3, #0
 80072f0:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 80072f6:	78fb      	ldrb	r3, [r7, #3]
 80072f8:	015a      	lsls	r2, r3, #5
 80072fa:	693b      	ldr	r3, [r7, #16]
 80072fc:	4413      	add	r3, r2
 80072fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007302:	461a      	mov	r2, r3
 8007304:	f04f 33ff 	mov.w	r3, #4294967295
 8007308:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800730a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800730e:	2b03      	cmp	r3, #3
 8007310:	d87c      	bhi.n	800740c <USB_HC_Init+0x138>
 8007312:	a201      	add	r2, pc, #4	@ (adr r2, 8007318 <USB_HC_Init+0x44>)
 8007314:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007318:	08007329 	.word	0x08007329
 800731c:	080073cf 	.word	0x080073cf
 8007320:	08007329 	.word	0x08007329
 8007324:	08007391 	.word	0x08007391
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007328:	78fb      	ldrb	r3, [r7, #3]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	693b      	ldr	r3, [r7, #16]
 800732e:	4413      	add	r3, r2
 8007330:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007334:	461a      	mov	r2, r3
 8007336:	f240 439d 	movw	r3, #1181	@ 0x49d
 800733a:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 800733c:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007340:	2b00      	cmp	r3, #0
 8007342:	da10      	bge.n	8007366 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8007344:	78fb      	ldrb	r3, [r7, #3]
 8007346:	015a      	lsls	r2, r3, #5
 8007348:	693b      	ldr	r3, [r7, #16]
 800734a:	4413      	add	r3, r2
 800734c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007350:	68db      	ldr	r3, [r3, #12]
 8007352:	78fa      	ldrb	r2, [r7, #3]
 8007354:	0151      	lsls	r1, r2, #5
 8007356:	693a      	ldr	r2, [r7, #16]
 8007358:	440a      	add	r2, r1
 800735a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800735e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007362:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 8007364:	e055      	b.n	8007412 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	4a6f      	ldr	r2, [pc, #444]	@ (8007528 <USB_HC_Init+0x254>)
 800736a:	4293      	cmp	r3, r2
 800736c:	d151      	bne.n	8007412 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 800736e:	78fb      	ldrb	r3, [r7, #3]
 8007370:	015a      	lsls	r2, r3, #5
 8007372:	693b      	ldr	r3, [r7, #16]
 8007374:	4413      	add	r3, r2
 8007376:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800737a:	68db      	ldr	r3, [r3, #12]
 800737c:	78fa      	ldrb	r2, [r7, #3]
 800737e:	0151      	lsls	r1, r2, #5
 8007380:	693a      	ldr	r2, [r7, #16]
 8007382:	440a      	add	r2, r1
 8007384:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007388:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800738c:	60d3      	str	r3, [r2, #12]
      break;
 800738e:	e040      	b.n	8007412 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007390:	78fb      	ldrb	r3, [r7, #3]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800739c:	461a      	mov	r2, r3
 800739e:	f240 639d 	movw	r3, #1693	@ 0x69d
 80073a2:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073a4:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	da34      	bge.n	8007416 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80073ac:	78fb      	ldrb	r3, [r7, #3]
 80073ae:	015a      	lsls	r2, r3, #5
 80073b0:	693b      	ldr	r3, [r7, #16]
 80073b2:	4413      	add	r3, r2
 80073b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b8:	68db      	ldr	r3, [r3, #12]
 80073ba:	78fa      	ldrb	r2, [r7, #3]
 80073bc:	0151      	lsls	r1, r2, #5
 80073be:	693a      	ldr	r2, [r7, #16]
 80073c0:	440a      	add	r2, r1
 80073c2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80073c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80073ca:	60d3      	str	r3, [r2, #12]
      }

      break;
 80073cc:	e023      	b.n	8007416 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80073ce:	78fb      	ldrb	r3, [r7, #3]
 80073d0:	015a      	lsls	r2, r3, #5
 80073d2:	693b      	ldr	r3, [r7, #16]
 80073d4:	4413      	add	r3, r2
 80073d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073da:	461a      	mov	r2, r3
 80073dc:	f240 2325 	movw	r3, #549	@ 0x225
 80073e0:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 80073e2:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	da17      	bge.n	800741a <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 80073ea:	78fb      	ldrb	r3, [r7, #3]
 80073ec:	015a      	lsls	r2, r3, #5
 80073ee:	693b      	ldr	r3, [r7, #16]
 80073f0:	4413      	add	r3, r2
 80073f2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073f6:	68db      	ldr	r3, [r3, #12]
 80073f8:	78fa      	ldrb	r2, [r7, #3]
 80073fa:	0151      	lsls	r1, r2, #5
 80073fc:	693a      	ldr	r2, [r7, #16]
 80073fe:	440a      	add	r2, r1
 8007400:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007404:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007408:	60d3      	str	r3, [r2, #12]
      }
      break;
 800740a:	e006      	b.n	800741a <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800740c:	2301      	movs	r3, #1
 800740e:	77fb      	strb	r3, [r7, #31]
      break;
 8007410:	e004      	b.n	800741c <USB_HC_Init+0x148>
      break;
 8007412:	bf00      	nop
 8007414:	e002      	b.n	800741c <USB_HC_Init+0x148>
      break;
 8007416:	bf00      	nop
 8007418:	e000      	b.n	800741c <USB_HC_Init+0x148>
      break;
 800741a:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 800741c:	78fb      	ldrb	r3, [r7, #3]
 800741e:	015a      	lsls	r2, r3, #5
 8007420:	693b      	ldr	r3, [r7, #16]
 8007422:	4413      	add	r3, r2
 8007424:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007428:	461a      	mov	r2, r3
 800742a:	2300      	movs	r3, #0
 800742c:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 800742e:	78fb      	ldrb	r3, [r7, #3]
 8007430:	015a      	lsls	r2, r3, #5
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	4413      	add	r3, r2
 8007436:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	78fa      	ldrb	r2, [r7, #3]
 800743e:	0151      	lsls	r1, r2, #5
 8007440:	693a      	ldr	r2, [r7, #16]
 8007442:	440a      	add	r2, r1
 8007444:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007448:	f043 0302 	orr.w	r3, r3, #2
 800744c:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 800744e:	693b      	ldr	r3, [r7, #16]
 8007450:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007454:	699a      	ldr	r2, [r3, #24]
 8007456:	78fb      	ldrb	r3, [r7, #3]
 8007458:	f003 030f 	and.w	r3, r3, #15
 800745c:	2101      	movs	r1, #1
 800745e:	fa01 f303 	lsl.w	r3, r1, r3
 8007462:	6939      	ldr	r1, [r7, #16]
 8007464:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 8007468:	4313      	orrs	r3, r2
 800746a:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	699b      	ldr	r3, [r3, #24]
 8007470:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007478:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800747c:	2b00      	cmp	r3, #0
 800747e:	da03      	bge.n	8007488 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007480:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007484:	61bb      	str	r3, [r7, #24]
 8007486:	e001      	b.n	800748c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007488:	2300      	movs	r3, #0
 800748a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800748c:	6878      	ldr	r0, [r7, #4]
 800748e:	f7ff fef9 	bl	8007284 <USB_GetHostSpeed>
 8007492:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007494:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007498:	2b02      	cmp	r3, #2
 800749a:	d106      	bne.n	80074aa <USB_HC_Init+0x1d6>
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d003      	beq.n	80074aa <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 80074a2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80074a6:	617b      	str	r3, [r7, #20]
 80074a8:	e001      	b.n	80074ae <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 80074aa:	2300      	movs	r3, #0
 80074ac:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074ae:	787b      	ldrb	r3, [r7, #1]
 80074b0:	059b      	lsls	r3, r3, #22
 80074b2:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074b6:	78bb      	ldrb	r3, [r7, #2]
 80074b8:	02db      	lsls	r3, r3, #11
 80074ba:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074be:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074c0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074c4:	049b      	lsls	r3, r3, #18
 80074c6:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 80074ca:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 80074cc:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 80074ce:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 80074d2:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074d4:	69bb      	ldr	r3, [r7, #24]
 80074d6:	431a      	orrs	r2, r3
 80074d8:	697b      	ldr	r3, [r7, #20]
 80074da:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074dc:	78fa      	ldrb	r2, [r7, #3]
 80074de:	0151      	lsls	r1, r2, #5
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	440a      	add	r2, r1
 80074e4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 80074e8:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 80074ec:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 80074ee:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074f2:	2b03      	cmp	r3, #3
 80074f4:	d003      	beq.n	80074fe <USB_HC_Init+0x22a>
 80074f6:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d10f      	bne.n	800751e <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80074fe:	78fb      	ldrb	r3, [r7, #3]
 8007500:	015a      	lsls	r2, r3, #5
 8007502:	693b      	ldr	r3, [r7, #16]
 8007504:	4413      	add	r3, r2
 8007506:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	78fa      	ldrb	r2, [r7, #3]
 800750e:	0151      	lsls	r1, r2, #5
 8007510:	693a      	ldr	r2, [r7, #16]
 8007512:	440a      	add	r2, r1
 8007514:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007518:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 800751c:	6013      	str	r3, [r2, #0]
  }

  return ret;
 800751e:	7ffb      	ldrb	r3, [r7, #31]
}
 8007520:	4618      	mov	r0, r3
 8007522:	3720      	adds	r7, #32
 8007524:	46bd      	mov	sp, r7
 8007526:	bd80      	pop	{r7, pc}
 8007528:	40040000 	.word	0x40040000

0800752c <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 800752c:	b580      	push	{r7, lr}
 800752e:	b08c      	sub	sp, #48	@ 0x30
 8007530:	af02      	add	r7, sp, #8
 8007532:	60f8      	str	r0, [r7, #12]
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	4613      	mov	r3, r2
 8007538:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 800753e:	68bb      	ldr	r3, [r7, #8]
 8007540:	785b      	ldrb	r3, [r3, #1]
 8007542:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 8007544:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007548:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a5d      	ldr	r2, [pc, #372]	@ (80076c4 <USB_HC_StartXfer+0x198>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d12f      	bne.n	80075b2 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 8007552:	79fb      	ldrb	r3, [r7, #7]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d11c      	bne.n	8007592 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	7c9b      	ldrb	r3, [r3, #18]
 800755c:	2b00      	cmp	r3, #0
 800755e:	d003      	beq.n	8007568 <USB_HC_StartXfer+0x3c>
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	7c9b      	ldrb	r3, [r3, #18]
 8007564:	2b02      	cmp	r3, #2
 8007566:	d124      	bne.n	80075b2 <USB_HC_StartXfer+0x86>
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	799b      	ldrb	r3, [r3, #6]
 800756c:	2b00      	cmp	r3, #0
 800756e:	d120      	bne.n	80075b2 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007570:	69fb      	ldr	r3, [r7, #28]
 8007572:	015a      	lsls	r2, r3, #5
 8007574:	6a3b      	ldr	r3, [r7, #32]
 8007576:	4413      	add	r3, r2
 8007578:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800757c:	68db      	ldr	r3, [r3, #12]
 800757e:	69fa      	ldr	r2, [r7, #28]
 8007580:	0151      	lsls	r1, r2, #5
 8007582:	6a3a      	ldr	r2, [r7, #32]
 8007584:	440a      	add	r2, r1
 8007586:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800758a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800758e:	60d3      	str	r3, [r2, #12]
 8007590:	e00f      	b.n	80075b2 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	791b      	ldrb	r3, [r3, #4]
 8007596:	2b00      	cmp	r3, #0
 8007598:	d10b      	bne.n	80075b2 <USB_HC_StartXfer+0x86>
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	795b      	ldrb	r3, [r3, #5]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d107      	bne.n	80075b2 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	785b      	ldrb	r3, [r3, #1]
 80075a6:	4619      	mov	r1, r3
 80075a8:	68f8      	ldr	r0, [r7, #12]
 80075aa:	f000 fb6b 	bl	8007c84 <USB_DoPing>
        return HAL_OK;
 80075ae:	2300      	movs	r3, #0
 80075b0:	e232      	b.n	8007a18 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 80075b2:	68bb      	ldr	r3, [r7, #8]
 80075b4:	799b      	ldrb	r3, [r3, #6]
 80075b6:	2b01      	cmp	r3, #1
 80075b8:	d158      	bne.n	800766c <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 80075ba:	2301      	movs	r3, #1
 80075bc:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 80075be:	68bb      	ldr	r3, [r7, #8]
 80075c0:	78db      	ldrb	r3, [r3, #3]
 80075c2:	2b00      	cmp	r3, #0
 80075c4:	d007      	beq.n	80075d6 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80075c6:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	8a92      	ldrh	r2, [r2, #20]
 80075cc:	fb03 f202 	mul.w	r2, r3, r2
 80075d0:	68bb      	ldr	r3, [r7, #8]
 80075d2:	61da      	str	r2, [r3, #28]
 80075d4:	e07c      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	7c9b      	ldrb	r3, [r3, #18]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d130      	bne.n	8007640 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	6a1b      	ldr	r3, [r3, #32]
 80075e2:	2bbc      	cmp	r3, #188	@ 0xbc
 80075e4:	d918      	bls.n	8007618 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 80075e6:	68bb      	ldr	r3, [r7, #8]
 80075e8:	8a9b      	ldrh	r3, [r3, #20]
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	69da      	ldr	r2, [r3, #28]
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 80075f8:	68bb      	ldr	r3, [r7, #8]
 80075fa:	68db      	ldr	r3, [r3, #12]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d003      	beq.n	8007608 <USB_HC_StartXfer+0xdc>
 8007600:	68bb      	ldr	r3, [r7, #8]
 8007602:	68db      	ldr	r3, [r3, #12]
 8007604:	2b02      	cmp	r3, #2
 8007606:	d103      	bne.n	8007610 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007608:	68bb      	ldr	r3, [r7, #8]
 800760a:	2202      	movs	r2, #2
 800760c:	60da      	str	r2, [r3, #12]
 800760e:	e05f      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007610:	68bb      	ldr	r3, [r7, #8]
 8007612:	2201      	movs	r2, #1
 8007614:	60da      	str	r2, [r3, #12]
 8007616:	e05b      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	6a1a      	ldr	r2, [r3, #32]
 800761c:	68bb      	ldr	r3, [r7, #8]
 800761e:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007620:	68bb      	ldr	r3, [r7, #8]
 8007622:	68db      	ldr	r3, [r3, #12]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d007      	beq.n	8007638 <USB_HC_StartXfer+0x10c>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	2b02      	cmp	r3, #2
 800762e:	d003      	beq.n	8007638 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007630:	68bb      	ldr	r3, [r7, #8]
 8007632:	2204      	movs	r2, #4
 8007634:	60da      	str	r2, [r3, #12]
 8007636:	e04b      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007638:	68bb      	ldr	r3, [r7, #8]
 800763a:	2203      	movs	r2, #3
 800763c:	60da      	str	r2, [r3, #12]
 800763e:	e047      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b01      	cmp	r3, #1
 8007644:	d10d      	bne.n	8007662 <USB_HC_StartXfer+0x136>
 8007646:	68bb      	ldr	r3, [r7, #8]
 8007648:	6a1b      	ldr	r3, [r3, #32]
 800764a:	68ba      	ldr	r2, [r7, #8]
 800764c:	8a92      	ldrh	r2, [r2, #20]
 800764e:	4293      	cmp	r3, r2
 8007650:	d907      	bls.n	8007662 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007652:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007654:	68ba      	ldr	r2, [r7, #8]
 8007656:	8a92      	ldrh	r2, [r2, #20]
 8007658:	fb03 f202 	mul.w	r2, r3, r2
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	61da      	str	r2, [r3, #28]
 8007660:	e036      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	6a1a      	ldr	r2, [r3, #32]
 8007666:	68bb      	ldr	r3, [r7, #8]
 8007668:	61da      	str	r2, [r3, #28]
 800766a:	e031      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 800766c:	68bb      	ldr	r3, [r7, #8]
 800766e:	6a1b      	ldr	r3, [r3, #32]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d018      	beq.n	80076a6 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007674:	68bb      	ldr	r3, [r7, #8]
 8007676:	6a1b      	ldr	r3, [r3, #32]
 8007678:	68ba      	ldr	r2, [r7, #8]
 800767a:	8a92      	ldrh	r2, [r2, #20]
 800767c:	4413      	add	r3, r2
 800767e:	3b01      	subs	r3, #1
 8007680:	68ba      	ldr	r2, [r7, #8]
 8007682:	8a92      	ldrh	r2, [r2, #20]
 8007684:	fbb3 f3f2 	udiv	r3, r3, r2
 8007688:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 800768a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 800768c:	8b7b      	ldrh	r3, [r7, #26]
 800768e:	429a      	cmp	r2, r3
 8007690:	d90b      	bls.n	80076aa <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007692:	8b7b      	ldrh	r3, [r7, #26]
 8007694:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007696:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007698:	68ba      	ldr	r2, [r7, #8]
 800769a:	8a92      	ldrh	r2, [r2, #20]
 800769c:	fb03 f202 	mul.w	r2, r3, r2
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	61da      	str	r2, [r3, #28]
 80076a4:	e001      	b.n	80076aa <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 80076a6:	2301      	movs	r3, #1
 80076a8:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 80076aa:	68bb      	ldr	r3, [r7, #8]
 80076ac:	78db      	ldrb	r3, [r3, #3]
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00a      	beq.n	80076c8 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 80076b2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076b4:	68ba      	ldr	r2, [r7, #8]
 80076b6:	8a92      	ldrh	r2, [r2, #20]
 80076b8:	fb03 f202 	mul.w	r2, r3, r2
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	61da      	str	r2, [r3, #28]
 80076c0:	e006      	b.n	80076d0 <USB_HC_StartXfer+0x1a4>
 80076c2:	bf00      	nop
 80076c4:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	6a1a      	ldr	r2, [r3, #32]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	69db      	ldr	r3, [r3, #28]
 80076d4:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076d8:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 80076da:	04d9      	lsls	r1, r3, #19
 80076dc:	4ba3      	ldr	r3, [pc, #652]	@ (800796c <USB_HC_StartXfer+0x440>)
 80076de:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076e0:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 80076e2:	68bb      	ldr	r3, [r7, #8]
 80076e4:	7d9b      	ldrb	r3, [r3, #22]
 80076e6:	075b      	lsls	r3, r3, #29
 80076e8:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076ec:	69f9      	ldr	r1, [r7, #28]
 80076ee:	0148      	lsls	r0, r1, #5
 80076f0:	6a39      	ldr	r1, [r7, #32]
 80076f2:	4401      	add	r1, r0
 80076f4:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 80076f8:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 80076fa:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d009      	beq.n	8007716 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007702:	68bb      	ldr	r3, [r7, #8]
 8007704:	6999      	ldr	r1, [r3, #24]
 8007706:	69fb      	ldr	r3, [r7, #28]
 8007708:	015a      	lsls	r2, r3, #5
 800770a:	6a3b      	ldr	r3, [r7, #32]
 800770c:	4413      	add	r3, r2
 800770e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007712:	460a      	mov	r2, r1
 8007714:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007716:	6a3b      	ldr	r3, [r7, #32]
 8007718:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800771c:	689b      	ldr	r3, [r3, #8]
 800771e:	f003 0301 	and.w	r3, r3, #1
 8007722:	2b00      	cmp	r3, #0
 8007724:	bf0c      	ite	eq
 8007726:	2301      	moveq	r3, #1
 8007728:	2300      	movne	r3, #0
 800772a:	b2db      	uxtb	r3, r3
 800772c:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 800772e:	69fb      	ldr	r3, [r7, #28]
 8007730:	015a      	lsls	r2, r3, #5
 8007732:	6a3b      	ldr	r3, [r7, #32]
 8007734:	4413      	add	r3, r2
 8007736:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	69fa      	ldr	r2, [r7, #28]
 800773e:	0151      	lsls	r1, r2, #5
 8007740:	6a3a      	ldr	r2, [r7, #32]
 8007742:	440a      	add	r2, r1
 8007744:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007748:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 800774c:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 800774e:	69fb      	ldr	r3, [r7, #28]
 8007750:	015a      	lsls	r2, r3, #5
 8007752:	6a3b      	ldr	r3, [r7, #32]
 8007754:	4413      	add	r3, r2
 8007756:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800775a:	681a      	ldr	r2, [r3, #0]
 800775c:	7e7b      	ldrb	r3, [r7, #25]
 800775e:	075b      	lsls	r3, r3, #29
 8007760:	69f9      	ldr	r1, [r7, #28]
 8007762:	0148      	lsls	r0, r1, #5
 8007764:	6a39      	ldr	r1, [r7, #32]
 8007766:	4401      	add	r1, r0
 8007768:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 800776c:	4313      	orrs	r3, r2
 800776e:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007770:	68bb      	ldr	r3, [r7, #8]
 8007772:	799b      	ldrb	r3, [r3, #6]
 8007774:	2b01      	cmp	r3, #1
 8007776:	f040 80c3 	bne.w	8007900 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	7c5b      	ldrb	r3, [r3, #17]
 800777e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007780:	68ba      	ldr	r2, [r7, #8]
 8007782:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007784:	4313      	orrs	r3, r2
 8007786:	69fa      	ldr	r2, [r7, #28]
 8007788:	0151      	lsls	r1, r2, #5
 800778a:	6a3a      	ldr	r2, [r7, #32]
 800778c:	440a      	add	r2, r1
 800778e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007792:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007796:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007798:	69fb      	ldr	r3, [r7, #28]
 800779a:	015a      	lsls	r2, r3, #5
 800779c:	6a3b      	ldr	r3, [r7, #32]
 800779e:	4413      	add	r3, r2
 80077a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077a4:	68db      	ldr	r3, [r3, #12]
 80077a6:	69fa      	ldr	r2, [r7, #28]
 80077a8:	0151      	lsls	r1, r2, #5
 80077aa:	6a3a      	ldr	r2, [r7, #32]
 80077ac:	440a      	add	r2, r1
 80077ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077b2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80077b6:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	79db      	ldrb	r3, [r3, #7]
 80077bc:	2b01      	cmp	r3, #1
 80077be:	d123      	bne.n	8007808 <USB_HC_StartXfer+0x2dc>
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	78db      	ldrb	r3, [r3, #3]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d11f      	bne.n	8007808 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 80077c8:	69fb      	ldr	r3, [r7, #28]
 80077ca:	015a      	lsls	r2, r3, #5
 80077cc:	6a3b      	ldr	r3, [r7, #32]
 80077ce:	4413      	add	r3, r2
 80077d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077d4:	685b      	ldr	r3, [r3, #4]
 80077d6:	69fa      	ldr	r2, [r7, #28]
 80077d8:	0151      	lsls	r1, r2, #5
 80077da:	6a3a      	ldr	r2, [r7, #32]
 80077dc:	440a      	add	r2, r1
 80077de:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80077e6:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 80077e8:	69fb      	ldr	r3, [r7, #28]
 80077ea:	015a      	lsls	r2, r3, #5
 80077ec:	6a3b      	ldr	r3, [r7, #32]
 80077ee:	4413      	add	r3, r2
 80077f0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077f4:	68db      	ldr	r3, [r3, #12]
 80077f6:	69fa      	ldr	r2, [r7, #28]
 80077f8:	0151      	lsls	r1, r2, #5
 80077fa:	6a3a      	ldr	r2, [r7, #32]
 80077fc:	440a      	add	r2, r1
 80077fe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007802:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007806:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007808:	68bb      	ldr	r3, [r7, #8]
 800780a:	7c9b      	ldrb	r3, [r3, #18]
 800780c:	2b01      	cmp	r3, #1
 800780e:	d003      	beq.n	8007818 <USB_HC_StartXfer+0x2ec>
 8007810:	68bb      	ldr	r3, [r7, #8]
 8007812:	7c9b      	ldrb	r3, [r3, #18]
 8007814:	2b03      	cmp	r3, #3
 8007816:	d117      	bne.n	8007848 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007818:	68bb      	ldr	r3, [r7, #8]
 800781a:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 800781c:	2b01      	cmp	r3, #1
 800781e:	d113      	bne.n	8007848 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007820:	68bb      	ldr	r3, [r7, #8]
 8007822:	78db      	ldrb	r3, [r3, #3]
 8007824:	2b01      	cmp	r3, #1
 8007826:	d10f      	bne.n	8007848 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007828:	69fb      	ldr	r3, [r7, #28]
 800782a:	015a      	lsls	r2, r3, #5
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	4413      	add	r3, r2
 8007830:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007834:	685b      	ldr	r3, [r3, #4]
 8007836:	69fa      	ldr	r2, [r7, #28]
 8007838:	0151      	lsls	r1, r2, #5
 800783a:	6a3a      	ldr	r2, [r7, #32]
 800783c:	440a      	add	r2, r1
 800783e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007842:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007846:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007848:	68bb      	ldr	r3, [r7, #8]
 800784a:	7c9b      	ldrb	r3, [r3, #18]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d162      	bne.n	8007916 <USB_HC_StartXfer+0x3ea>
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	78db      	ldrb	r3, [r3, #3]
 8007854:	2b00      	cmp	r3, #0
 8007856:	d15e      	bne.n	8007916 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	68db      	ldr	r3, [r3, #12]
 800785c:	3b01      	subs	r3, #1
 800785e:	2b03      	cmp	r3, #3
 8007860:	d858      	bhi.n	8007914 <USB_HC_StartXfer+0x3e8>
 8007862:	a201      	add	r2, pc, #4	@ (adr r2, 8007868 <USB_HC_StartXfer+0x33c>)
 8007864:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007868:	08007879 	.word	0x08007879
 800786c:	0800789b 	.word	0x0800789b
 8007870:	080078bd 	.word	0x080078bd
 8007874:	080078df 	.word	0x080078df
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007878:	69fb      	ldr	r3, [r7, #28]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	6a3b      	ldr	r3, [r7, #32]
 800787e:	4413      	add	r3, r2
 8007880:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	69fa      	ldr	r2, [r7, #28]
 8007888:	0151      	lsls	r1, r2, #5
 800788a:	6a3a      	ldr	r2, [r7, #32]
 800788c:	440a      	add	r2, r1
 800788e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007892:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007896:	6053      	str	r3, [r2, #4]
          break;
 8007898:	e03d      	b.n	8007916 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 800789a:	69fb      	ldr	r3, [r7, #28]
 800789c:	015a      	lsls	r2, r3, #5
 800789e:	6a3b      	ldr	r3, [r7, #32]
 80078a0:	4413      	add	r3, r2
 80078a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078a6:	685b      	ldr	r3, [r3, #4]
 80078a8:	69fa      	ldr	r2, [r7, #28]
 80078aa:	0151      	lsls	r1, r2, #5
 80078ac:	6a3a      	ldr	r2, [r7, #32]
 80078ae:	440a      	add	r2, r1
 80078b0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078b4:	f043 030e 	orr.w	r3, r3, #14
 80078b8:	6053      	str	r3, [r2, #4]
          break;
 80078ba:	e02c      	b.n	8007916 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 80078bc:	69fb      	ldr	r3, [r7, #28]
 80078be:	015a      	lsls	r2, r3, #5
 80078c0:	6a3b      	ldr	r3, [r7, #32]
 80078c2:	4413      	add	r3, r2
 80078c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078c8:	685b      	ldr	r3, [r3, #4]
 80078ca:	69fa      	ldr	r2, [r7, #28]
 80078cc:	0151      	lsls	r1, r2, #5
 80078ce:	6a3a      	ldr	r2, [r7, #32]
 80078d0:	440a      	add	r2, r1
 80078d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80078da:	6053      	str	r3, [r2, #4]
          break;
 80078dc:	e01b      	b.n	8007916 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 80078de:	69fb      	ldr	r3, [r7, #28]
 80078e0:	015a      	lsls	r2, r3, #5
 80078e2:	6a3b      	ldr	r3, [r7, #32]
 80078e4:	4413      	add	r3, r2
 80078e6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ea:	685b      	ldr	r3, [r3, #4]
 80078ec:	69fa      	ldr	r2, [r7, #28]
 80078ee:	0151      	lsls	r1, r2, #5
 80078f0:	6a3a      	ldr	r2, [r7, #32]
 80078f2:	440a      	add	r2, r1
 80078f4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078f8:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80078fc:	6053      	str	r3, [r2, #4]
          break;
 80078fe:	e00a      	b.n	8007916 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007900:	69fb      	ldr	r3, [r7, #28]
 8007902:	015a      	lsls	r2, r3, #5
 8007904:	6a3b      	ldr	r3, [r7, #32]
 8007906:	4413      	add	r3, r2
 8007908:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800790c:	461a      	mov	r2, r3
 800790e:	2300      	movs	r3, #0
 8007910:	6053      	str	r3, [r2, #4]
 8007912:	e000      	b.n	8007916 <USB_HC_StartXfer+0x3ea>
          break;
 8007914:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007916:	69fb      	ldr	r3, [r7, #28]
 8007918:	015a      	lsls	r2, r3, #5
 800791a:	6a3b      	ldr	r3, [r7, #32]
 800791c:	4413      	add	r3, r2
 800791e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007926:	693b      	ldr	r3, [r7, #16]
 8007928:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800792c:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	78db      	ldrb	r3, [r3, #3]
 8007932:	2b00      	cmp	r3, #0
 8007934:	d004      	beq.n	8007940 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007936:	693b      	ldr	r3, [r7, #16]
 8007938:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800793c:	613b      	str	r3, [r7, #16]
 800793e:	e003      	b.n	8007948 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007940:	693b      	ldr	r3, [r7, #16]
 8007942:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007946:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007948:	693b      	ldr	r3, [r7, #16]
 800794a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800794e:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007950:	69fb      	ldr	r3, [r7, #28]
 8007952:	015a      	lsls	r2, r3, #5
 8007954:	6a3b      	ldr	r3, [r7, #32]
 8007956:	4413      	add	r3, r2
 8007958:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800795c:	461a      	mov	r2, r3
 800795e:	693b      	ldr	r3, [r7, #16]
 8007960:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007962:	79fb      	ldrb	r3, [r7, #7]
 8007964:	2b00      	cmp	r3, #0
 8007966:	d003      	beq.n	8007970 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007968:	2300      	movs	r3, #0
 800796a:	e055      	b.n	8007a18 <USB_HC_StartXfer+0x4ec>
 800796c:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007970:	68bb      	ldr	r3, [r7, #8]
 8007972:	78db      	ldrb	r3, [r3, #3]
 8007974:	2b00      	cmp	r3, #0
 8007976:	d14e      	bne.n	8007a16 <USB_HC_StartXfer+0x4ea>
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	6a1b      	ldr	r3, [r3, #32]
 800797c:	2b00      	cmp	r3, #0
 800797e:	d04a      	beq.n	8007a16 <USB_HC_StartXfer+0x4ea>
 8007980:	68bb      	ldr	r3, [r7, #8]
 8007982:	79db      	ldrb	r3, [r3, #7]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d146      	bne.n	8007a16 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007988:	68bb      	ldr	r3, [r7, #8]
 800798a:	7c9b      	ldrb	r3, [r3, #18]
 800798c:	2b03      	cmp	r3, #3
 800798e:	d831      	bhi.n	80079f4 <USB_HC_StartXfer+0x4c8>
 8007990:	a201      	add	r2, pc, #4	@ (adr r2, 8007998 <USB_HC_StartXfer+0x46c>)
 8007992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007996:	bf00      	nop
 8007998:	080079a9 	.word	0x080079a9
 800799c:	080079cd 	.word	0x080079cd
 80079a0:	080079a9 	.word	0x080079a9
 80079a4:	080079cd 	.word	0x080079cd
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079a8:	68bb      	ldr	r3, [r7, #8]
 80079aa:	6a1b      	ldr	r3, [r3, #32]
 80079ac:	3303      	adds	r3, #3
 80079ae:	089b      	lsrs	r3, r3, #2
 80079b0:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 80079b2:	8afa      	ldrh	r2, [r7, #22]
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b8:	b29b      	uxth	r3, r3
 80079ba:	429a      	cmp	r2, r3
 80079bc:	d91c      	bls.n	80079f8 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	699b      	ldr	r3, [r3, #24]
 80079c2:	f043 0220 	orr.w	r2, r3, #32
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	619a      	str	r2, [r3, #24]
        }
        break;
 80079ca:	e015      	b.n	80079f8 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 80079cc:	68bb      	ldr	r3, [r7, #8]
 80079ce:	6a1b      	ldr	r3, [r3, #32]
 80079d0:	3303      	adds	r3, #3
 80079d2:	089b      	lsrs	r3, r3, #2
 80079d4:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 80079d6:	8afa      	ldrh	r2, [r7, #22]
 80079d8:	6a3b      	ldr	r3, [r7, #32]
 80079da:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80079de:	691b      	ldr	r3, [r3, #16]
 80079e0:	b29b      	uxth	r3, r3
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d90a      	bls.n	80079fc <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	699b      	ldr	r3, [r3, #24]
 80079ea:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	619a      	str	r2, [r3, #24]
        }
        break;
 80079f2:	e003      	b.n	80079fc <USB_HC_StartXfer+0x4d0>

      default:
        break;
 80079f4:	bf00      	nop
 80079f6:	e002      	b.n	80079fe <USB_HC_StartXfer+0x4d2>
        break;
 80079f8:	bf00      	nop
 80079fa:	e000      	b.n	80079fe <USB_HC_StartXfer+0x4d2>
        break;
 80079fc:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	6999      	ldr	r1, [r3, #24]
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	785a      	ldrb	r2, [r3, #1]
 8007a06:	68bb      	ldr	r3, [r7, #8]
 8007a08:	6a1b      	ldr	r3, [r3, #32]
 8007a0a:	b29b      	uxth	r3, r3
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	9000      	str	r0, [sp, #0]
 8007a10:	68f8      	ldr	r0, [r7, #12]
 8007a12:	f7ff f9c9 	bl	8006da8 <USB_WritePacket>
  }

  return HAL_OK;
 8007a16:	2300      	movs	r3, #0
}
 8007a18:	4618      	mov	r0, r3
 8007a1a:	3728      	adds	r7, #40	@ 0x28
 8007a1c:	46bd      	mov	sp, r7
 8007a1e:	bd80      	pop	{r7, pc}

08007a20 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007a20:	b480      	push	{r7}
 8007a22:	b085      	sub	sp, #20
 8007a24:	af00      	add	r7, sp, #0
 8007a26:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a32:	695b      	ldr	r3, [r3, #20]
 8007a34:	b29b      	uxth	r3, r3
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3714      	adds	r7, #20
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a40:	4770      	bx	lr

08007a42 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007a42:	b480      	push	{r7}
 8007a44:	b089      	sub	sp, #36	@ 0x24
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
 8007a4a:	460b      	mov	r3, r1
 8007a4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007a52:	78fb      	ldrb	r3, [r7, #3]
 8007a54:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007a56:	2300      	movs	r3, #0
 8007a58:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	015a      	lsls	r2, r3, #5
 8007a5e:	69fb      	ldr	r3, [r7, #28]
 8007a60:	4413      	add	r3, r2
 8007a62:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	0c9b      	lsrs	r3, r3, #18
 8007a6a:	f003 0303 	and.w	r3, r3, #3
 8007a6e:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007a70:	69bb      	ldr	r3, [r7, #24]
 8007a72:	015a      	lsls	r2, r3, #5
 8007a74:	69fb      	ldr	r3, [r7, #28]
 8007a76:	4413      	add	r3, r2
 8007a78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	0fdb      	lsrs	r3, r3, #31
 8007a80:	f003 0301 	and.w	r3, r3, #1
 8007a84:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007a86:	69bb      	ldr	r3, [r7, #24]
 8007a88:	015a      	lsls	r2, r3, #5
 8007a8a:	69fb      	ldr	r3, [r7, #28]
 8007a8c:	4413      	add	r3, r2
 8007a8e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a92:	685b      	ldr	r3, [r3, #4]
 8007a94:	0fdb      	lsrs	r3, r3, #31
 8007a96:	f003 0301 	and.w	r3, r3, #1
 8007a9a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	689b      	ldr	r3, [r3, #8]
 8007aa0:	f003 0320 	and.w	r3, r3, #32
 8007aa4:	2b20      	cmp	r3, #32
 8007aa6:	d10d      	bne.n	8007ac4 <USB_HC_Halt+0x82>
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d10a      	bne.n	8007ac4 <USB_HC_Halt+0x82>
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d005      	beq.n	8007ac0 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007ab4:	697b      	ldr	r3, [r7, #20]
 8007ab6:	2b01      	cmp	r3, #1
 8007ab8:	d002      	beq.n	8007ac0 <USB_HC_Halt+0x7e>
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	2b03      	cmp	r3, #3
 8007abe:	d101      	bne.n	8007ac4 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	e0d8      	b.n	8007c76 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007ac4:	697b      	ldr	r3, [r7, #20]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <USB_HC_Halt+0x8e>
 8007aca:	697b      	ldr	r3, [r7, #20]
 8007acc:	2b02      	cmp	r3, #2
 8007ace:	d173      	bne.n	8007bb8 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007ad0:	69bb      	ldr	r3, [r7, #24]
 8007ad2:	015a      	lsls	r2, r3, #5
 8007ad4:	69fb      	ldr	r3, [r7, #28]
 8007ad6:	4413      	add	r3, r2
 8007ad8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	69ba      	ldr	r2, [r7, #24]
 8007ae0:	0151      	lsls	r1, r2, #5
 8007ae2:	69fa      	ldr	r2, [r7, #28]
 8007ae4:	440a      	add	r2, r1
 8007ae6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007aea:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007aee:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	689b      	ldr	r3, [r3, #8]
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d14a      	bne.n	8007b92 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b00:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d133      	bne.n	8007b70 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007b08:	69bb      	ldr	r3, [r7, #24]
 8007b0a:	015a      	lsls	r2, r3, #5
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	4413      	add	r3, r2
 8007b10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	69ba      	ldr	r2, [r7, #24]
 8007b18:	0151      	lsls	r1, r2, #5
 8007b1a:	69fa      	ldr	r2, [r7, #28]
 8007b1c:	440a      	add	r2, r1
 8007b1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b22:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007b26:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b28:	69bb      	ldr	r3, [r7, #24]
 8007b2a:	015a      	lsls	r2, r3, #5
 8007b2c:	69fb      	ldr	r3, [r7, #28]
 8007b2e:	4413      	add	r3, r2
 8007b30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	69ba      	ldr	r2, [r7, #24]
 8007b38:	0151      	lsls	r1, r2, #5
 8007b3a:	69fa      	ldr	r2, [r7, #28]
 8007b3c:	440a      	add	r2, r1
 8007b3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b42:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b46:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007b48:	68bb      	ldr	r3, [r7, #8]
 8007b4a:	3301      	adds	r3, #1
 8007b4c:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007b4e:	68bb      	ldr	r3, [r7, #8]
 8007b50:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007b54:	d82e      	bhi.n	8007bb4 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007b56:	69bb      	ldr	r3, [r7, #24]
 8007b58:	015a      	lsls	r2, r3, #5
 8007b5a:	69fb      	ldr	r3, [r7, #28]
 8007b5c:	4413      	add	r3, r2
 8007b5e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007b68:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007b6c:	d0ec      	beq.n	8007b48 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b6e:	e081      	b.n	8007c74 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b70:	69bb      	ldr	r3, [r7, #24]
 8007b72:	015a      	lsls	r2, r3, #5
 8007b74:	69fb      	ldr	r3, [r7, #28]
 8007b76:	4413      	add	r3, r2
 8007b78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	69ba      	ldr	r2, [r7, #24]
 8007b80:	0151      	lsls	r1, r2, #5
 8007b82:	69fa      	ldr	r2, [r7, #28]
 8007b84:	440a      	add	r2, r1
 8007b86:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007b8a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007b8e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007b90:	e070      	b.n	8007c74 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007b92:	69bb      	ldr	r3, [r7, #24]
 8007b94:	015a      	lsls	r2, r3, #5
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	4413      	add	r3, r2
 8007b9a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	69ba      	ldr	r2, [r7, #24]
 8007ba2:	0151      	lsls	r1, r2, #5
 8007ba4:	69fa      	ldr	r2, [r7, #28]
 8007ba6:	440a      	add	r2, r1
 8007ba8:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007bb0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bb2:	e05f      	b.n	8007c74 <USB_HC_Halt+0x232>
            break;
 8007bb4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007bb6:	e05d      	b.n	8007c74 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007bb8:	69bb      	ldr	r3, [r7, #24]
 8007bba:	015a      	lsls	r2, r3, #5
 8007bbc:	69fb      	ldr	r3, [r7, #28]
 8007bbe:	4413      	add	r3, r2
 8007bc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bc4:	681b      	ldr	r3, [r3, #0]
 8007bc6:	69ba      	ldr	r2, [r7, #24]
 8007bc8:	0151      	lsls	r1, r2, #5
 8007bca:	69fa      	ldr	r2, [r7, #28]
 8007bcc:	440a      	add	r2, r1
 8007bce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bd2:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007bd6:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007be4:	2b00      	cmp	r3, #0
 8007be6:	d133      	bne.n	8007c50 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007be8:	69bb      	ldr	r3, [r7, #24]
 8007bea:	015a      	lsls	r2, r3, #5
 8007bec:	69fb      	ldr	r3, [r7, #28]
 8007bee:	4413      	add	r3, r2
 8007bf0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	69ba      	ldr	r2, [r7, #24]
 8007bf8:	0151      	lsls	r1, r2, #5
 8007bfa:	69fa      	ldr	r2, [r7, #28]
 8007bfc:	440a      	add	r2, r1
 8007bfe:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c02:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007c06:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c08:	69bb      	ldr	r3, [r7, #24]
 8007c0a:	015a      	lsls	r2, r3, #5
 8007c0c:	69fb      	ldr	r3, [r7, #28]
 8007c0e:	4413      	add	r3, r2
 8007c10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	69ba      	ldr	r2, [r7, #24]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c26:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007c28:	68bb      	ldr	r3, [r7, #8]
 8007c2a:	3301      	adds	r3, #1
 8007c2c:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007c34:	d81d      	bhi.n	8007c72 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007c36:	69bb      	ldr	r3, [r7, #24]
 8007c38:	015a      	lsls	r2, r3, #5
 8007c3a:	69fb      	ldr	r3, [r7, #28]
 8007c3c:	4413      	add	r3, r2
 8007c3e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007c48:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007c4c:	d0ec      	beq.n	8007c28 <USB_HC_Halt+0x1e6>
 8007c4e:	e011      	b.n	8007c74 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007c50:	69bb      	ldr	r3, [r7, #24]
 8007c52:	015a      	lsls	r2, r3, #5
 8007c54:	69fb      	ldr	r3, [r7, #28]
 8007c56:	4413      	add	r3, r2
 8007c58:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	69ba      	ldr	r2, [r7, #24]
 8007c60:	0151      	lsls	r1, r2, #5
 8007c62:	69fa      	ldr	r2, [r7, #28]
 8007c64:	440a      	add	r2, r1
 8007c66:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c6a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007c6e:	6013      	str	r3, [r2, #0]
 8007c70:	e000      	b.n	8007c74 <USB_HC_Halt+0x232>
          break;
 8007c72:	bf00      	nop
    }
  }

  return HAL_OK;
 8007c74:	2300      	movs	r3, #0
}
 8007c76:	4618      	mov	r0, r3
 8007c78:	3724      	adds	r7, #36	@ 0x24
 8007c7a:	46bd      	mov	sp, r7
 8007c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c80:	4770      	bx	lr
	...

08007c84 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b087      	sub	sp, #28
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8007c94:	78fb      	ldrb	r3, [r7, #3]
 8007c96:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	04da      	lsls	r2, r3, #19
 8007ca0:	4b15      	ldr	r3, [pc, #84]	@ (8007cf8 <USB_DoPing+0x74>)
 8007ca2:	4013      	ands	r3, r2
 8007ca4:	693a      	ldr	r2, [r7, #16]
 8007ca6:	0151      	lsls	r1, r2, #5
 8007ca8:	697a      	ldr	r2, [r7, #20]
 8007caa:	440a      	add	r2, r1
 8007cac:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cb0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cb4:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8007cb6:	693b      	ldr	r3, [r7, #16]
 8007cb8:	015a      	lsls	r2, r3, #5
 8007cba:	697b      	ldr	r3, [r7, #20]
 8007cbc:	4413      	add	r3, r2
 8007cbe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007cc6:	68bb      	ldr	r3, [r7, #8]
 8007cc8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007ccc:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007cce:	68bb      	ldr	r3, [r7, #8]
 8007cd0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007cd4:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8007cd6:	693b      	ldr	r3, [r7, #16]
 8007cd8:	015a      	lsls	r2, r3, #5
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	4413      	add	r3, r2
 8007cde:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	68bb      	ldr	r3, [r7, #8]
 8007ce6:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8007ce8:	2300      	movs	r3, #0
}
 8007cea:	4618      	mov	r0, r3
 8007cec:	371c      	adds	r7, #28
 8007cee:	46bd      	mov	sp, r7
 8007cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cf4:	4770      	bx	lr
 8007cf6:	bf00      	nop
 8007cf8:	1ff80000 	.word	0x1ff80000

08007cfc <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 8007cfc:	b580      	push	{r7, lr}
 8007cfe:	b088      	sub	sp, #32
 8007d00:	af00      	add	r7, sp, #0
 8007d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8007d04:	2300      	movs	r3, #0
 8007d06:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 8007d10:	6878      	ldr	r0, [r7, #4]
 8007d12:	f7fe ff8c 	bl	8006c2e <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007d16:	2110      	movs	r1, #16
 8007d18:	6878      	ldr	r0, [r7, #4]
 8007d1a:	f7fe ffe5 	bl	8006ce8 <USB_FlushTxFifo>
 8007d1e:	4603      	mov	r3, r0
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d001      	beq.n	8007d28 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 8007d24:	2301      	movs	r3, #1
 8007d26:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007d28:	6878      	ldr	r0, [r7, #4]
 8007d2a:	f7ff f80f 	bl	8006d4c <USB_FlushRxFifo>
 8007d2e:	4603      	mov	r3, r0
 8007d30:	2b00      	cmp	r3, #0
 8007d32:	d001      	beq.n	8007d38 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 8007d38:	2300      	movs	r3, #0
 8007d3a:	61bb      	str	r3, [r7, #24]
 8007d3c:	e01f      	b.n	8007d7e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d3e:	69bb      	ldr	r3, [r7, #24]
 8007d40:	015a      	lsls	r2, r3, #5
 8007d42:	697b      	ldr	r3, [r7, #20]
 8007d44:	4413      	add	r3, r2
 8007d46:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007d54:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007d5c:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007d64:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007d66:	69bb      	ldr	r3, [r7, #24]
 8007d68:	015a      	lsls	r2, r3, #5
 8007d6a:	697b      	ldr	r3, [r7, #20]
 8007d6c:	4413      	add	r3, r2
 8007d6e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d72:	461a      	mov	r2, r3
 8007d74:	693b      	ldr	r3, [r7, #16]
 8007d76:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8007d78:	69bb      	ldr	r3, [r7, #24]
 8007d7a:	3301      	adds	r3, #1
 8007d7c:	61bb      	str	r3, [r7, #24]
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b0f      	cmp	r3, #15
 8007d82:	d9dc      	bls.n	8007d3e <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8007d84:	2300      	movs	r3, #0
 8007d86:	61bb      	str	r3, [r7, #24]
 8007d88:	e034      	b.n	8007df4 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007d8a:	69bb      	ldr	r3, [r7, #24]
 8007d8c:	015a      	lsls	r2, r3, #5
 8007d8e:	697b      	ldr	r3, [r7, #20]
 8007d90:	4413      	add	r3, r2
 8007d92:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007d9a:	693b      	ldr	r3, [r7, #16]
 8007d9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007da0:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007da8:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007daa:	693b      	ldr	r3, [r7, #16]
 8007dac:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007db0:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007db2:	69bb      	ldr	r3, [r7, #24]
 8007db4:	015a      	lsls	r2, r3, #5
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	4413      	add	r3, r2
 8007dba:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dbe:	461a      	mov	r2, r3
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	3301      	adds	r3, #1
 8007dc8:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007dd0:	d80c      	bhi.n	8007dec <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007dd2:	69bb      	ldr	r3, [r7, #24]
 8007dd4:	015a      	lsls	r2, r3, #5
 8007dd6:	697b      	ldr	r3, [r7, #20]
 8007dd8:	4413      	add	r3, r2
 8007dda:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007de4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007de8:	d0ec      	beq.n	8007dc4 <USB_StopHost+0xc8>
 8007dea:	e000      	b.n	8007dee <USB_StopHost+0xf2>
        break;
 8007dec:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 8007dee:	69bb      	ldr	r3, [r7, #24]
 8007df0:	3301      	adds	r3, #1
 8007df2:	61bb      	str	r3, [r7, #24]
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	2b0f      	cmp	r3, #15
 8007df8:	d9c7      	bls.n	8007d8a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 8007dfa:	697b      	ldr	r3, [r7, #20]
 8007dfc:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e00:	461a      	mov	r2, r3
 8007e02:	f04f 33ff 	mov.w	r3, #4294967295
 8007e06:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f04f 32ff 	mov.w	r2, #4294967295
 8007e0e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	f7fe fefb 	bl	8006c0c <USB_EnableGlobalInt>

  return ret;
 8007e16:	7ffb      	ldrb	r3, [r7, #31]
}
 8007e18:	4618      	mov	r0, r3
 8007e1a:	3720      	adds	r7, #32
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	bd80      	pop	{r7, pc}

08007e20 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 8007e20:	b590      	push	{r4, r7, lr}
 8007e22:	b089      	sub	sp, #36	@ 0x24
 8007e24:	af04      	add	r7, sp, #16
 8007e26:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 8007e28:	2301      	movs	r3, #1
 8007e2a:	2202      	movs	r2, #2
 8007e2c:	2102      	movs	r1, #2
 8007e2e:	6878      	ldr	r0, [r7, #4]
 8007e30:	f000 fc85 	bl	800873e <USBH_FindInterface>
 8007e34:	4603      	mov	r3, r0
 8007e36:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007e38:	7bfb      	ldrb	r3, [r7, #15]
 8007e3a:	2bff      	cmp	r3, #255	@ 0xff
 8007e3c:	d002      	beq.n	8007e44 <USBH_CDC_InterfaceInit+0x24>
 8007e3e:	7bfb      	ldrb	r3, [r7, #15]
 8007e40:	2b01      	cmp	r3, #1
 8007e42:	d901      	bls.n	8007e48 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007e44:	2302      	movs	r3, #2
 8007e46:	e13d      	b.n	80080c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 8007e48:	7bfb      	ldrb	r3, [r7, #15]
 8007e4a:	4619      	mov	r1, r3
 8007e4c:	6878      	ldr	r0, [r7, #4]
 8007e4e:	f000 fc5a 	bl	8008706 <USBH_SelectInterface>
 8007e52:	4603      	mov	r3, r0
 8007e54:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 8007e56:	7bbb      	ldrb	r3, [r7, #14]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d001      	beq.n	8007e60 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007e5c:	2302      	movs	r3, #2
 8007e5e:	e131      	b.n	80080c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 8007e66:	2050      	movs	r0, #80	@ 0x50
 8007e68:	f002 fb64 	bl	800a534 <malloc>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8007e76:	69db      	ldr	r3, [r3, #28]
 8007e78:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007e7a:	68bb      	ldr	r3, [r7, #8]
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d101      	bne.n	8007e84 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007e80:	2302      	movs	r3, #2
 8007e82:	e11f      	b.n	80080c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8007e84:	2250      	movs	r2, #80	@ 0x50
 8007e86:	2100      	movs	r1, #0
 8007e88:	68b8      	ldr	r0, [r7, #8]
 8007e8a:	f002 fc11 	bl	800a6b0 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007e8e:	7bfb      	ldrb	r3, [r7, #15]
 8007e90:	687a      	ldr	r2, [r7, #4]
 8007e92:	211a      	movs	r1, #26
 8007e94:	fb01 f303 	mul.w	r3, r1, r3
 8007e98:	4413      	add	r3, r2
 8007e9a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	b25b      	sxtb	r3, r3
 8007ea2:	2b00      	cmp	r3, #0
 8007ea4:	da15      	bge.n	8007ed2 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007ea6:	7bfb      	ldrb	r3, [r7, #15]
 8007ea8:	687a      	ldr	r2, [r7, #4]
 8007eaa:	211a      	movs	r1, #26
 8007eac:	fb01 f303 	mul.w	r3, r1, r3
 8007eb0:	4413      	add	r3, r2
 8007eb2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007eb6:	781a      	ldrb	r2, [r3, #0]
 8007eb8:	68bb      	ldr	r3, [r7, #8]
 8007eba:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007ebc:	7bfb      	ldrb	r3, [r7, #15]
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	211a      	movs	r1, #26
 8007ec2:	fb01 f303 	mul.w	r3, r1, r3
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007ecc:	881a      	ldrh	r2, [r3, #0]
 8007ece:	68bb      	ldr	r3, [r7, #8]
 8007ed0:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007ed2:	68bb      	ldr	r3, [r7, #8]
 8007ed4:	785b      	ldrb	r3, [r3, #1]
 8007ed6:	4619      	mov	r1, r3
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f001 ffbe 	bl	8009e5a <USBH_AllocPipe>
 8007ede:	4603      	mov	r3, r0
 8007ee0:	461a      	mov	r2, r3
 8007ee2:	68bb      	ldr	r3, [r7, #8]
 8007ee4:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8007ee6:	68bb      	ldr	r3, [r7, #8]
 8007ee8:	7819      	ldrb	r1, [r3, #0]
 8007eea:	68bb      	ldr	r3, [r7, #8]
 8007eec:	7858      	ldrb	r0, [r3, #1]
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8007efa:	68ba      	ldr	r2, [r7, #8]
 8007efc:	8952      	ldrh	r2, [r2, #10]
 8007efe:	9202      	str	r2, [sp, #8]
 8007f00:	2203      	movs	r2, #3
 8007f02:	9201      	str	r2, [sp, #4]
 8007f04:	9300      	str	r3, [sp, #0]
 8007f06:	4623      	mov	r3, r4
 8007f08:	4602      	mov	r2, r0
 8007f0a:	6878      	ldr	r0, [r7, #4]
 8007f0c:	f001 ff76 	bl	8009dfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 8007f10:	68bb      	ldr	r3, [r7, #8]
 8007f12:	781b      	ldrb	r3, [r3, #0]
 8007f14:	2200      	movs	r2, #0
 8007f16:	4619      	mov	r1, r3
 8007f18:	6878      	ldr	r0, [r7, #4]
 8007f1a:	f002 fa85 	bl	800a428 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 8007f1e:	2300      	movs	r3, #0
 8007f20:	2200      	movs	r2, #0
 8007f22:	210a      	movs	r1, #10
 8007f24:	6878      	ldr	r0, [r7, #4]
 8007f26:	f000 fc0a 	bl	800873e <USBH_FindInterface>
 8007f2a:	4603      	mov	r3, r0
 8007f2c:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 8007f2e:	7bfb      	ldrb	r3, [r7, #15]
 8007f30:	2bff      	cmp	r3, #255	@ 0xff
 8007f32:	d002      	beq.n	8007f3a <USBH_CDC_InterfaceInit+0x11a>
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	2b01      	cmp	r3, #1
 8007f38:	d901      	bls.n	8007f3e <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007f3a:	2302      	movs	r3, #2
 8007f3c:	e0c2      	b.n	80080c4 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 8007f3e:	7bfb      	ldrb	r3, [r7, #15]
 8007f40:	687a      	ldr	r2, [r7, #4]
 8007f42:	211a      	movs	r1, #26
 8007f44:	fb01 f303 	mul.w	r3, r1, r3
 8007f48:	4413      	add	r3, r2
 8007f4a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f4e:	781b      	ldrb	r3, [r3, #0]
 8007f50:	b25b      	sxtb	r3, r3
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	da16      	bge.n	8007f84 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f56:	7bfb      	ldrb	r3, [r7, #15]
 8007f58:	687a      	ldr	r2, [r7, #4]
 8007f5a:	211a      	movs	r1, #26
 8007f5c:	fb01 f303 	mul.w	r3, r1, r3
 8007f60:	4413      	add	r3, r2
 8007f62:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f66:	781a      	ldrb	r2, [r3, #0]
 8007f68:	68bb      	ldr	r3, [r7, #8]
 8007f6a:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f6c:	7bfb      	ldrb	r3, [r7, #15]
 8007f6e:	687a      	ldr	r2, [r7, #4]
 8007f70:	211a      	movs	r1, #26
 8007f72:	fb01 f303 	mul.w	r3, r1, r3
 8007f76:	4413      	add	r3, r2
 8007f78:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007f7c:	881a      	ldrh	r2, [r3, #0]
 8007f7e:	68bb      	ldr	r3, [r7, #8]
 8007f80:	835a      	strh	r2, [r3, #26]
 8007f82:	e015      	b.n	8007fb0 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8007f84:	7bfb      	ldrb	r3, [r7, #15]
 8007f86:	687a      	ldr	r2, [r7, #4]
 8007f88:	211a      	movs	r1, #26
 8007f8a:	fb01 f303 	mul.w	r3, r1, r3
 8007f8e:	4413      	add	r3, r2
 8007f90:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8007f94:	781a      	ldrb	r2, [r3, #0]
 8007f96:	68bb      	ldr	r3, [r7, #8]
 8007f98:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007f9a:	7bfb      	ldrb	r3, [r7, #15]
 8007f9c:	687a      	ldr	r2, [r7, #4]
 8007f9e:	211a      	movs	r1, #26
 8007fa0:	fb01 f303 	mul.w	r3, r1, r3
 8007fa4:	4413      	add	r3, r2
 8007fa6:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 8007faa:	881a      	ldrh	r2, [r3, #0]
 8007fac:	68bb      	ldr	r3, [r7, #8]
 8007fae:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	211a      	movs	r1, #26
 8007fb6:	fb01 f303 	mul.w	r3, r1, r3
 8007fba:	4413      	add	r3, r2
 8007fbc:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fc0:	781b      	ldrb	r3, [r3, #0]
 8007fc2:	b25b      	sxtb	r3, r3
 8007fc4:	2b00      	cmp	r3, #0
 8007fc6:	da16      	bge.n	8007ff6 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007fc8:	7bfb      	ldrb	r3, [r7, #15]
 8007fca:	687a      	ldr	r2, [r7, #4]
 8007fcc:	211a      	movs	r1, #26
 8007fce:	fb01 f303 	mul.w	r3, r1, r3
 8007fd2:	4413      	add	r3, r2
 8007fd4:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8007fd8:	781a      	ldrb	r2, [r3, #0]
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 8007fde:	7bfb      	ldrb	r3, [r7, #15]
 8007fe0:	687a      	ldr	r2, [r7, #4]
 8007fe2:	211a      	movs	r1, #26
 8007fe4:	fb01 f303 	mul.w	r3, r1, r3
 8007fe8:	4413      	add	r3, r2
 8007fea:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007fee:	881a      	ldrh	r2, [r3, #0]
 8007ff0:	68bb      	ldr	r3, [r7, #8]
 8007ff2:	835a      	strh	r2, [r3, #26]
 8007ff4:	e015      	b.n	8008022 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8007ff6:	7bfb      	ldrb	r3, [r7, #15]
 8007ff8:	687a      	ldr	r2, [r7, #4]
 8007ffa:	211a      	movs	r1, #26
 8007ffc:	fb01 f303 	mul.w	r3, r1, r3
 8008000:	4413      	add	r3, r2
 8008002:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008006:	781a      	ldrb	r2, [r3, #0]
 8008008:	68bb      	ldr	r3, [r7, #8]
 800800a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800800c:	7bfb      	ldrb	r3, [r7, #15]
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	211a      	movs	r1, #26
 8008012:	fb01 f303 	mul.w	r3, r1, r3
 8008016:	4413      	add	r3, r2
 8008018:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800801c:	881a      	ldrh	r2, [r3, #0]
 800801e:	68bb      	ldr	r3, [r7, #8]
 8008020:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 8008022:	68bb      	ldr	r3, [r7, #8]
 8008024:	7b9b      	ldrb	r3, [r3, #14]
 8008026:	4619      	mov	r1, r3
 8008028:	6878      	ldr	r0, [r7, #4]
 800802a:	f001 ff16 	bl	8009e5a <USBH_AllocPipe>
 800802e:	4603      	mov	r3, r0
 8008030:	461a      	mov	r2, r3
 8008032:	68bb      	ldr	r3, [r7, #8]
 8008034:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 8008036:	68bb      	ldr	r3, [r7, #8]
 8008038:	7bdb      	ldrb	r3, [r3, #15]
 800803a:	4619      	mov	r1, r3
 800803c:	6878      	ldr	r0, [r7, #4]
 800803e:	f001 ff0c 	bl	8009e5a <USBH_AllocPipe>
 8008042:	4603      	mov	r3, r0
 8008044:	461a      	mov	r2, r3
 8008046:	68bb      	ldr	r3, [r7, #8]
 8008048:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 800804a:	68bb      	ldr	r3, [r7, #8]
 800804c:	7b59      	ldrb	r1, [r3, #13]
 800804e:	68bb      	ldr	r3, [r7, #8]
 8008050:	7b98      	ldrb	r0, [r3, #14]
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800805e:	68ba      	ldr	r2, [r7, #8]
 8008060:	8b12      	ldrh	r2, [r2, #24]
 8008062:	9202      	str	r2, [sp, #8]
 8008064:	2202      	movs	r2, #2
 8008066:	9201      	str	r2, [sp, #4]
 8008068:	9300      	str	r3, [sp, #0]
 800806a:	4623      	mov	r3, r4
 800806c:	4602      	mov	r2, r0
 800806e:	6878      	ldr	r0, [r7, #4]
 8008070:	f001 fec4 	bl	8009dfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008074:	68bb      	ldr	r3, [r7, #8]
 8008076:	7b19      	ldrb	r1, [r3, #12]
 8008078:	68bb      	ldr	r3, [r7, #8]
 800807a:	7bd8      	ldrb	r0, [r3, #15]
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008088:	68ba      	ldr	r2, [r7, #8]
 800808a:	8b52      	ldrh	r2, [r2, #26]
 800808c:	9202      	str	r2, [sp, #8]
 800808e:	2202      	movs	r2, #2
 8008090:	9201      	str	r2, [sp, #4]
 8008092:	9300      	str	r3, [sp, #0]
 8008094:	4623      	mov	r3, r4
 8008096:	4602      	mov	r2, r0
 8008098:	6878      	ldr	r0, [r7, #4]
 800809a:	f001 feaf 	bl	8009dfc <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 80080a6:	68bb      	ldr	r3, [r7, #8]
 80080a8:	7b5b      	ldrb	r3, [r3, #13]
 80080aa:	2200      	movs	r2, #0
 80080ac:	4619      	mov	r1, r3
 80080ae:	6878      	ldr	r0, [r7, #4]
 80080b0:	f002 f9ba 	bl	800a428 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 80080b4:	68bb      	ldr	r3, [r7, #8]
 80080b6:	7b1b      	ldrb	r3, [r3, #12]
 80080b8:	2200      	movs	r2, #0
 80080ba:	4619      	mov	r1, r3
 80080bc:	6878      	ldr	r0, [r7, #4]
 80080be:	f002 f9b3 	bl	800a428 <USBH_LL_SetToggle>

  return USBH_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3714      	adds	r7, #20
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd90      	pop	{r4, r7, pc}

080080cc <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 80080cc:	b580      	push	{r7, lr}
 80080ce:	b084      	sub	sp, #16
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80080da:	69db      	ldr	r3, [r3, #28]
 80080dc:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	781b      	ldrb	r3, [r3, #0]
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d00e      	beq.n	8008104 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	781b      	ldrb	r3, [r3, #0]
 80080ea:	4619      	mov	r1, r3
 80080ec:	6878      	ldr	r0, [r7, #4]
 80080ee:	f001 fea4 	bl	8009e3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	781b      	ldrb	r3, [r3, #0]
 80080f6:	4619      	mov	r1, r3
 80080f8:	6878      	ldr	r0, [r7, #4]
 80080fa:	f001 fecf 	bl	8009e9c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	2200      	movs	r2, #0
 8008102:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	7b1b      	ldrb	r3, [r3, #12]
 8008108:	2b00      	cmp	r3, #0
 800810a:	d00e      	beq.n	800812a <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	7b1b      	ldrb	r3, [r3, #12]
 8008110:	4619      	mov	r1, r3
 8008112:	6878      	ldr	r0, [r7, #4]
 8008114:	f001 fe91 	bl	8009e3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	7b1b      	ldrb	r3, [r3, #12]
 800811c:	4619      	mov	r1, r3
 800811e:	6878      	ldr	r0, [r7, #4]
 8008120:	f001 febc 	bl	8009e9c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2200      	movs	r2, #0
 8008128:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	7b5b      	ldrb	r3, [r3, #13]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d00e      	beq.n	8008150 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	7b5b      	ldrb	r3, [r3, #13]
 8008136:	4619      	mov	r1, r3
 8008138:	6878      	ldr	r0, [r7, #4]
 800813a:	f001 fe7e 	bl	8009e3a <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	7b5b      	ldrb	r3, [r3, #13]
 8008142:	4619      	mov	r1, r3
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f001 fea9 	bl	8009e9c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 800814a:	68fb      	ldr	r3, [r7, #12]
 800814c:	2200      	movs	r2, #0
 800814e:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008156:	69db      	ldr	r3, [r3, #28]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d00b      	beq.n	8008174 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008162:	69db      	ldr	r3, [r3, #28]
 8008164:	4618      	mov	r0, r3
 8008166:	f002 f9ed 	bl	800a544 <free>
    phost->pActiveClass->pData = 0U;
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008170:	2200      	movs	r2, #0
 8008172:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008174:	2300      	movs	r3, #0
}
 8008176:	4618      	mov	r0, r3
 8008178:	3710      	adds	r7, #16
 800817a:	46bd      	mov	sp, r7
 800817c:	bd80      	pop	{r7, pc}

0800817e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800817e:	b580      	push	{r7, lr}
 8008180:	b084      	sub	sp, #16
 8008182:	af00      	add	r7, sp, #0
 8008184:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800818c:	69db      	ldr	r3, [r3, #28]
 800818e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008190:	68fb      	ldr	r3, [r7, #12]
 8008192:	3340      	adds	r3, #64	@ 0x40
 8008194:	4619      	mov	r1, r3
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f8b1 	bl	80082fe <GetLineCoding>
 800819c:	4603      	mov	r3, r0
 800819e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 80081a0:	7afb      	ldrb	r3, [r7, #11]
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d105      	bne.n	80081b2 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80081ac:	2102      	movs	r1, #2
 80081ae:	6878      	ldr	r0, [r7, #4]
 80081b0:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 80081b2:	7afb      	ldrb	r3, [r7, #11]
}
 80081b4:	4618      	mov	r0, r3
 80081b6:	3710      	adds	r7, #16
 80081b8:	46bd      	mov	sp, r7
 80081ba:	bd80      	pop	{r7, pc}

080081bc <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 80081bc:	b580      	push	{r7, lr}
 80081be:	b084      	sub	sp, #16
 80081c0:	af00      	add	r7, sp, #0
 80081c2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 80081c4:	2301      	movs	r3, #1
 80081c6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 80081c8:	2300      	movs	r3, #0
 80081ca:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80081cc:	687b      	ldr	r3, [r7, #4]
 80081ce:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80081d2:	69db      	ldr	r3, [r3, #28]
 80081d4:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 80081d6:	68bb      	ldr	r3, [r7, #8]
 80081d8:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 80081dc:	2b04      	cmp	r3, #4
 80081de:	d877      	bhi.n	80082d0 <USBH_CDC_Process+0x114>
 80081e0:	a201      	add	r2, pc, #4	@ (adr r2, 80081e8 <USBH_CDC_Process+0x2c>)
 80081e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80081e6:	bf00      	nop
 80081e8:	080081fd 	.word	0x080081fd
 80081ec:	08008203 	.word	0x08008203
 80081f0:	08008233 	.word	0x08008233
 80081f4:	080082a7 	.word	0x080082a7
 80081f8:	080082b5 	.word	0x080082b5
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80081fc:	2300      	movs	r3, #0
 80081fe:	73fb      	strb	r3, [r7, #15]
      break;
 8008200:	e06d      	b.n	80082de <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008202:	68bb      	ldr	r3, [r7, #8]
 8008204:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008206:	4619      	mov	r1, r3
 8008208:	6878      	ldr	r0, [r7, #4]
 800820a:	f000 f897 	bl	800833c <SetLineCoding>
 800820e:	4603      	mov	r3, r0
 8008210:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008212:	7bbb      	ldrb	r3, [r7, #14]
 8008214:	2b00      	cmp	r3, #0
 8008216:	d104      	bne.n	8008222 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 8008218:	68bb      	ldr	r3, [r7, #8]
 800821a:	2202      	movs	r2, #2
 800821c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008220:	e058      	b.n	80082d4 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 8008222:	7bbb      	ldrb	r3, [r7, #14]
 8008224:	2b01      	cmp	r3, #1
 8008226:	d055      	beq.n	80082d4 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 8008228:	68bb      	ldr	r3, [r7, #8]
 800822a:	2204      	movs	r2, #4
 800822c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008230:	e050      	b.n	80082d4 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 8008232:	68bb      	ldr	r3, [r7, #8]
 8008234:	3340      	adds	r3, #64	@ 0x40
 8008236:	4619      	mov	r1, r3
 8008238:	6878      	ldr	r0, [r7, #4]
 800823a:	f000 f860 	bl	80082fe <GetLineCoding>
 800823e:	4603      	mov	r3, r0
 8008240:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008242:	7bbb      	ldrb	r3, [r7, #14]
 8008244:	2b00      	cmp	r3, #0
 8008246:	d126      	bne.n	8008296 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	2200      	movs	r2, #0
 800824c:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8008250:	68bb      	ldr	r3, [r7, #8]
 8008252:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800825a:	791b      	ldrb	r3, [r3, #4]
 800825c:	429a      	cmp	r2, r3
 800825e:	d13b      	bne.n	80082d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8008260:	68bb      	ldr	r3, [r7, #8]
 8008262:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800826a:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 800826c:	429a      	cmp	r2, r3
 800826e:	d133      	bne.n	80082d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008270:	68bb      	ldr	r3, [r7, #8]
 8008272:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008276:	68bb      	ldr	r3, [r7, #8]
 8008278:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800827a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800827c:	429a      	cmp	r2, r3
 800827e:	d12b      	bne.n	80082d8 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008280:	68bb      	ldr	r3, [r7, #8]
 8008282:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008284:	68bb      	ldr	r3, [r7, #8]
 8008286:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008288:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800828a:	429a      	cmp	r2, r3
 800828c:	d124      	bne.n	80082d8 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800828e:	6878      	ldr	r0, [r7, #4]
 8008290:	f000 f958 	bl	8008544 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008294:	e020      	b.n	80082d8 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008296:	7bbb      	ldrb	r3, [r7, #14]
 8008298:	2b01      	cmp	r3, #1
 800829a:	d01d      	beq.n	80082d8 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2204      	movs	r2, #4
 80082a0:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80082a4:	e018      	b.n	80082d8 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f867 	bl	800837a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f8da 	bl	8008466 <CDC_ProcessReception>
      break;
 80082b2:	e014      	b.n	80082de <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 80082b4:	2100      	movs	r1, #0
 80082b6:	6878      	ldr	r0, [r7, #4]
 80082b8:	f001 f81a 	bl	80092f0 <USBH_ClrFeature>
 80082bc:	4603      	mov	r3, r0
 80082be:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80082c0:	7bbb      	ldrb	r3, [r7, #14]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d10a      	bne.n	80082dc <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 80082c6:	68bb      	ldr	r3, [r7, #8]
 80082c8:	2200      	movs	r2, #0
 80082ca:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 80082ce:	e005      	b.n	80082dc <USBH_CDC_Process+0x120>

    default:
      break;
 80082d0:	bf00      	nop
 80082d2:	e004      	b.n	80082de <USBH_CDC_Process+0x122>
      break;
 80082d4:	bf00      	nop
 80082d6:	e002      	b.n	80082de <USBH_CDC_Process+0x122>
      break;
 80082d8:	bf00      	nop
 80082da:	e000      	b.n	80082de <USBH_CDC_Process+0x122>
      break;
 80082dc:	bf00      	nop

  }

  return status;
 80082de:	7bfb      	ldrb	r3, [r7, #15]
}
 80082e0:	4618      	mov	r0, r3
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
 80082ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80082f0:	2300      	movs	r3, #0
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	370c      	adds	r7, #12
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
 8008306:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	22a1      	movs	r2, #161	@ 0xa1
 800830c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2221      	movs	r2, #33	@ 0x21
 8008312:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	2200      	movs	r2, #0
 800831e:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	2207      	movs	r2, #7
 8008324:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008326:	683b      	ldr	r3, [r7, #0]
 8008328:	2207      	movs	r2, #7
 800832a:	4619      	mov	r1, r3
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f001 fb14 	bl	800995a <USBH_CtlReq>
 8008332:	4603      	mov	r3, r0
}
 8008334:	4618      	mov	r0, r3
 8008336:	3708      	adds	r7, #8
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b082      	sub	sp, #8
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
 8008344:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	2221      	movs	r2, #33	@ 0x21
 800834a:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2220      	movs	r2, #32
 8008350:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	2200      	movs	r2, #0
 8008356:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2200      	movs	r2, #0
 800835c:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2207      	movs	r2, #7
 8008362:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8008364:	683b      	ldr	r3, [r7, #0]
 8008366:	2207      	movs	r2, #7
 8008368:	4619      	mov	r1, r3
 800836a:	6878      	ldr	r0, [r7, #4]
 800836c:	f001 faf5 	bl	800995a <USBH_CtlReq>
 8008370:	4603      	mov	r3, r0
}
 8008372:	4618      	mov	r0, r3
 8008374:	3708      	adds	r7, #8
 8008376:	46bd      	mov	sp, r7
 8008378:	bd80      	pop	{r7, pc}

0800837a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800837a:	b580      	push	{r7, lr}
 800837c:	b086      	sub	sp, #24
 800837e:	af02      	add	r7, sp, #8
 8008380:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008388:	69db      	ldr	r3, [r3, #28]
 800838a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800838c:	2300      	movs	r3, #0
 800838e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008390:	68fb      	ldr	r3, [r7, #12]
 8008392:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008396:	2b01      	cmp	r3, #1
 8008398:	d002      	beq.n	80083a0 <CDC_ProcessTransmission+0x26>
 800839a:	2b02      	cmp	r3, #2
 800839c:	d023      	beq.n	80083e6 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800839e:	e05e      	b.n	800845e <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083a4:	68fa      	ldr	r2, [r7, #12]
 80083a6:	8b12      	ldrh	r2, [r2, #24]
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d90b      	bls.n	80083c4 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	69d9      	ldr	r1, [r3, #28]
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	8b1a      	ldrh	r2, [r3, #24]
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	7b5b      	ldrb	r3, [r3, #13]
 80083b8:	2001      	movs	r0, #1
 80083ba:	9000      	str	r0, [sp, #0]
 80083bc:	6878      	ldr	r0, [r7, #4]
 80083be:	f001 fcda 	bl	8009d76 <USBH_BulkSendData>
 80083c2:	e00b      	b.n	80083dc <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 80083c8:	68fb      	ldr	r3, [r7, #12]
 80083ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 80083cc:	b29a      	uxth	r2, r3
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	7b5b      	ldrb	r3, [r3, #13]
 80083d2:	2001      	movs	r0, #1
 80083d4:	9000      	str	r0, [sp, #0]
 80083d6:	6878      	ldr	r0, [r7, #4]
 80083d8:	f001 fccd 	bl	8009d76 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2202      	movs	r2, #2
 80083e0:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80083e4:	e03b      	b.n	800845e <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	7b5b      	ldrb	r3, [r3, #13]
 80083ea:	4619      	mov	r1, r3
 80083ec:	6878      	ldr	r0, [r7, #4]
 80083ee:	f001 fff1 	bl	800a3d4 <USBH_LL_GetURBState>
 80083f2:	4603      	mov	r3, r0
 80083f4:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 80083f6:	7afb      	ldrb	r3, [r7, #11]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d128      	bne.n	800844e <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008400:	68fa      	ldr	r2, [r7, #12]
 8008402:	8b12      	ldrh	r2, [r2, #24]
 8008404:	4293      	cmp	r3, r2
 8008406:	d90e      	bls.n	8008426 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800840c:	68fa      	ldr	r2, [r7, #12]
 800840e:	8b12      	ldrh	r2, [r2, #24]
 8008410:	1a9a      	subs	r2, r3, r2
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	69db      	ldr	r3, [r3, #28]
 800841a:	68fa      	ldr	r2, [r7, #12]
 800841c:	8b12      	ldrh	r2, [r2, #24]
 800841e:	441a      	add	r2, r3
 8008420:	68fb      	ldr	r3, [r7, #12]
 8008422:	61da      	str	r2, [r3, #28]
 8008424:	e002      	b.n	800842c <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8008426:	68fb      	ldr	r3, [r7, #12]
 8008428:	2200      	movs	r2, #0
 800842a:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008430:	2b00      	cmp	r3, #0
 8008432:	d004      	beq.n	800843e <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800843c:	e00e      	b.n	800845c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	2200      	movs	r2, #0
 8008442:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f000 f868 	bl	800851c <USBH_CDC_TransmitCallback>
      break;
 800844c:	e006      	b.n	800845c <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 800844e:	7afb      	ldrb	r3, [r7, #11]
 8008450:	2b02      	cmp	r3, #2
 8008452:	d103      	bne.n	800845c <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	2201      	movs	r2, #1
 8008458:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 800845c:	bf00      	nop
  }
}
 800845e:	bf00      	nop
 8008460:	3710      	adds	r7, #16
 8008462:	46bd      	mov	sp, r7
 8008464:	bd80      	pop	{r7, pc}

08008466 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8008466:	b580      	push	{r7, lr}
 8008468:	b086      	sub	sp, #24
 800846a:	af00      	add	r7, sp, #0
 800846c:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800846e:	687b      	ldr	r3, [r7, #4]
 8008470:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008478:	2300      	movs	r3, #0
 800847a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800847c:	697b      	ldr	r3, [r7, #20]
 800847e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008482:	2b03      	cmp	r3, #3
 8008484:	d002      	beq.n	800848c <CDC_ProcessReception+0x26>
 8008486:	2b04      	cmp	r3, #4
 8008488:	d00e      	beq.n	80084a8 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800848a:	e043      	b.n	8008514 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800848c:	697b      	ldr	r3, [r7, #20]
 800848e:	6a19      	ldr	r1, [r3, #32]
 8008490:	697b      	ldr	r3, [r7, #20]
 8008492:	8b5a      	ldrh	r2, [r3, #26]
 8008494:	697b      	ldr	r3, [r7, #20]
 8008496:	7b1b      	ldrb	r3, [r3, #12]
 8008498:	6878      	ldr	r0, [r7, #4]
 800849a:	f001 fc91 	bl	8009dc0 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	2204      	movs	r2, #4
 80084a2:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 80084a6:	e035      	b.n	8008514 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 80084a8:	697b      	ldr	r3, [r7, #20]
 80084aa:	7b1b      	ldrb	r3, [r3, #12]
 80084ac:	4619      	mov	r1, r3
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f001 ff90 	bl	800a3d4 <USBH_LL_GetURBState>
 80084b4:	4603      	mov	r3, r0
 80084b6:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 80084b8:	7cfb      	ldrb	r3, [r7, #19]
 80084ba:	2b01      	cmp	r3, #1
 80084bc:	d129      	bne.n	8008512 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 80084be:	697b      	ldr	r3, [r7, #20]
 80084c0:	7b1b      	ldrb	r3, [r3, #12]
 80084c2:	4619      	mov	r1, r3
 80084c4:	6878      	ldr	r0, [r7, #4]
 80084c6:	f001 fef3 	bl	800a2b0 <USBH_LL_GetLastXferSize>
 80084ca:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length == CDC_Handle->DataItf.InEpSize))
 80084cc:	697b      	ldr	r3, [r7, #20]
 80084ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084d0:	68fa      	ldr	r2, [r7, #12]
 80084d2:	429a      	cmp	r2, r3
 80084d4:	d016      	beq.n	8008504 <CDC_ProcessReception+0x9e>
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	8b5b      	ldrh	r3, [r3, #26]
 80084da:	461a      	mov	r2, r3
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	4293      	cmp	r3, r2
 80084e0:	d110      	bne.n	8008504 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 80084e2:	697b      	ldr	r3, [r7, #20]
 80084e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	1ad2      	subs	r2, r2, r3
 80084ea:	697b      	ldr	r3, [r7, #20]
 80084ec:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	6a1a      	ldr	r2, [r3, #32]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	441a      	add	r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 80084fa:	697b      	ldr	r3, [r7, #20]
 80084fc:	2203      	movs	r2, #3
 80084fe:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008502:	e006      	b.n	8008512 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008504:	697b      	ldr	r3, [r7, #20]
 8008506:	2200      	movs	r2, #0
 8008508:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800850c:	6878      	ldr	r0, [r7, #4]
 800850e:	f000 f80f 	bl	8008530 <USBH_CDC_ReceiveCallback>
      break;
 8008512:	bf00      	nop
  }
}
 8008514:	bf00      	nop
 8008516:	3718      	adds	r7, #24
 8008518:	46bd      	mov	sp, r7
 800851a:	bd80      	pop	{r7, pc}

0800851c <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 8008558:	b580      	push	{r7, lr}
 800855a:	b084      	sub	sp, #16
 800855c:	af00      	add	r7, sp, #0
 800855e:	60f8      	str	r0, [r7, #12]
 8008560:	60b9      	str	r1, [r7, #8]
 8008562:	4613      	mov	r3, r2
 8008564:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	2b00      	cmp	r3, #0
 800856a:	d101      	bne.n	8008570 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 800856c:	2302      	movs	r3, #2
 800856e:	e029      	b.n	80085c4 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	79fa      	ldrb	r2, [r7, #7]
 8008574:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008578:	68fb      	ldr	r3, [r7, #12]
 800857a:	2200      	movs	r2, #0
 800857c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	2200      	movs	r2, #0
 8008584:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008588:	68f8      	ldr	r0, [r7, #12]
 800858a:	f000 f81f 	bl	80085cc <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008596:	68fb      	ldr	r3, [r7, #12]
 8008598:	2200      	movs	r2, #0
 800859a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	2200      	movs	r2, #0
 80085a2:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	2200      	movs	r2, #0
 80085aa:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 80085ae:	68bb      	ldr	r3, [r7, #8]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d003      	beq.n	80085bc <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	68ba      	ldr	r2, [r7, #8]
 80085b8:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 80085bc:	68f8      	ldr	r0, [r7, #12]
 80085be:	f001 fdc3 	bl	800a148 <USBH_LL_Init>

  return USBH_OK;
 80085c2:	2300      	movs	r3, #0
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3710      	adds	r7, #16
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 80085cc:	b580      	push	{r7, lr}
 80085ce:	b084      	sub	sp, #16
 80085d0:	af00      	add	r7, sp, #0
 80085d2:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 80085d4:	2300      	movs	r3, #0
 80085d6:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085d8:	2300      	movs	r3, #0
 80085da:	60fb      	str	r3, [r7, #12]
 80085dc:	e009      	b.n	80085f2 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	33e0      	adds	r3, #224	@ 0xe0
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	4413      	add	r3, r2
 80085e8:	2200      	movs	r2, #0
 80085ea:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	3301      	adds	r3, #1
 80085f0:	60fb      	str	r3, [r7, #12]
 80085f2:	68fb      	ldr	r3, [r7, #12]
 80085f4:	2b0f      	cmp	r3, #15
 80085f6:	d9f2      	bls.n	80085de <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]
 80085fc:	e009      	b.n	8008612 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 80085fe:	687a      	ldr	r2, [r7, #4]
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	4413      	add	r3, r2
 8008604:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008608:	2200      	movs	r2, #0
 800860a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	3301      	adds	r3, #1
 8008610:	60fb      	str	r3, [r7, #12]
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008618:	d3f1      	bcc.n	80085fe <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 800861a:	687b      	ldr	r3, [r7, #4]
 800861c:	2200      	movs	r2, #0
 800861e:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2200      	movs	r2, #0
 8008624:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	2201      	movs	r2, #1
 800862a:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	2200      	movs	r2, #0
 8008630:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2201      	movs	r2, #1
 8008638:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2240      	movs	r2, #64	@ 0x40
 800863e:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2200      	movs	r2, #0
 8008644:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	2201      	movs	r2, #1
 8008652:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	2200      	movs	r2, #0
 8008662:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	331c      	adds	r3, #28
 800866a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800866e:	2100      	movs	r1, #0
 8008670:	4618      	mov	r0, r3
 8008672:	f002 f81d 	bl	800a6b0 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800867c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008680:	2100      	movs	r1, #0
 8008682:	4618      	mov	r0, r3
 8008684:	f002 f814 	bl	800a6b0 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800868e:	2212      	movs	r2, #18
 8008690:	2100      	movs	r1, #0
 8008692:	4618      	mov	r0, r3
 8008694:	f002 f80c 	bl	800a6b0 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800869e:	223e      	movs	r2, #62	@ 0x3e
 80086a0:	2100      	movs	r1, #0
 80086a2:	4618      	mov	r0, r3
 80086a4:	f002 f804 	bl	800a6b0 <memset>

  return USBH_OK;
 80086a8:	2300      	movs	r3, #0
}
 80086aa:	4618      	mov	r0, r3
 80086ac:	3710      	adds	r7, #16
 80086ae:	46bd      	mov	sp, r7
 80086b0:	bd80      	pop	{r7, pc}

080086b2 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 80086b2:	b480      	push	{r7}
 80086b4:	b085      	sub	sp, #20
 80086b6:	af00      	add	r7, sp, #0
 80086b8:	6078      	str	r0, [r7, #4]
 80086ba:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 80086bc:	2300      	movs	r3, #0
 80086be:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 80086c0:	683b      	ldr	r3, [r7, #0]
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d016      	beq.n	80086f4 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	d10e      	bne.n	80086ee <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 80086d6:	1c59      	adds	r1, r3, #1
 80086d8:	687a      	ldr	r2, [r7, #4]
 80086da:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	33de      	adds	r3, #222	@ 0xde
 80086e2:	6839      	ldr	r1, [r7, #0]
 80086e4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 80086e8:	2300      	movs	r3, #0
 80086ea:	73fb      	strb	r3, [r7, #15]
 80086ec:	e004      	b.n	80086f8 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 80086ee:	2302      	movs	r3, #2
 80086f0:	73fb      	strb	r3, [r7, #15]
 80086f2:	e001      	b.n	80086f8 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 80086f4:	2302      	movs	r3, #2
 80086f6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80086f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80086fa:	4618      	mov	r0, r3
 80086fc:	3714      	adds	r7, #20
 80086fe:	46bd      	mov	sp, r7
 8008700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008704:	4770      	bx	lr

08008706 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008706:	b480      	push	{r7}
 8008708:	b085      	sub	sp, #20
 800870a:	af00      	add	r7, sp, #0
 800870c:	6078      	str	r0, [r7, #4]
 800870e:	460b      	mov	r3, r1
 8008710:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008712:	2300      	movs	r3, #0
 8008714:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 800871c:	78fa      	ldrb	r2, [r7, #3]
 800871e:	429a      	cmp	r2, r3
 8008720:	d204      	bcs.n	800872c <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	78fa      	ldrb	r2, [r7, #3]
 8008726:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 800872a:	e001      	b.n	8008730 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 800872c:	2302      	movs	r3, #2
 800872e:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008730:	7bfb      	ldrb	r3, [r7, #15]
}
 8008732:	4618      	mov	r0, r3
 8008734:	3714      	adds	r7, #20
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr

0800873e <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 800873e:	b480      	push	{r7}
 8008740:	b087      	sub	sp, #28
 8008742:	af00      	add	r7, sp, #0
 8008744:	6078      	str	r0, [r7, #4]
 8008746:	4608      	mov	r0, r1
 8008748:	4611      	mov	r1, r2
 800874a:	461a      	mov	r2, r3
 800874c:	4603      	mov	r3, r0
 800874e:	70fb      	strb	r3, [r7, #3]
 8008750:	460b      	mov	r3, r1
 8008752:	70bb      	strb	r3, [r7, #2]
 8008754:	4613      	mov	r3, r2
 8008756:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008758:	2300      	movs	r3, #0
 800875a:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 800875c:	2300      	movs	r3, #0
 800875e:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008766:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008768:	e025      	b.n	80087b6 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 800876a:	7dfb      	ldrb	r3, [r7, #23]
 800876c:	221a      	movs	r2, #26
 800876e:	fb02 f303 	mul.w	r3, r2, r3
 8008772:	3308      	adds	r3, #8
 8008774:	68fa      	ldr	r2, [r7, #12]
 8008776:	4413      	add	r3, r2
 8008778:	3302      	adds	r3, #2
 800877a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 800877c:	693b      	ldr	r3, [r7, #16]
 800877e:	795b      	ldrb	r3, [r3, #5]
 8008780:	78fa      	ldrb	r2, [r7, #3]
 8008782:	429a      	cmp	r2, r3
 8008784:	d002      	beq.n	800878c <USBH_FindInterface+0x4e>
 8008786:	78fb      	ldrb	r3, [r7, #3]
 8008788:	2bff      	cmp	r3, #255	@ 0xff
 800878a:	d111      	bne.n	80087b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 800878c:	693b      	ldr	r3, [r7, #16]
 800878e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008790:	78ba      	ldrb	r2, [r7, #2]
 8008792:	429a      	cmp	r2, r3
 8008794:	d002      	beq.n	800879c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008796:	78bb      	ldrb	r3, [r7, #2]
 8008798:	2bff      	cmp	r3, #255	@ 0xff
 800879a:	d109      	bne.n	80087b0 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 800879c:	693b      	ldr	r3, [r7, #16]
 800879e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 80087a0:	787a      	ldrb	r2, [r7, #1]
 80087a2:	429a      	cmp	r2, r3
 80087a4:	d002      	beq.n	80087ac <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 80087a6:	787b      	ldrb	r3, [r7, #1]
 80087a8:	2bff      	cmp	r3, #255	@ 0xff
 80087aa:	d101      	bne.n	80087b0 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 80087ac:	7dfb      	ldrb	r3, [r7, #23]
 80087ae:	e006      	b.n	80087be <USBH_FindInterface+0x80>
    }
    if_ix++;
 80087b0:	7dfb      	ldrb	r3, [r7, #23]
 80087b2:	3301      	adds	r3, #1
 80087b4:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 80087b6:	7dfb      	ldrb	r3, [r7, #23]
 80087b8:	2b01      	cmp	r3, #1
 80087ba:	d9d6      	bls.n	800876a <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 80087bc:	23ff      	movs	r3, #255	@ 0xff
}
 80087be:	4618      	mov	r0, r3
 80087c0:	371c      	adds	r7, #28
 80087c2:	46bd      	mov	sp, r7
 80087c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c8:	4770      	bx	lr

080087ca <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 80087ca:	b580      	push	{r7, lr}
 80087cc:	b082      	sub	sp, #8
 80087ce:	af00      	add	r7, sp, #0
 80087d0:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 80087d2:	6878      	ldr	r0, [r7, #4]
 80087d4:	f001 fcf4 	bl	800a1c0 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 80087d8:	2101      	movs	r1, #1
 80087da:	6878      	ldr	r0, [r7, #4]
 80087dc:	f001 fe0d 	bl	800a3fa <USBH_LL_DriverVBUS>

  return USBH_OK;
 80087e0:	2300      	movs	r3, #0
}
 80087e2:	4618      	mov	r0, r3
 80087e4:	3708      	adds	r7, #8
 80087e6:	46bd      	mov	sp, r7
 80087e8:	bd80      	pop	{r7, pc}
	...

080087ec <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 80087ec:	b580      	push	{r7, lr}
 80087ee:	b088      	sub	sp, #32
 80087f0:	af04      	add	r7, sp, #16
 80087f2:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 80087f4:	2302      	movs	r3, #2
 80087f6:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 80087f8:	2300      	movs	r3, #0
 80087fa:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008802:	b2db      	uxtb	r3, r3
 8008804:	2b01      	cmp	r3, #1
 8008806:	d102      	bne.n	800880e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	2203      	movs	r2, #3
 800880c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	b2db      	uxtb	r3, r3
 8008814:	2b0b      	cmp	r3, #11
 8008816:	f200 81bb 	bhi.w	8008b90 <USBH_Process+0x3a4>
 800881a:	a201      	add	r2, pc, #4	@ (adr r2, 8008820 <USBH_Process+0x34>)
 800881c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008820:	08008851 	.word	0x08008851
 8008824:	08008883 	.word	0x08008883
 8008828:	080088eb 	.word	0x080088eb
 800882c:	08008b2b 	.word	0x08008b2b
 8008830:	08008b91 	.word	0x08008b91
 8008834:	0800898b 	.word	0x0800898b
 8008838:	08008ad1 	.word	0x08008ad1
 800883c:	080089c1 	.word	0x080089c1
 8008840:	080089e1 	.word	0x080089e1
 8008844:	080089ff 	.word	0x080089ff
 8008848:	08008a43 	.word	0x08008a43
 800884c:	08008b13 	.word	0x08008b13
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008856:	b2db      	uxtb	r3, r3
 8008858:	2b00      	cmp	r3, #0
 800885a:	f000 819b 	beq.w	8008b94 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	2201      	movs	r2, #1
 8008862:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008864:	20c8      	movs	r0, #200	@ 0xc8
 8008866:	f001 fe12 	bl	800a48e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 800886a:	6878      	ldr	r0, [r7, #4]
 800886c:	f001 fd05 	bl	800a27a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	2200      	movs	r2, #0
 8008874:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008878:	687b      	ldr	r3, [r7, #4]
 800887a:	2200      	movs	r2, #0
 800887c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008880:	e188      	b.n	8008b94 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008888:	2b01      	cmp	r3, #1
 800888a:	d107      	bne.n	800889c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	2202      	movs	r2, #2
 8008898:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 800889a:	e18a      	b.n	8008bb2 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 800889c:	687b      	ldr	r3, [r7, #4]
 800889e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80088a6:	d914      	bls.n	80088d2 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088ae:	3301      	adds	r3, #1
 80088b0:	b2da      	uxtb	r2, r3
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 80088be:	2b03      	cmp	r3, #3
 80088c0:	d903      	bls.n	80088ca <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	220d      	movs	r2, #13
 80088c6:	701a      	strb	r2, [r3, #0]
      break;
 80088c8:	e173      	b.n	8008bb2 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	2200      	movs	r2, #0
 80088ce:	701a      	strb	r2, [r3, #0]
      break;
 80088d0:	e16f      	b.n	8008bb2 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 80088d8:	f103 020a 	add.w	r2, r3, #10
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 80088e2:	200a      	movs	r0, #10
 80088e4:	f001 fdd3 	bl	800a48e <USBH_Delay>
      break;
 80088e8:	e163      	b.n	8008bb2 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d005      	beq.n	8008900 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80088fa:	2104      	movs	r1, #4
 80088fc:	6878      	ldr	r0, [r7, #4]
 80088fe:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008900:	2064      	movs	r0, #100	@ 0x64
 8008902:	f001 fdc4 	bl	800a48e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008906:	6878      	ldr	r0, [r7, #4]
 8008908:	f001 fc90 	bl	800a22c <USBH_LL_GetSpeed>
 800890c:	4603      	mov	r3, r0
 800890e:	461a      	mov	r2, r3
 8008910:	687b      	ldr	r3, [r7, #4]
 8008912:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	2205      	movs	r2, #5
 800891a:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 800891c:	2100      	movs	r1, #0
 800891e:	6878      	ldr	r0, [r7, #4]
 8008920:	f001 fa9b 	bl	8009e5a <USBH_AllocPipe>
 8008924:	4603      	mov	r3, r0
 8008926:	461a      	mov	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 800892c:	2180      	movs	r1, #128	@ 0x80
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f001 fa93 	bl	8009e5a <USBH_AllocPipe>
 8008934:	4603      	mov	r3, r0
 8008936:	461a      	mov	r2, r3
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	7919      	ldrb	r1, [r3, #4]
 8008940:	687b      	ldr	r3, [r7, #4]
 8008942:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 800894c:	687a      	ldr	r2, [r7, #4]
 800894e:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008950:	9202      	str	r2, [sp, #8]
 8008952:	2200      	movs	r2, #0
 8008954:	9201      	str	r2, [sp, #4]
 8008956:	9300      	str	r3, [sp, #0]
 8008958:	4603      	mov	r3, r0
 800895a:	2280      	movs	r2, #128	@ 0x80
 800895c:	6878      	ldr	r0, [r7, #4]
 800895e:	f001 fa4d 	bl	8009dfc <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	7959      	ldrb	r1, [r3, #5]
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008972:	687a      	ldr	r2, [r7, #4]
 8008974:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008976:	9202      	str	r2, [sp, #8]
 8008978:	2200      	movs	r2, #0
 800897a:	9201      	str	r2, [sp, #4]
 800897c:	9300      	str	r3, [sp, #0]
 800897e:	4603      	mov	r3, r0
 8008980:	2200      	movs	r2, #0
 8008982:	6878      	ldr	r0, [r7, #4]
 8008984:	f001 fa3a 	bl	8009dfc <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008988:	e113      	b.n	8008bb2 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 800898a:	6878      	ldr	r0, [r7, #4]
 800898c:	f000 f916 	bl	8008bbc <USBH_HandleEnum>
 8008990:	4603      	mov	r3, r0
 8008992:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008994:	7bbb      	ldrb	r3, [r7, #14]
 8008996:	b2db      	uxtb	r3, r3
 8008998:	2b00      	cmp	r3, #0
 800899a:	f040 80fd 	bne.w	8008b98 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	2200      	movs	r2, #0
 80089a2:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d103      	bne.n	80089b8 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	2208      	movs	r2, #8
 80089b4:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 80089b6:	e0ef      	b.n	8008b98 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	2207      	movs	r2, #7
 80089bc:	701a      	strb	r2, [r3, #0]
      break;
 80089be:	e0eb      	b.n	8008b98 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 80089c0:	687b      	ldr	r3, [r7, #4]
 80089c2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	f000 80e8 	beq.w	8008b9c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 80089d2:	2101      	movs	r1, #1
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	2208      	movs	r2, #8
 80089dc:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 80089de:	e0dd      	b.n	8008b9c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 80089e0:	687b      	ldr	r3, [r7, #4]
 80089e2:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 80089e6:	4619      	mov	r1, r3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 fc3a 	bl	8009262 <USBH_SetCfg>
 80089ee:	4603      	mov	r3, r0
 80089f0:	2b00      	cmp	r3, #0
 80089f2:	f040 80d5 	bne.w	8008ba0 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	2209      	movs	r2, #9
 80089fa:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 80089fc:	e0d0      	b.n	8008ba0 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008a04:	f003 0320 	and.w	r3, r3, #32
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d016      	beq.n	8008a3a <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008a0c:	2101      	movs	r1, #1
 8008a0e:	6878      	ldr	r0, [r7, #4]
 8008a10:	f000 fc4a 	bl	80092a8 <USBH_SetFeature>
 8008a14:	4603      	mov	r3, r0
 8008a16:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008a18:	7bbb      	ldrb	r3, [r7, #14]
 8008a1a:	b2db      	uxtb	r3, r3
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d103      	bne.n	8008a28 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	220a      	movs	r2, #10
 8008a24:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008a26:	e0bd      	b.n	8008ba4 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008a28:	7bbb      	ldrb	r3, [r7, #14]
 8008a2a:	b2db      	uxtb	r3, r3
 8008a2c:	2b03      	cmp	r3, #3
 8008a2e:	f040 80b9 	bne.w	8008ba4 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	220a      	movs	r2, #10
 8008a36:	701a      	strb	r2, [r3, #0]
      break;
 8008a38:	e0b4      	b.n	8008ba4 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	220a      	movs	r2, #10
 8008a3e:	701a      	strb	r2, [r3, #0]
      break;
 8008a40:	e0b0      	b.n	8008ba4 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008a48:	2b00      	cmp	r3, #0
 8008a4a:	f000 80ad 	beq.w	8008ba8 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	2200      	movs	r2, #0
 8008a52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a56:	2300      	movs	r3, #0
 8008a58:	73fb      	strb	r3, [r7, #15]
 8008a5a:	e016      	b.n	8008a8a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008a5c:	7bfa      	ldrb	r2, [r7, #15]
 8008a5e:	687b      	ldr	r3, [r7, #4]
 8008a60:	32de      	adds	r2, #222	@ 0xde
 8008a62:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a66:	791a      	ldrb	r2, [r3, #4]
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008a6e:	429a      	cmp	r2, r3
 8008a70:	d108      	bne.n	8008a84 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008a72:	7bfa      	ldrb	r2, [r7, #15]
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	32de      	adds	r2, #222	@ 0xde
 8008a78:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008a7c:	687b      	ldr	r3, [r7, #4]
 8008a7e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008a82:	e005      	b.n	8008a90 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008a84:	7bfb      	ldrb	r3, [r7, #15]
 8008a86:	3301      	adds	r3, #1
 8008a88:	73fb      	strb	r3, [r7, #15]
 8008a8a:	7bfb      	ldrb	r3, [r7, #15]
 8008a8c:	2b00      	cmp	r3, #0
 8008a8e:	d0e5      	beq.n	8008a5c <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	d016      	beq.n	8008ac8 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008a9a:	687b      	ldr	r3, [r7, #4]
 8008a9c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008aa0:	689b      	ldr	r3, [r3, #8]
 8008aa2:	6878      	ldr	r0, [r7, #4]
 8008aa4:	4798      	blx	r3
 8008aa6:	4603      	mov	r3, r0
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d109      	bne.n	8008ac0 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	2206      	movs	r2, #6
 8008ab0:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ab8:	2103      	movs	r1, #3
 8008aba:	6878      	ldr	r0, [r7, #4]
 8008abc:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008abe:	e073      	b.n	8008ba8 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	220d      	movs	r2, #13
 8008ac4:	701a      	strb	r2, [r3, #0]
      break;
 8008ac6:	e06f      	b.n	8008ba8 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	220d      	movs	r2, #13
 8008acc:	701a      	strb	r2, [r3, #0]
      break;
 8008ace:	e06b      	b.n	8008ba8 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d017      	beq.n	8008b0a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008ae0:	691b      	ldr	r3, [r3, #16]
 8008ae2:	6878      	ldr	r0, [r7, #4]
 8008ae4:	4798      	blx	r3
 8008ae6:	4603      	mov	r3, r0
 8008ae8:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008aea:	7bbb      	ldrb	r3, [r7, #14]
 8008aec:	b2db      	uxtb	r3, r3
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	220b      	movs	r2, #11
 8008af6:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008af8:	e058      	b.n	8008bac <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008afa:	7bbb      	ldrb	r3, [r7, #14]
 8008afc:	b2db      	uxtb	r3, r3
 8008afe:	2b02      	cmp	r3, #2
 8008b00:	d154      	bne.n	8008bac <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	220d      	movs	r2, #13
 8008b06:	701a      	strb	r2, [r3, #0]
      break;
 8008b08:	e050      	b.n	8008bac <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	220d      	movs	r2, #13
 8008b0e:	701a      	strb	r2, [r3, #0]
      break;
 8008b10:	e04c      	b.n	8008bac <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d049      	beq.n	8008bb0 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b22:	695b      	ldr	r3, [r3, #20]
 8008b24:	6878      	ldr	r0, [r7, #4]
 8008b26:	4798      	blx	r3
      }
      break;
 8008b28:	e042      	b.n	8008bb0 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	2200      	movs	r2, #0
 8008b2e:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f7ff fd4a 	bl	80085cc <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d009      	beq.n	8008b56 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	6878      	ldr	r0, [r7, #4]
 8008b4c:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d005      	beq.n	8008b6c <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008b66:	2105      	movs	r1, #5
 8008b68:	6878      	ldr	r0, [r7, #4]
 8008b6a:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8008b72:	b2db      	uxtb	r3, r3
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d107      	bne.n	8008b88 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2200      	movs	r2, #0
 8008b7c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8008b80:	6878      	ldr	r0, [r7, #4]
 8008b82:	f7ff fe22 	bl	80087ca <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008b86:	e014      	b.n	8008bb2 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8008b88:	6878      	ldr	r0, [r7, #4]
 8008b8a:	f001 fb19 	bl	800a1c0 <USBH_LL_Start>
      break;
 8008b8e:	e010      	b.n	8008bb2 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8008b90:	bf00      	nop
 8008b92:	e00e      	b.n	8008bb2 <USBH_Process+0x3c6>
      break;
 8008b94:	bf00      	nop
 8008b96:	e00c      	b.n	8008bb2 <USBH_Process+0x3c6>
      break;
 8008b98:	bf00      	nop
 8008b9a:	e00a      	b.n	8008bb2 <USBH_Process+0x3c6>
    break;
 8008b9c:	bf00      	nop
 8008b9e:	e008      	b.n	8008bb2 <USBH_Process+0x3c6>
      break;
 8008ba0:	bf00      	nop
 8008ba2:	e006      	b.n	8008bb2 <USBH_Process+0x3c6>
      break;
 8008ba4:	bf00      	nop
 8008ba6:	e004      	b.n	8008bb2 <USBH_Process+0x3c6>
      break;
 8008ba8:	bf00      	nop
 8008baa:	e002      	b.n	8008bb2 <USBH_Process+0x3c6>
      break;
 8008bac:	bf00      	nop
 8008bae:	e000      	b.n	8008bb2 <USBH_Process+0x3c6>
      break;
 8008bb0:	bf00      	nop
  }
  return USBH_OK;
 8008bb2:	2300      	movs	r3, #0
}
 8008bb4:	4618      	mov	r0, r3
 8008bb6:	3710      	adds	r7, #16
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	bd80      	pop	{r7, pc}

08008bbc <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 8008bbc:	b580      	push	{r7, lr}
 8008bbe:	b088      	sub	sp, #32
 8008bc0:	af04      	add	r7, sp, #16
 8008bc2:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8008bc4:	2301      	movs	r3, #1
 8008bc6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8008bc8:	2301      	movs	r3, #1
 8008bca:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	785b      	ldrb	r3, [r3, #1]
 8008bd0:	2b07      	cmp	r3, #7
 8008bd2:	f200 81bd 	bhi.w	8008f50 <USBH_HandleEnum+0x394>
 8008bd6:	a201      	add	r2, pc, #4	@ (adr r2, 8008bdc <USBH_HandleEnum+0x20>)
 8008bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bdc:	08008bfd 	.word	0x08008bfd
 8008be0:	08008cb7 	.word	0x08008cb7
 8008be4:	08008d21 	.word	0x08008d21
 8008be8:	08008dab 	.word	0x08008dab
 8008bec:	08008e15 	.word	0x08008e15
 8008bf0:	08008e85 	.word	0x08008e85
 8008bf4:	08008ecb 	.word	0x08008ecb
 8008bf8:	08008f11 	.word	0x08008f11
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 8008bfc:	2108      	movs	r1, #8
 8008bfe:	6878      	ldr	r0, [r7, #4]
 8008c00:	f000 fa4c 	bl	800909c <USBH_Get_DevDesc>
 8008c04:	4603      	mov	r3, r0
 8008c06:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008c08:	7bbb      	ldrb	r3, [r7, #14]
 8008c0a:	2b00      	cmp	r3, #0
 8008c0c:	d12e      	bne.n	8008c6c <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2201      	movs	r2, #1
 8008c1c:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	7919      	ldrb	r1, [r3, #4]
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 8008c32:	9202      	str	r2, [sp, #8]
 8008c34:	2200      	movs	r2, #0
 8008c36:	9201      	str	r2, [sp, #4]
 8008c38:	9300      	str	r3, [sp, #0]
 8008c3a:	4603      	mov	r3, r0
 8008c3c:	2280      	movs	r2, #128	@ 0x80
 8008c3e:	6878      	ldr	r0, [r7, #4]
 8008c40:	f001 f8dc 	bl	8009dfc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	7959      	ldrb	r1, [r3, #5]
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008c54:	687a      	ldr	r2, [r7, #4]
 8008c56:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008c58:	9202      	str	r2, [sp, #8]
 8008c5a:	2200      	movs	r2, #0
 8008c5c:	9201      	str	r2, [sp, #4]
 8008c5e:	9300      	str	r3, [sp, #0]
 8008c60:	4603      	mov	r3, r0
 8008c62:	2200      	movs	r2, #0
 8008c64:	6878      	ldr	r0, [r7, #4]
 8008c66:	f001 f8c9 	bl	8009dfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008c6a:	e173      	b.n	8008f54 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008c6c:	7bbb      	ldrb	r3, [r7, #14]
 8008c6e:	2b03      	cmp	r3, #3
 8008c70:	f040 8170 	bne.w	8008f54 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c7a:	3301      	adds	r3, #1
 8008c7c:	b2da      	uxtb	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008c8a:	2b03      	cmp	r3, #3
 8008c8c:	d903      	bls.n	8008c96 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	220d      	movs	r2, #13
 8008c92:	701a      	strb	r2, [r3, #0]
      break;
 8008c94:	e15e      	b.n	8008f54 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	795b      	ldrb	r3, [r3, #5]
 8008c9a:	4619      	mov	r1, r3
 8008c9c:	6878      	ldr	r0, [r7, #4]
 8008c9e:	f001 f8fd 	bl	8009e9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	791b      	ldrb	r3, [r3, #4]
 8008ca6:	4619      	mov	r1, r3
 8008ca8:	6878      	ldr	r0, [r7, #4]
 8008caa:	f001 f8f7 	bl	8009e9c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	701a      	strb	r2, [r3, #0]
      break;
 8008cb4:	e14e      	b.n	8008f54 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8008cb6:	2112      	movs	r1, #18
 8008cb8:	6878      	ldr	r0, [r7, #4]
 8008cba:	f000 f9ef 	bl	800909c <USBH_Get_DevDesc>
 8008cbe:	4603      	mov	r3, r0
 8008cc0:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008cc2:	7bbb      	ldrb	r3, [r7, #14]
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d103      	bne.n	8008cd0 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	2202      	movs	r2, #2
 8008ccc:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008cce:	e143      	b.n	8008f58 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008cd0:	7bbb      	ldrb	r3, [r7, #14]
 8008cd2:	2b03      	cmp	r3, #3
 8008cd4:	f040 8140 	bne.w	8008f58 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cde:	3301      	adds	r3, #1
 8008ce0:	b2da      	uxtb	r2, r3
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008cee:	2b03      	cmp	r3, #3
 8008cf0:	d903      	bls.n	8008cfa <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	220d      	movs	r2, #13
 8008cf6:	701a      	strb	r2, [r3, #0]
      break;
 8008cf8:	e12e      	b.n	8008f58 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	795b      	ldrb	r3, [r3, #5]
 8008cfe:	4619      	mov	r1, r3
 8008d00:	6878      	ldr	r0, [r7, #4]
 8008d02:	f001 f8cb 	bl	8009e9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	791b      	ldrb	r3, [r3, #4]
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6878      	ldr	r0, [r7, #4]
 8008d0e:	f001 f8c5 	bl	8009e9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	701a      	strb	r2, [r3, #0]
      break;
 8008d1e:	e11b      	b.n	8008f58 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 8008d20:	2101      	movs	r1, #1
 8008d22:	6878      	ldr	r0, [r7, #4]
 8008d24:	f000 fa79 	bl	800921a <USBH_SetAddress>
 8008d28:	4603      	mov	r3, r0
 8008d2a:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008d2c:	7bbb      	ldrb	r3, [r7, #14]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d130      	bne.n	8008d94 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 8008d32:	2002      	movs	r0, #2
 8008d34:	f001 fbab 	bl	800a48e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	2201      	movs	r2, #1
 8008d3c:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	2203      	movs	r2, #3
 8008d44:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	7919      	ldrb	r1, [r3, #4]
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d56:	687a      	ldr	r2, [r7, #4]
 8008d58:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 8008d5a:	9202      	str	r2, [sp, #8]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	9201      	str	r2, [sp, #4]
 8008d60:	9300      	str	r3, [sp, #0]
 8008d62:	4603      	mov	r3, r0
 8008d64:	2280      	movs	r2, #128	@ 0x80
 8008d66:	6878      	ldr	r0, [r7, #4]
 8008d68:	f001 f848 	bl	8009dfc <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	7959      	ldrb	r1, [r3, #5]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8008d80:	9202      	str	r2, [sp, #8]
 8008d82:	2200      	movs	r2, #0
 8008d84:	9201      	str	r2, [sp, #4]
 8008d86:	9300      	str	r3, [sp, #0]
 8008d88:	4603      	mov	r3, r0
 8008d8a:	2200      	movs	r2, #0
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	f001 f835 	bl	8009dfc <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8008d92:	e0e3      	b.n	8008f5c <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008d94:	7bbb      	ldrb	r3, [r7, #14]
 8008d96:	2b03      	cmp	r3, #3
 8008d98:	f040 80e0 	bne.w	8008f5c <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	220d      	movs	r2, #13
 8008da0:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	2200      	movs	r2, #0
 8008da6:	705a      	strb	r2, [r3, #1]
      break;
 8008da8:	e0d8      	b.n	8008f5c <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 8008daa:	2109      	movs	r1, #9
 8008dac:	6878      	ldr	r0, [r7, #4]
 8008dae:	f000 f9a1 	bl	80090f4 <USBH_Get_CfgDesc>
 8008db2:	4603      	mov	r3, r0
 8008db4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008db6:	7bbb      	ldrb	r3, [r7, #14]
 8008db8:	2b00      	cmp	r3, #0
 8008dba:	d103      	bne.n	8008dc4 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2204      	movs	r2, #4
 8008dc0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008dc2:	e0cd      	b.n	8008f60 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008dc4:	7bbb      	ldrb	r3, [r7, #14]
 8008dc6:	2b03      	cmp	r3, #3
 8008dc8:	f040 80ca 	bne.w	8008f60 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008dd2:	3301      	adds	r3, #1
 8008dd4:	b2da      	uxtb	r2, r3
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008de2:	2b03      	cmp	r3, #3
 8008de4:	d903      	bls.n	8008dee <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	220d      	movs	r2, #13
 8008dea:	701a      	strb	r2, [r3, #0]
      break;
 8008dec:	e0b8      	b.n	8008f60 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	795b      	ldrb	r3, [r3, #5]
 8008df2:	4619      	mov	r1, r3
 8008df4:	6878      	ldr	r0, [r7, #4]
 8008df6:	f001 f851 	bl	8009e9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	791b      	ldrb	r3, [r3, #4]
 8008dfe:	4619      	mov	r1, r3
 8008e00:	6878      	ldr	r0, [r7, #4]
 8008e02:	f001 f84b 	bl	8009e9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2200      	movs	r2, #0
 8008e10:	701a      	strb	r2, [r3, #0]
      break;
 8008e12:	e0a5      	b.n	8008f60 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 8008e1a:	4619      	mov	r1, r3
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f969 	bl	80090f4 <USBH_Get_CfgDesc>
 8008e22:	4603      	mov	r3, r0
 8008e24:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8008e26:	7bbb      	ldrb	r3, [r7, #14]
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d103      	bne.n	8008e34 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2205      	movs	r2, #5
 8008e30:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8008e32:	e097      	b.n	8008f64 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008e34:	7bbb      	ldrb	r3, [r7, #14]
 8008e36:	2b03      	cmp	r3, #3
 8008e38:	f040 8094 	bne.w	8008f64 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e42:	3301      	adds	r3, #1
 8008e44:	b2da      	uxtb	r2, r3
 8008e46:	687b      	ldr	r3, [r7, #4]
 8008e48:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8008e52:	2b03      	cmp	r3, #3
 8008e54:	d903      	bls.n	8008e5e <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 8008e56:	687b      	ldr	r3, [r7, #4]
 8008e58:	220d      	movs	r2, #13
 8008e5a:	701a      	strb	r2, [r3, #0]
      break;
 8008e5c:	e082      	b.n	8008f64 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	795b      	ldrb	r3, [r3, #5]
 8008e62:	4619      	mov	r1, r3
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f001 f819 	bl	8009e9c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	791b      	ldrb	r3, [r3, #4]
 8008e6e:	4619      	mov	r1, r3
 8008e70:	6878      	ldr	r0, [r7, #4]
 8008e72:	f001 f813 	bl	8009e9c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	2200      	movs	r2, #0
 8008e7a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2200      	movs	r2, #0
 8008e80:	701a      	strb	r2, [r3, #0]
      break;
 8008e82:	e06f      	b.n	8008f64 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 8008e8a:	2b00      	cmp	r3, #0
 8008e8c:	d019      	beq.n	8008ec2 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 8008e9a:	23ff      	movs	r3, #255	@ 0xff
 8008e9c:	6878      	ldr	r0, [r7, #4]
 8008e9e:	f000 f953 	bl	8009148 <USBH_Get_StringDesc>
 8008ea2:	4603      	mov	r3, r0
 8008ea4:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008ea6:	7bbb      	ldrb	r3, [r7, #14]
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d103      	bne.n	8008eb4 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	2206      	movs	r2, #6
 8008eb0:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008eb2:	e059      	b.n	8008f68 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008eb4:	7bbb      	ldrb	r3, [r7, #14]
 8008eb6:	2b03      	cmp	r3, #3
 8008eb8:	d156      	bne.n	8008f68 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	2206      	movs	r2, #6
 8008ebe:	705a      	strb	r2, [r3, #1]
      break;
 8008ec0:	e052      	b.n	8008f68 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	2206      	movs	r2, #6
 8008ec6:	705a      	strb	r2, [r3, #1]
      break;
 8008ec8:	e04e      	b.n	8008f68 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d019      	beq.n	8008f08 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8008ee0:	23ff      	movs	r3, #255	@ 0xff
 8008ee2:	6878      	ldr	r0, [r7, #4]
 8008ee4:	f000 f930 	bl	8009148 <USBH_Get_StringDesc>
 8008ee8:	4603      	mov	r3, r0
 8008eea:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008eec:	7bbb      	ldrb	r3, [r7, #14]
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d103      	bne.n	8008efa <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2207      	movs	r2, #7
 8008ef6:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008ef8:	e038      	b.n	8008f6c <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008efa:	7bbb      	ldrb	r3, [r7, #14]
 8008efc:	2b03      	cmp	r3, #3
 8008efe:	d135      	bne.n	8008f6c <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	2207      	movs	r2, #7
 8008f04:	705a      	strb	r2, [r3, #1]
      break;
 8008f06:	e031      	b.n	8008f6c <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2207      	movs	r2, #7
 8008f0c:	705a      	strb	r2, [r3, #1]
      break;
 8008f0e:	e02d      	b.n	8008f6c <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d017      	beq.n	8008f4a <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 8008f26:	23ff      	movs	r3, #255	@ 0xff
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 f90d 	bl	8009148 <USBH_Get_StringDesc>
 8008f2e:	4603      	mov	r3, r0
 8008f30:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8008f32:	7bbb      	ldrb	r3, [r7, #14]
 8008f34:	2b00      	cmp	r3, #0
 8008f36:	d102      	bne.n	8008f3e <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 8008f38:	2300      	movs	r3, #0
 8008f3a:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 8008f3c:	e018      	b.n	8008f70 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8008f3e:	7bbb      	ldrb	r3, [r7, #14]
 8008f40:	2b03      	cmp	r3, #3
 8008f42:	d115      	bne.n	8008f70 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 8008f44:	2300      	movs	r3, #0
 8008f46:	73fb      	strb	r3, [r7, #15]
      break;
 8008f48:	e012      	b.n	8008f70 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	73fb      	strb	r3, [r7, #15]
      break;
 8008f4e:	e00f      	b.n	8008f70 <USBH_HandleEnum+0x3b4>

    default:
      break;
 8008f50:	bf00      	nop
 8008f52:	e00e      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f54:	bf00      	nop
 8008f56:	e00c      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f58:	bf00      	nop
 8008f5a:	e00a      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f5c:	bf00      	nop
 8008f5e:	e008      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f60:	bf00      	nop
 8008f62:	e006      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f64:	bf00      	nop
 8008f66:	e004      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f68:	bf00      	nop
 8008f6a:	e002      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f6c:	bf00      	nop
 8008f6e:	e000      	b.n	8008f72 <USBH_HandleEnum+0x3b6>
      break;
 8008f70:	bf00      	nop
  }
  return Status;
 8008f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8008f74:	4618      	mov	r0, r3
 8008f76:	3710      	adds	r7, #16
 8008f78:	46bd      	mov	sp, r7
 8008f7a:	bd80      	pop	{r7, pc}

08008f7c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8008f7c:	b480      	push	{r7}
 8008f7e:	b083      	sub	sp, #12
 8008f80:	af00      	add	r7, sp, #0
 8008f82:	6078      	str	r0, [r7, #4]
 8008f84:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	683a      	ldr	r2, [r7, #0]
 8008f8a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 8008f8e:	bf00      	nop
 8008f90:	370c      	adds	r7, #12
 8008f92:	46bd      	mov	sp, r7
 8008f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f98:	4770      	bx	lr

08008f9a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8008f9a:	b580      	push	{r7, lr}
 8008f9c:	b082      	sub	sp, #8
 8008f9e:	af00      	add	r7, sp, #0
 8008fa0:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8008fa8:	1c5a      	adds	r2, r3, #1
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8008fb0:	6878      	ldr	r0, [r7, #4]
 8008fb2:	f000 f804 	bl	8008fbe <USBH_HandleSof>
}
 8008fb6:	bf00      	nop
 8008fb8:	3708      	adds	r7, #8
 8008fba:	46bd      	mov	sp, r7
 8008fbc:	bd80      	pop	{r7, pc}

08008fbe <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8008fbe:	b580      	push	{r7, lr}
 8008fc0:	b082      	sub	sp, #8
 8008fc2:	af00      	add	r7, sp, #0
 8008fc4:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	781b      	ldrb	r3, [r3, #0]
 8008fca:	b2db      	uxtb	r3, r3
 8008fcc:	2b0b      	cmp	r3, #11
 8008fce:	d10a      	bne.n	8008fe6 <USBH_HandleSof+0x28>
 8008fd0:	687b      	ldr	r3, [r7, #4]
 8008fd2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fd6:	2b00      	cmp	r3, #0
 8008fd8:	d005      	beq.n	8008fe6 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fe0:	699b      	ldr	r3, [r3, #24]
 8008fe2:	6878      	ldr	r0, [r7, #4]
 8008fe4:	4798      	blx	r3
  }
}
 8008fe6:	bf00      	nop
 8008fe8:	3708      	adds	r7, #8
 8008fea:	46bd      	mov	sp, r7
 8008fec:	bd80      	pop	{r7, pc}

08008fee <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8008fee:	b480      	push	{r7}
 8008ff0:	b083      	sub	sp, #12
 8008ff2:	af00      	add	r7, sp, #0
 8008ff4:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8008ff6:	687b      	ldr	r3, [r7, #4]
 8008ff8:	2201      	movs	r2, #1
 8008ffa:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 8008ffe:	bf00      	nop
}
 8009000:	370c      	adds	r7, #12
 8009002:	46bd      	mov	sp, r7
 8009004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009008:	4770      	bx	lr

0800900a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800900a:	b480      	push	{r7}
 800900c:	b083      	sub	sp, #12
 800900e:	af00      	add	r7, sp, #0
 8009010:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2200      	movs	r2, #0
 8009016:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 800901a:	bf00      	nop
}
 800901c:	370c      	adds	r7, #12
 800901e:	46bd      	mov	sp, r7
 8009020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009024:	4770      	bx	lr

08009026 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8009026:	b480      	push	{r7}
 8009028:	b083      	sub	sp, #12
 800902a:	af00      	add	r7, sp, #0
 800902c:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	2200      	movs	r2, #0
 800903a:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2200      	movs	r2, #0
 8009042:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009046:	2300      	movs	r3, #0
}
 8009048:	4618      	mov	r0, r3
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8009054:	b580      	push	{r7, lr}
 8009056:	b082      	sub	sp, #8
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	2201      	movs	r2, #1
 8009060:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	2200      	movs	r2, #0
 8009068:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	2200      	movs	r2, #0
 8009070:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009074:	6878      	ldr	r0, [r7, #4]
 8009076:	f001 f8be 	bl	800a1f6 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	791b      	ldrb	r3, [r3, #4]
 800907e:	4619      	mov	r1, r3
 8009080:	6878      	ldr	r0, [r7, #4]
 8009082:	f000 ff0b 	bl	8009e9c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	795b      	ldrb	r3, [r3, #5]
 800908a:	4619      	mov	r1, r3
 800908c:	6878      	ldr	r0, [r7, #4]
 800908e:	f000 ff05 	bl	8009e9c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009092:	2300      	movs	r3, #0
}
 8009094:	4618      	mov	r0, r3
 8009096:	3708      	adds	r7, #8
 8009098:	46bd      	mov	sp, r7
 800909a:	bd80      	pop	{r7, pc}

0800909c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800909c:	b580      	push	{r7, lr}
 800909e:	b086      	sub	sp, #24
 80090a0:	af02      	add	r7, sp, #8
 80090a2:	6078      	str	r0, [r7, #4]
 80090a4:	460b      	mov	r3, r1
 80090a6:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 80090a8:	887b      	ldrh	r3, [r7, #2]
 80090aa:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80090ae:	d901      	bls.n	80090b4 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e01b      	b.n	80090ec <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 80090ba:	887b      	ldrh	r3, [r7, #2]
 80090bc:	9300      	str	r3, [sp, #0]
 80090be:	4613      	mov	r3, r2
 80090c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80090c4:	2100      	movs	r1, #0
 80090c6:	6878      	ldr	r0, [r7, #4]
 80090c8:	f000 f872 	bl	80091b0 <USBH_GetDescriptor>
 80090cc:	4603      	mov	r3, r0
 80090ce:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 80090d0:	7bfb      	ldrb	r3, [r7, #15]
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d109      	bne.n	80090ea <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 80090dc:	887a      	ldrh	r2, [r7, #2]
 80090de:	4619      	mov	r1, r3
 80090e0:	6878      	ldr	r0, [r7, #4]
 80090e2:	f000 f929 	bl	8009338 <USBH_ParseDevDesc>
 80090e6:	4603      	mov	r3, r0
 80090e8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80090ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80090ec:	4618      	mov	r0, r3
 80090ee:	3710      	adds	r7, #16
 80090f0:	46bd      	mov	sp, r7
 80090f2:	bd80      	pop	{r7, pc}

080090f4 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 80090f4:	b580      	push	{r7, lr}
 80090f6:	b086      	sub	sp, #24
 80090f8:	af02      	add	r7, sp, #8
 80090fa:	6078      	str	r0, [r7, #4]
 80090fc:	460b      	mov	r3, r1
 80090fe:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	331c      	adds	r3, #28
 8009104:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009106:	887b      	ldrh	r3, [r7, #2]
 8009108:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800910c:	d901      	bls.n	8009112 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800910e:	2303      	movs	r3, #3
 8009110:	e016      	b.n	8009140 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 8009112:	887b      	ldrh	r3, [r7, #2]
 8009114:	9300      	str	r3, [sp, #0]
 8009116:	68bb      	ldr	r3, [r7, #8]
 8009118:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800911c:	2100      	movs	r1, #0
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 f846 	bl	80091b0 <USBH_GetDescriptor>
 8009124:	4603      	mov	r3, r0
 8009126:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 8009128:	7bfb      	ldrb	r3, [r7, #15]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d107      	bne.n	800913e <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 800912e:	887b      	ldrh	r3, [r7, #2]
 8009130:	461a      	mov	r2, r3
 8009132:	68b9      	ldr	r1, [r7, #8]
 8009134:	6878      	ldr	r0, [r7, #4]
 8009136:	f000 f9af 	bl	8009498 <USBH_ParseCfgDesc>
 800913a:	4603      	mov	r3, r0
 800913c:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800913e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b088      	sub	sp, #32
 800914c:	af02      	add	r7, sp, #8
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	607a      	str	r2, [r7, #4]
 8009152:	461a      	mov	r2, r3
 8009154:	460b      	mov	r3, r1
 8009156:	72fb      	strb	r3, [r7, #11]
 8009158:	4613      	mov	r3, r2
 800915a:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 800915c:	893b      	ldrh	r3, [r7, #8]
 800915e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009162:	d802      	bhi.n	800916a <USBH_Get_StringDesc+0x22>
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	2b00      	cmp	r3, #0
 8009168:	d101      	bne.n	800916e <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800916a:	2303      	movs	r3, #3
 800916c:	e01c      	b.n	80091a8 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 800916e:	7afb      	ldrb	r3, [r7, #11]
 8009170:	b29b      	uxth	r3, r3
 8009172:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009176:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009178:	68fb      	ldr	r3, [r7, #12]
 800917a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800917e:	893b      	ldrh	r3, [r7, #8]
 8009180:	9300      	str	r3, [sp, #0]
 8009182:	460b      	mov	r3, r1
 8009184:	2100      	movs	r1, #0
 8009186:	68f8      	ldr	r0, [r7, #12]
 8009188:	f000 f812 	bl	80091b0 <USBH_GetDescriptor>
 800918c:	4603      	mov	r3, r0
 800918e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009190:	7dfb      	ldrb	r3, [r7, #23]
 8009192:	2b00      	cmp	r3, #0
 8009194:	d107      	bne.n	80091a6 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800919c:	893a      	ldrh	r2, [r7, #8]
 800919e:	6879      	ldr	r1, [r7, #4]
 80091a0:	4618      	mov	r0, r3
 80091a2:	f000 fb8d 	bl	80098c0 <USBH_ParseStringDesc>
  }

  return status;
 80091a6:	7dfb      	ldrb	r3, [r7, #23]
}
 80091a8:	4618      	mov	r0, r3
 80091aa:	3718      	adds	r7, #24
 80091ac:	46bd      	mov	sp, r7
 80091ae:	bd80      	pop	{r7, pc}

080091b0 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 80091b0:	b580      	push	{r7, lr}
 80091b2:	b084      	sub	sp, #16
 80091b4:	af00      	add	r7, sp, #0
 80091b6:	60f8      	str	r0, [r7, #12]
 80091b8:	607b      	str	r3, [r7, #4]
 80091ba:	460b      	mov	r3, r1
 80091bc:	72fb      	strb	r3, [r7, #11]
 80091be:	4613      	mov	r3, r2
 80091c0:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 80091c2:	68fb      	ldr	r3, [r7, #12]
 80091c4:	789b      	ldrb	r3, [r3, #2]
 80091c6:	2b01      	cmp	r3, #1
 80091c8:	d11c      	bne.n	8009204 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 80091ca:	7afb      	ldrb	r3, [r7, #11]
 80091cc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80091d0:	b2da      	uxtb	r2, r3
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 80091d6:	68fb      	ldr	r3, [r7, #12]
 80091d8:	2206      	movs	r2, #6
 80091da:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	893a      	ldrh	r2, [r7, #8]
 80091e0:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 80091e2:	893b      	ldrh	r3, [r7, #8]
 80091e4:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80091e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80091ec:	d104      	bne.n	80091f8 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	f240 4209 	movw	r2, #1033	@ 0x409
 80091f4:	829a      	strh	r2, [r3, #20]
 80091f6:	e002      	b.n	80091fe <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	2200      	movs	r2, #0
 80091fc:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 80091fe:	68fb      	ldr	r3, [r7, #12]
 8009200:	8b3a      	ldrh	r2, [r7, #24]
 8009202:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009204:	8b3b      	ldrh	r3, [r7, #24]
 8009206:	461a      	mov	r2, r3
 8009208:	6879      	ldr	r1, [r7, #4]
 800920a:	68f8      	ldr	r0, [r7, #12]
 800920c:	f000 fba5 	bl	800995a <USBH_CtlReq>
 8009210:	4603      	mov	r3, r0
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}

0800921a <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 800921a:	b580      	push	{r7, lr}
 800921c:	b082      	sub	sp, #8
 800921e:	af00      	add	r7, sp, #0
 8009220:	6078      	str	r0, [r7, #4]
 8009222:	460b      	mov	r3, r1
 8009224:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	789b      	ldrb	r3, [r3, #2]
 800922a:	2b01      	cmp	r3, #1
 800922c:	d10f      	bne.n	800924e <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	2200      	movs	r2, #0
 8009232:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	2205      	movs	r2, #5
 8009238:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 800923a:	78fb      	ldrb	r3, [r7, #3]
 800923c:	b29a      	uxth	r2, r3
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2200      	movs	r2, #0
 8009246:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	2200      	movs	r2, #0
 800924c:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800924e:	2200      	movs	r2, #0
 8009250:	2100      	movs	r1, #0
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 fb81 	bl	800995a <USBH_CtlReq>
 8009258:	4603      	mov	r3, r0
}
 800925a:	4618      	mov	r0, r3
 800925c:	3708      	adds	r7, #8
 800925e:	46bd      	mov	sp, r7
 8009260:	bd80      	pop	{r7, pc}

08009262 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 8009262:	b580      	push	{r7, lr}
 8009264:	b082      	sub	sp, #8
 8009266:	af00      	add	r7, sp, #0
 8009268:	6078      	str	r0, [r7, #4]
 800926a:	460b      	mov	r3, r1
 800926c:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	789b      	ldrb	r3, [r3, #2]
 8009272:	2b01      	cmp	r3, #1
 8009274:	d10e      	bne.n	8009294 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	2200      	movs	r2, #0
 800927a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2209      	movs	r2, #9
 8009280:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	887a      	ldrh	r2, [r7, #2]
 8009286:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	2200      	movs	r2, #0
 800928c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2200      	movs	r2, #0
 8009292:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009294:	2200      	movs	r2, #0
 8009296:	2100      	movs	r1, #0
 8009298:	6878      	ldr	r0, [r7, #4]
 800929a:	f000 fb5e 	bl	800995a <USBH_CtlReq>
 800929e:	4603      	mov	r3, r0
}
 80092a0:	4618      	mov	r0, r3
 80092a2:	3708      	adds	r7, #8
 80092a4:	46bd      	mov	sp, r7
 80092a6:	bd80      	pop	{r7, pc}

080092a8 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 80092a8:	b580      	push	{r7, lr}
 80092aa:	b082      	sub	sp, #8
 80092ac:	af00      	add	r7, sp, #0
 80092ae:	6078      	str	r0, [r7, #4]
 80092b0:	460b      	mov	r3, r1
 80092b2:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	789b      	ldrb	r3, [r3, #2]
 80092b8:	2b01      	cmp	r3, #1
 80092ba:	d10f      	bne.n	80092dc <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2200      	movs	r2, #0
 80092c0:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	2203      	movs	r2, #3
 80092c6:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 80092c8:	78fb      	ldrb	r3, [r7, #3]
 80092ca:	b29a      	uxth	r2, r3
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2200      	movs	r2, #0
 80092d4:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2200      	movs	r2, #0
 80092da:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80092dc:	2200      	movs	r2, #0
 80092de:	2100      	movs	r1, #0
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f000 fb3a 	bl	800995a <USBH_CtlReq>
 80092e6:	4603      	mov	r3, r0
}
 80092e8:	4618      	mov	r0, r3
 80092ea:	3708      	adds	r7, #8
 80092ec:	46bd      	mov	sp, r7
 80092ee:	bd80      	pop	{r7, pc}

080092f0 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 80092f0:	b580      	push	{r7, lr}
 80092f2:	b082      	sub	sp, #8
 80092f4:	af00      	add	r7, sp, #0
 80092f6:	6078      	str	r0, [r7, #4]
 80092f8:	460b      	mov	r3, r1
 80092fa:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	789b      	ldrb	r3, [r3, #2]
 8009300:	2b01      	cmp	r3, #1
 8009302:	d10f      	bne.n	8009324 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	2202      	movs	r2, #2
 8009308:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	2201      	movs	r2, #1
 800930e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	2200      	movs	r2, #0
 8009314:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8009316:	78fb      	ldrb	r3, [r7, #3]
 8009318:	b29a      	uxth	r2, r3
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	2200      	movs	r2, #0
 8009322:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009324:	2200      	movs	r2, #0
 8009326:	2100      	movs	r1, #0
 8009328:	6878      	ldr	r0, [r7, #4]
 800932a:	f000 fb16 	bl	800995a <USBH_CtlReq>
 800932e:	4603      	mov	r3, r0
}
 8009330:	4618      	mov	r0, r3
 8009332:	3708      	adds	r7, #8
 8009334:	46bd      	mov	sp, r7
 8009336:	bd80      	pop	{r7, pc}

08009338 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009338:	b480      	push	{r7}
 800933a:	b087      	sub	sp, #28
 800933c:	af00      	add	r7, sp, #0
 800933e:	60f8      	str	r0, [r7, #12]
 8009340:	60b9      	str	r1, [r7, #8]
 8009342:	4613      	mov	r3, r2
 8009344:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 8009346:	68fb      	ldr	r3, [r7, #12]
 8009348:	f203 3326 	addw	r3, r3, #806	@ 0x326
 800934c:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 800934e:	2300      	movs	r3, #0
 8009350:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 8009352:	68bb      	ldr	r3, [r7, #8]
 8009354:	2b00      	cmp	r3, #0
 8009356:	d101      	bne.n	800935c <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 8009358:	2302      	movs	r3, #2
 800935a:	e094      	b.n	8009486 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	781a      	ldrb	r2, [r3, #0]
 8009360:	693b      	ldr	r3, [r7, #16]
 8009362:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	785a      	ldrb	r2, [r3, #1]
 8009368:	693b      	ldr	r3, [r7, #16]
 800936a:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 800936c:	68bb      	ldr	r3, [r7, #8]
 800936e:	3302      	adds	r3, #2
 8009370:	781b      	ldrb	r3, [r3, #0]
 8009372:	461a      	mov	r2, r3
 8009374:	68bb      	ldr	r3, [r7, #8]
 8009376:	3303      	adds	r3, #3
 8009378:	781b      	ldrb	r3, [r3, #0]
 800937a:	021b      	lsls	r3, r3, #8
 800937c:	b29b      	uxth	r3, r3
 800937e:	4313      	orrs	r3, r2
 8009380:	b29a      	uxth	r2, r3
 8009382:	693b      	ldr	r3, [r7, #16]
 8009384:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009386:	68bb      	ldr	r3, [r7, #8]
 8009388:	791a      	ldrb	r2, [r3, #4]
 800938a:	693b      	ldr	r3, [r7, #16]
 800938c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800938e:	68bb      	ldr	r3, [r7, #8]
 8009390:	795a      	ldrb	r2, [r3, #5]
 8009392:	693b      	ldr	r3, [r7, #16]
 8009394:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009396:	68bb      	ldr	r3, [r7, #8]
 8009398:	799a      	ldrb	r2, [r3, #6]
 800939a:	693b      	ldr	r3, [r7, #16]
 800939c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800939e:	68bb      	ldr	r3, [r7, #8]
 80093a0:	79da      	ldrb	r2, [r3, #7]
 80093a2:	693b      	ldr	r3, [r7, #16]
 80093a4:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093ac:	2b00      	cmp	r3, #0
 80093ae:	d004      	beq.n	80093ba <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 80093b6:	2b01      	cmp	r3, #1
 80093b8:	d11b      	bne.n	80093f2 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 80093ba:	693b      	ldr	r3, [r7, #16]
 80093bc:	79db      	ldrb	r3, [r3, #7]
 80093be:	2b20      	cmp	r3, #32
 80093c0:	dc0f      	bgt.n	80093e2 <USBH_ParseDevDesc+0xaa>
 80093c2:	2b08      	cmp	r3, #8
 80093c4:	db0f      	blt.n	80093e6 <USBH_ParseDevDesc+0xae>
 80093c6:	3b08      	subs	r3, #8
 80093c8:	4a32      	ldr	r2, [pc, #200]	@ (8009494 <USBH_ParseDevDesc+0x15c>)
 80093ca:	fa22 f303 	lsr.w	r3, r2, r3
 80093ce:	f003 0301 	and.w	r3, r3, #1
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	bf14      	ite	ne
 80093d6:	2301      	movne	r3, #1
 80093d8:	2300      	moveq	r3, #0
 80093da:	b2db      	uxtb	r3, r3
 80093dc:	2b00      	cmp	r3, #0
 80093de:	d106      	bne.n	80093ee <USBH_ParseDevDesc+0xb6>
 80093e0:	e001      	b.n	80093e6 <USBH_ParseDevDesc+0xae>
 80093e2:	2b40      	cmp	r3, #64	@ 0x40
 80093e4:	d003      	beq.n	80093ee <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 80093e6:	693b      	ldr	r3, [r7, #16]
 80093e8:	2208      	movs	r2, #8
 80093ea:	71da      	strb	r2, [r3, #7]
        break;
 80093ec:	e000      	b.n	80093f0 <USBH_ParseDevDesc+0xb8>
        break;
 80093ee:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 80093f0:	e00e      	b.n	8009410 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80093f8:	2b02      	cmp	r3, #2
 80093fa:	d107      	bne.n	800940c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 80093fc:	693b      	ldr	r3, [r7, #16]
 80093fe:	79db      	ldrb	r3, [r3, #7]
 8009400:	2b08      	cmp	r3, #8
 8009402:	d005      	beq.n	8009410 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009404:	693b      	ldr	r3, [r7, #16]
 8009406:	2208      	movs	r2, #8
 8009408:	71da      	strb	r2, [r3, #7]
 800940a:	e001      	b.n	8009410 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800940c:	2303      	movs	r3, #3
 800940e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 8009410:	88fb      	ldrh	r3, [r7, #6]
 8009412:	2b08      	cmp	r3, #8
 8009414:	d936      	bls.n	8009484 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 8009416:	68bb      	ldr	r3, [r7, #8]
 8009418:	3308      	adds	r3, #8
 800941a:	781b      	ldrb	r3, [r3, #0]
 800941c:	461a      	mov	r2, r3
 800941e:	68bb      	ldr	r3, [r7, #8]
 8009420:	3309      	adds	r3, #9
 8009422:	781b      	ldrb	r3, [r3, #0]
 8009424:	021b      	lsls	r3, r3, #8
 8009426:	b29b      	uxth	r3, r3
 8009428:	4313      	orrs	r3, r2
 800942a:	b29a      	uxth	r2, r3
 800942c:	693b      	ldr	r3, [r7, #16]
 800942e:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 8009430:	68bb      	ldr	r3, [r7, #8]
 8009432:	330a      	adds	r3, #10
 8009434:	781b      	ldrb	r3, [r3, #0]
 8009436:	461a      	mov	r2, r3
 8009438:	68bb      	ldr	r3, [r7, #8]
 800943a:	330b      	adds	r3, #11
 800943c:	781b      	ldrb	r3, [r3, #0]
 800943e:	021b      	lsls	r3, r3, #8
 8009440:	b29b      	uxth	r3, r3
 8009442:	4313      	orrs	r3, r2
 8009444:	b29a      	uxth	r2, r3
 8009446:	693b      	ldr	r3, [r7, #16]
 8009448:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 800944a:	68bb      	ldr	r3, [r7, #8]
 800944c:	330c      	adds	r3, #12
 800944e:	781b      	ldrb	r3, [r3, #0]
 8009450:	461a      	mov	r2, r3
 8009452:	68bb      	ldr	r3, [r7, #8]
 8009454:	330d      	adds	r3, #13
 8009456:	781b      	ldrb	r3, [r3, #0]
 8009458:	021b      	lsls	r3, r3, #8
 800945a:	b29b      	uxth	r3, r3
 800945c:	4313      	orrs	r3, r2
 800945e:	b29a      	uxth	r2, r3
 8009460:	693b      	ldr	r3, [r7, #16]
 8009462:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	7b9a      	ldrb	r2, [r3, #14]
 8009468:	693b      	ldr	r3, [r7, #16]
 800946a:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 800946c:	68bb      	ldr	r3, [r7, #8]
 800946e:	7bda      	ldrb	r2, [r3, #15]
 8009470:	693b      	ldr	r3, [r7, #16]
 8009472:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	7c1a      	ldrb	r2, [r3, #16]
 8009478:	693b      	ldr	r3, [r7, #16]
 800947a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	7c5a      	ldrb	r2, [r3, #17]
 8009480:	693b      	ldr	r3, [r7, #16]
 8009482:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009484:	7dfb      	ldrb	r3, [r7, #23]
}
 8009486:	4618      	mov	r0, r3
 8009488:	371c      	adds	r7, #28
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr
 8009492:	bf00      	nop
 8009494:	01000101 	.word	0x01000101

08009498 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009498:	b580      	push	{r7, lr}
 800949a:	b08c      	sub	sp, #48	@ 0x30
 800949c:	af00      	add	r7, sp, #0
 800949e:	60f8      	str	r0, [r7, #12]
 80094a0:	60b9      	str	r1, [r7, #8]
 80094a2:	4613      	mov	r3, r2
 80094a4:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 80094a6:	68fb      	ldr	r3, [r7, #12]
 80094a8:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 80094ac:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 80094ae:	2300      	movs	r3, #0
 80094b0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 80094b4:	2300      	movs	r3, #0
 80094b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 80094ba:	2300      	movs	r3, #0
 80094bc:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 80094c0:	68bb      	ldr	r3, [r7, #8]
 80094c2:	2b00      	cmp	r3, #0
 80094c4:	d101      	bne.n	80094ca <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 80094c6:	2302      	movs	r3, #2
 80094c8:	e0da      	b.n	8009680 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 80094ca:	68bb      	ldr	r3, [r7, #8]
 80094cc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (pdesc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80094ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d0:	781b      	ldrb	r3, [r3, #0]
 80094d2:	2b09      	cmp	r3, #9
 80094d4:	d002      	beq.n	80094dc <USBH_ParseCfgDesc+0x44>
  {
    pdesc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80094d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80094d8:	2209      	movs	r2, #9
 80094da:	701a      	strb	r2, [r3, #0]
  }

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 80094dc:	68bb      	ldr	r3, [r7, #8]
 80094de:	781a      	ldrb	r2, [r3, #0]
 80094e0:	6a3b      	ldr	r3, [r7, #32]
 80094e2:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 80094e4:	68bb      	ldr	r3, [r7, #8]
 80094e6:	785a      	ldrb	r2, [r3, #1]
 80094e8:	6a3b      	ldr	r3, [r7, #32]
 80094ea:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 80094ec:	68bb      	ldr	r3, [r7, #8]
 80094ee:	3302      	adds	r3, #2
 80094f0:	781b      	ldrb	r3, [r3, #0]
 80094f2:	461a      	mov	r2, r3
 80094f4:	68bb      	ldr	r3, [r7, #8]
 80094f6:	3303      	adds	r3, #3
 80094f8:	781b      	ldrb	r3, [r3, #0]
 80094fa:	021b      	lsls	r3, r3, #8
 80094fc:	b29b      	uxth	r3, r3
 80094fe:	4313      	orrs	r3, r2
 8009500:	b29b      	uxth	r3, r3
 8009502:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009506:	bf28      	it	cs
 8009508:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800950c:	b29a      	uxth	r2, r3
 800950e:	6a3b      	ldr	r3, [r7, #32]
 8009510:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	791a      	ldrb	r2, [r3, #4]
 8009516:	6a3b      	ldr	r3, [r7, #32]
 8009518:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800951a:	68bb      	ldr	r3, [r7, #8]
 800951c:	795a      	ldrb	r2, [r3, #5]
 800951e:	6a3b      	ldr	r3, [r7, #32]
 8009520:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	799a      	ldrb	r2, [r3, #6]
 8009526:	6a3b      	ldr	r3, [r7, #32]
 8009528:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 800952a:	68bb      	ldr	r3, [r7, #8]
 800952c:	79da      	ldrb	r2, [r3, #7]
 800952e:	6a3b      	ldr	r3, [r7, #32]
 8009530:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	7a1a      	ldrb	r2, [r3, #8]
 8009536:	6a3b      	ldr	r3, [r7, #32]
 8009538:	721a      	strb	r2, [r3, #8]

  if (length > USB_CONFIGURATION_DESC_SIZE)
 800953a:	88fb      	ldrh	r3, [r7, #6]
 800953c:	2b09      	cmp	r3, #9
 800953e:	f240 809d 	bls.w	800967c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 8009542:	2309      	movs	r3, #9
 8009544:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 8009546:	2300      	movs	r3, #0
 8009548:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 800954a:	e081      	b.n	8009650 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 800954c:	f107 0316 	add.w	r3, r7, #22
 8009550:	4619      	mov	r1, r3
 8009552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009554:	f000 f9e7 	bl	8009926 <USBH_GetNextDesc>
 8009558:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 800955a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800955c:	785b      	ldrb	r3, [r3, #1]
 800955e:	2b04      	cmp	r3, #4
 8009560:	d176      	bne.n	8009650 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 8009562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009564:	781b      	ldrb	r3, [r3, #0]
 8009566:	2b09      	cmp	r3, #9
 8009568:	d002      	beq.n	8009570 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 800956a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800956c:	2209      	movs	r2, #9
 800956e:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009570:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009574:	221a      	movs	r2, #26
 8009576:	fb02 f303 	mul.w	r3, r2, r3
 800957a:	3308      	adds	r3, #8
 800957c:	6a3a      	ldr	r2, [r7, #32]
 800957e:	4413      	add	r3, r2
 8009580:	3302      	adds	r3, #2
 8009582:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009584:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009586:	69f8      	ldr	r0, [r7, #28]
 8009588:	f000 f87e 	bl	8009688 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 800958c:	2300      	movs	r3, #0
 800958e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009592:	2300      	movs	r3, #0
 8009594:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009596:	e043      	b.n	8009620 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009598:	f107 0316 	add.w	r3, r7, #22
 800959c:	4619      	mov	r1, r3
 800959e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80095a0:	f000 f9c1 	bl	8009926 <USBH_GetNextDesc>
 80095a4:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80095a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095a8:	785b      	ldrb	r3, [r3, #1]
 80095aa:	2b05      	cmp	r3, #5
 80095ac:	d138      	bne.n	8009620 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 80095ae:	69fb      	ldr	r3, [r7, #28]
 80095b0:	795b      	ldrb	r3, [r3, #5]
 80095b2:	2b01      	cmp	r3, #1
 80095b4:	d113      	bne.n	80095de <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095b6:	69fb      	ldr	r3, [r7, #28]
 80095b8:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 80095ba:	2b02      	cmp	r3, #2
 80095bc:	d003      	beq.n	80095c6 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 80095be:	69fb      	ldr	r3, [r7, #28]
 80095c0:	799b      	ldrb	r3, [r3, #6]
 80095c2:	2b03      	cmp	r3, #3
 80095c4:	d10b      	bne.n	80095de <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095c6:	69fb      	ldr	r3, [r7, #28]
 80095c8:	79db      	ldrb	r3, [r3, #7]
 80095ca:	2b00      	cmp	r3, #0
 80095cc:	d10b      	bne.n	80095e6 <USBH_ParseCfgDesc+0x14e>
 80095ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d0:	781b      	ldrb	r3, [r3, #0]
 80095d2:	2b09      	cmp	r3, #9
 80095d4:	d007      	beq.n	80095e6 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 80095d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095d8:	2209      	movs	r2, #9
 80095da:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095dc:	e003      	b.n	80095e6 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 80095de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80095e0:	2207      	movs	r2, #7
 80095e2:	701a      	strb	r2, [r3, #0]
 80095e4:	e000      	b.n	80095e8 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 80095e6:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 80095e8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80095ec:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 80095f0:	3201      	adds	r2, #1
 80095f2:	00d2      	lsls	r2, r2, #3
 80095f4:	211a      	movs	r1, #26
 80095f6:	fb01 f303 	mul.w	r3, r1, r3
 80095fa:	4413      	add	r3, r2
 80095fc:	3308      	adds	r3, #8
 80095fe:	6a3a      	ldr	r2, [r7, #32]
 8009600:	4413      	add	r3, r2
 8009602:	3304      	adds	r3, #4
 8009604:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009608:	69b9      	ldr	r1, [r7, #24]
 800960a:	68f8      	ldr	r0, [r7, #12]
 800960c:	f000 f870 	bl	80096f0 <USBH_ParseEPDesc>
 8009610:	4603      	mov	r3, r0
 8009612:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009616:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 800961a:	3301      	adds	r3, #1
 800961c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009620:	69fb      	ldr	r3, [r7, #28]
 8009622:	791b      	ldrb	r3, [r3, #4]
 8009624:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009628:	429a      	cmp	r2, r3
 800962a:	d204      	bcs.n	8009636 <USBH_ParseCfgDesc+0x19e>
 800962c:	6a3b      	ldr	r3, [r7, #32]
 800962e:	885a      	ldrh	r2, [r3, #2]
 8009630:	8afb      	ldrh	r3, [r7, #22]
 8009632:	429a      	cmp	r2, r3
 8009634:	d8b0      	bhi.n	8009598 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009636:	69fb      	ldr	r3, [r7, #28]
 8009638:	791b      	ldrb	r3, [r3, #4]
 800963a:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800963e:	429a      	cmp	r2, r3
 8009640:	d201      	bcs.n	8009646 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009642:	2303      	movs	r3, #3
 8009644:	e01c      	b.n	8009680 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009646:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800964a:	3301      	adds	r3, #1
 800964c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009650:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009654:	2b01      	cmp	r3, #1
 8009656:	d805      	bhi.n	8009664 <USBH_ParseCfgDesc+0x1cc>
 8009658:	6a3b      	ldr	r3, [r7, #32]
 800965a:	885a      	ldrh	r2, [r3, #2]
 800965c:	8afb      	ldrh	r3, [r7, #22]
 800965e:	429a      	cmp	r2, r3
 8009660:	f63f af74 	bhi.w	800954c <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009664:	6a3b      	ldr	r3, [r7, #32]
 8009666:	791b      	ldrb	r3, [r3, #4]
 8009668:	2b02      	cmp	r3, #2
 800966a:	bf28      	it	cs
 800966c:	2302      	movcs	r3, #2
 800966e:	b2db      	uxtb	r3, r3
 8009670:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009674:	429a      	cmp	r2, r3
 8009676:	d201      	bcs.n	800967c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009678:	2303      	movs	r3, #3
 800967a:	e001      	b.n	8009680 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 800967c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009680:	4618      	mov	r0, r3
 8009682:	3730      	adds	r7, #48	@ 0x30
 8009684:	46bd      	mov	sp, r7
 8009686:	bd80      	pop	{r7, pc}

08009688 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009688:	b480      	push	{r7}
 800968a:	b083      	sub	sp, #12
 800968c:	af00      	add	r7, sp, #0
 800968e:	6078      	str	r0, [r7, #4]
 8009690:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009692:	683b      	ldr	r3, [r7, #0]
 8009694:	781a      	ldrb	r2, [r3, #0]
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	785a      	ldrb	r2, [r3, #1]
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 80096a2:	683b      	ldr	r3, [r7, #0]
 80096a4:	789a      	ldrb	r2, [r3, #2]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 80096aa:	683b      	ldr	r3, [r7, #0]
 80096ac:	78da      	ldrb	r2, [r3, #3]
 80096ae:	687b      	ldr	r3, [r7, #4]
 80096b0:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 80096b2:	683b      	ldr	r3, [r7, #0]
 80096b4:	3304      	adds	r3, #4
 80096b6:	781b      	ldrb	r3, [r3, #0]
 80096b8:	2b02      	cmp	r3, #2
 80096ba:	bf28      	it	cs
 80096bc:	2302      	movcs	r3, #2
 80096be:	b2da      	uxtb	r2, r3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 80096c4:	683b      	ldr	r3, [r7, #0]
 80096c6:	795a      	ldrb	r2, [r3, #5]
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 80096cc:	683b      	ldr	r3, [r7, #0]
 80096ce:	799a      	ldrb	r2, [r3, #6]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 80096d4:	683b      	ldr	r3, [r7, #0]
 80096d6:	79da      	ldrb	r2, [r3, #7]
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 80096dc:	683b      	ldr	r3, [r7, #0]
 80096de:	7a1a      	ldrb	r2, [r3, #8]
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	721a      	strb	r2, [r3, #8]
}
 80096e4:	bf00      	nop
 80096e6:	370c      	adds	r7, #12
 80096e8:	46bd      	mov	sp, r7
 80096ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ee:	4770      	bx	lr

080096f0 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 80096f0:	b480      	push	{r7}
 80096f2:	b087      	sub	sp, #28
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	60f8      	str	r0, [r7, #12]
 80096f8:	60b9      	str	r1, [r7, #8]
 80096fa:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 80096fc:	2300      	movs	r3, #0
 80096fe:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	781a      	ldrb	r2, [r3, #0]
 8009704:	68bb      	ldr	r3, [r7, #8]
 8009706:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	785a      	ldrb	r2, [r3, #1]
 800970c:	68bb      	ldr	r3, [r7, #8]
 800970e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	789a      	ldrb	r2, [r3, #2]
 8009714:	68bb      	ldr	r3, [r7, #8]
 8009716:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	78da      	ldrb	r2, [r3, #3]
 800971c:	68bb      	ldr	r3, [r7, #8]
 800971e:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	3304      	adds	r3, #4
 8009724:	781b      	ldrb	r3, [r3, #0]
 8009726:	461a      	mov	r2, r3
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	3305      	adds	r3, #5
 800972c:	781b      	ldrb	r3, [r3, #0]
 800972e:	021b      	lsls	r3, r3, #8
 8009730:	b29b      	uxth	r3, r3
 8009732:	4313      	orrs	r3, r2
 8009734:	b29a      	uxth	r2, r3
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	799a      	ldrb	r2, [r3, #6]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	889b      	ldrh	r3, [r3, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d009      	beq.n	800975e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 800974a:	68bb      	ldr	r3, [r7, #8]
 800974c:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 800974e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009752:	d804      	bhi.n	800975e <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009754:	68bb      	ldr	r3, [r7, #8]
 8009756:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009758:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800975c:	d901      	bls.n	8009762 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 800975e:	2303      	movs	r3, #3
 8009760:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009768:	2b00      	cmp	r3, #0
 800976a:	d136      	bne.n	80097da <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 800976c:	68bb      	ldr	r3, [r7, #8]
 800976e:	78db      	ldrb	r3, [r3, #3]
 8009770:	f003 0303 	and.w	r3, r3, #3
 8009774:	2b02      	cmp	r3, #2
 8009776:	d108      	bne.n	800978a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009778:	68bb      	ldr	r3, [r7, #8]
 800977a:	889b      	ldrh	r3, [r3, #4]
 800977c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009780:	f240 8097 	bls.w	80098b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009784:	2303      	movs	r3, #3
 8009786:	75fb      	strb	r3, [r7, #23]
 8009788:	e093      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 800978a:	68bb      	ldr	r3, [r7, #8]
 800978c:	78db      	ldrb	r3, [r3, #3]
 800978e:	f003 0303 	and.w	r3, r3, #3
 8009792:	2b00      	cmp	r3, #0
 8009794:	d107      	bne.n	80097a6 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009796:	68bb      	ldr	r3, [r7, #8]
 8009798:	889b      	ldrh	r3, [r3, #4]
 800979a:	2b40      	cmp	r3, #64	@ 0x40
 800979c:	f240 8089 	bls.w	80098b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 80097a0:	2303      	movs	r3, #3
 80097a2:	75fb      	strb	r3, [r7, #23]
 80097a4:	e085      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	78db      	ldrb	r3, [r3, #3]
 80097aa:	f003 0303 	and.w	r3, r3, #3
 80097ae:	2b01      	cmp	r3, #1
 80097b0:	d005      	beq.n	80097be <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 80097b2:	68bb      	ldr	r3, [r7, #8]
 80097b4:	78db      	ldrb	r3, [r3, #3]
 80097b6:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d10a      	bne.n	80097d4 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097be:	68bb      	ldr	r3, [r7, #8]
 80097c0:	799b      	ldrb	r3, [r3, #6]
 80097c2:	2b00      	cmp	r3, #0
 80097c4:	d003      	beq.n	80097ce <USBH_ParseEPDesc+0xde>
 80097c6:	68bb      	ldr	r3, [r7, #8]
 80097c8:	799b      	ldrb	r3, [r3, #6]
 80097ca:	2b10      	cmp	r3, #16
 80097cc:	d970      	bls.n	80098b0 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 80097ce:	2303      	movs	r3, #3
 80097d0:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80097d2:	e06d      	b.n	80098b0 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80097d4:	2303      	movs	r3, #3
 80097d6:	75fb      	strb	r3, [r7, #23]
 80097d8:	e06b      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 80097da:	68fb      	ldr	r3, [r7, #12]
 80097dc:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80097e0:	2b01      	cmp	r3, #1
 80097e2:	d13c      	bne.n	800985e <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	78db      	ldrb	r3, [r3, #3]
 80097e8:	f003 0303 	and.w	r3, r3, #3
 80097ec:	2b02      	cmp	r3, #2
 80097ee:	d005      	beq.n	80097fc <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 80097f0:	68bb      	ldr	r3, [r7, #8]
 80097f2:	78db      	ldrb	r3, [r3, #3]
 80097f4:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	d106      	bne.n	800980a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	889b      	ldrh	r3, [r3, #4]
 8009800:	2b40      	cmp	r3, #64	@ 0x40
 8009802:	d956      	bls.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009804:	2303      	movs	r3, #3
 8009806:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009808:	e053      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 800980a:	68bb      	ldr	r3, [r7, #8]
 800980c:	78db      	ldrb	r3, [r3, #3]
 800980e:	f003 0303 	and.w	r3, r3, #3
 8009812:	2b01      	cmp	r3, #1
 8009814:	d10e      	bne.n	8009834 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	799b      	ldrb	r3, [r3, #6]
 800981a:	2b00      	cmp	r3, #0
 800981c:	d007      	beq.n	800982e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009822:	2b10      	cmp	r3, #16
 8009824:	d803      	bhi.n	800982e <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 800982a:	2b40      	cmp	r3, #64	@ 0x40
 800982c:	d941      	bls.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800982e:	2303      	movs	r3, #3
 8009830:	75fb      	strb	r3, [r7, #23]
 8009832:	e03e      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009834:	68bb      	ldr	r3, [r7, #8]
 8009836:	78db      	ldrb	r3, [r3, #3]
 8009838:	f003 0303 	and.w	r3, r3, #3
 800983c:	2b03      	cmp	r3, #3
 800983e:	d10b      	bne.n	8009858 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009840:	68bb      	ldr	r3, [r7, #8]
 8009842:	799b      	ldrb	r3, [r3, #6]
 8009844:	2b00      	cmp	r3, #0
 8009846:	d004      	beq.n	8009852 <USBH_ParseEPDesc+0x162>
 8009848:	68bb      	ldr	r3, [r7, #8]
 800984a:	889b      	ldrh	r3, [r3, #4]
 800984c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009850:	d32f      	bcc.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009852:	2303      	movs	r3, #3
 8009854:	75fb      	strb	r3, [r7, #23]
 8009856:	e02c      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009858:	2303      	movs	r3, #3
 800985a:	75fb      	strb	r3, [r7, #23]
 800985c:	e029      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009864:	2b02      	cmp	r3, #2
 8009866:	d120      	bne.n	80098aa <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009868:	68bb      	ldr	r3, [r7, #8]
 800986a:	78db      	ldrb	r3, [r3, #3]
 800986c:	f003 0303 	and.w	r3, r3, #3
 8009870:	2b00      	cmp	r3, #0
 8009872:	d106      	bne.n	8009882 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009874:	68bb      	ldr	r3, [r7, #8]
 8009876:	889b      	ldrh	r3, [r3, #4]
 8009878:	2b08      	cmp	r3, #8
 800987a:	d01a      	beq.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800987c:	2303      	movs	r3, #3
 800987e:	75fb      	strb	r3, [r7, #23]
 8009880:	e017      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	78db      	ldrb	r3, [r3, #3]
 8009886:	f003 0303 	and.w	r3, r3, #3
 800988a:	2b03      	cmp	r3, #3
 800988c:	d10a      	bne.n	80098a4 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 800988e:	68bb      	ldr	r3, [r7, #8]
 8009890:	799b      	ldrb	r3, [r3, #6]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <USBH_ParseEPDesc+0x1ae>
 8009896:	68bb      	ldr	r3, [r7, #8]
 8009898:	889b      	ldrh	r3, [r3, #4]
 800989a:	2b08      	cmp	r3, #8
 800989c:	d909      	bls.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 800989e:	2303      	movs	r3, #3
 80098a0:	75fb      	strb	r3, [r7, #23]
 80098a2:	e006      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 80098a4:	2303      	movs	r3, #3
 80098a6:	75fb      	strb	r3, [r7, #23]
 80098a8:	e003      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 80098aa:	2303      	movs	r3, #3
 80098ac:	75fb      	strb	r3, [r7, #23]
 80098ae:	e000      	b.n	80098b2 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 80098b0:	bf00      	nop
  }

  return status;
 80098b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	371c      	adds	r7, #28
 80098b8:	46bd      	mov	sp, r7
 80098ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098be:	4770      	bx	lr

080098c0 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 80098c0:	b480      	push	{r7}
 80098c2:	b087      	sub	sp, #28
 80098c4:	af00      	add	r7, sp, #0
 80098c6:	60f8      	str	r0, [r7, #12]
 80098c8:	60b9      	str	r1, [r7, #8]
 80098ca:	4613      	mov	r3, r2
 80098cc:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	3301      	adds	r3, #1
 80098d2:	781b      	ldrb	r3, [r3, #0]
 80098d4:	2b03      	cmp	r3, #3
 80098d6:	d120      	bne.n	800991a <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	781b      	ldrb	r3, [r3, #0]
 80098dc:	1e9a      	subs	r2, r3, #2
 80098de:	88fb      	ldrh	r3, [r7, #6]
 80098e0:	4293      	cmp	r3, r2
 80098e2:	bf28      	it	cs
 80098e4:	4613      	movcs	r3, r2
 80098e6:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3302      	adds	r3, #2
 80098ec:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 80098ee:	2300      	movs	r3, #0
 80098f0:	82fb      	strh	r3, [r7, #22]
 80098f2:	e00b      	b.n	800990c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 80098f4:	8afb      	ldrh	r3, [r7, #22]
 80098f6:	68fa      	ldr	r2, [r7, #12]
 80098f8:	4413      	add	r3, r2
 80098fa:	781a      	ldrb	r2, [r3, #0]
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009900:	68bb      	ldr	r3, [r7, #8]
 8009902:	3301      	adds	r3, #1
 8009904:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009906:	8afb      	ldrh	r3, [r7, #22]
 8009908:	3302      	adds	r3, #2
 800990a:	82fb      	strh	r3, [r7, #22]
 800990c:	8afa      	ldrh	r2, [r7, #22]
 800990e:	8abb      	ldrh	r3, [r7, #20]
 8009910:	429a      	cmp	r2, r3
 8009912:	d3ef      	bcc.n	80098f4 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009914:	68bb      	ldr	r3, [r7, #8]
 8009916:	2200      	movs	r2, #0
 8009918:	701a      	strb	r2, [r3, #0]
  }
}
 800991a:	bf00      	nop
 800991c:	371c      	adds	r7, #28
 800991e:	46bd      	mov	sp, r7
 8009920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009924:	4770      	bx	lr

08009926 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009926:	b480      	push	{r7}
 8009928:	b085      	sub	sp, #20
 800992a:	af00      	add	r7, sp, #0
 800992c:	6078      	str	r0, [r7, #4]
 800992e:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	881b      	ldrh	r3, [r3, #0]
 8009934:	687a      	ldr	r2, [r7, #4]
 8009936:	7812      	ldrb	r2, [r2, #0]
 8009938:	4413      	add	r3, r2
 800993a:	b29a      	uxth	r2, r3
 800993c:	683b      	ldr	r3, [r7, #0]
 800993e:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	4413      	add	r3, r2
 800994a:	60fb      	str	r3, [r7, #12]

  return (pnext);
 800994c:	68fb      	ldr	r3, [r7, #12]
}
 800994e:	4618      	mov	r0, r3
 8009950:	3714      	adds	r7, #20
 8009952:	46bd      	mov	sp, r7
 8009954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009958:	4770      	bx	lr

0800995a <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 800995a:	b580      	push	{r7, lr}
 800995c:	b086      	sub	sp, #24
 800995e:	af00      	add	r7, sp, #0
 8009960:	60f8      	str	r0, [r7, #12]
 8009962:	60b9      	str	r1, [r7, #8]
 8009964:	4613      	mov	r3, r2
 8009966:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009968:	2301      	movs	r3, #1
 800996a:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	789b      	ldrb	r3, [r3, #2]
 8009970:	2b01      	cmp	r3, #1
 8009972:	d002      	beq.n	800997a <USBH_CtlReq+0x20>
 8009974:	2b02      	cmp	r3, #2
 8009976:	d00f      	beq.n	8009998 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009978:	e027      	b.n	80099ca <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	68ba      	ldr	r2, [r7, #8]
 800997e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	88fa      	ldrh	r2, [r7, #6]
 8009984:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	2201      	movs	r2, #1
 800998a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	2202      	movs	r2, #2
 8009990:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009992:	2301      	movs	r3, #1
 8009994:	75fb      	strb	r3, [r7, #23]
      break;
 8009996:	e018      	b.n	80099ca <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f81b 	bl	80099d4 <USBH_HandleControl>
 800999e:	4603      	mov	r3, r0
 80099a0:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 80099a2:	7dfb      	ldrb	r3, [r7, #23]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <USBH_CtlReq+0x54>
 80099a8:	7dfb      	ldrb	r3, [r7, #23]
 80099aa:	2b03      	cmp	r3, #3
 80099ac:	d106      	bne.n	80099bc <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 80099ae:	68fb      	ldr	r3, [r7, #12]
 80099b0:	2201      	movs	r2, #1
 80099b2:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	2200      	movs	r2, #0
 80099b8:	761a      	strb	r2, [r3, #24]
      break;
 80099ba:	e005      	b.n	80099c8 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 80099bc:	7dfb      	ldrb	r3, [r7, #23]
 80099be:	2b02      	cmp	r3, #2
 80099c0:	d102      	bne.n	80099c8 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	709a      	strb	r2, [r3, #2]
      break;
 80099c8:	bf00      	nop
  }
  return status;
 80099ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80099cc:	4618      	mov	r0, r3
 80099ce:	3718      	adds	r7, #24
 80099d0:	46bd      	mov	sp, r7
 80099d2:	bd80      	pop	{r7, pc}

080099d4 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 80099d4:	b580      	push	{r7, lr}
 80099d6:	b086      	sub	sp, #24
 80099d8:	af02      	add	r7, sp, #8
 80099da:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 80099dc:	2301      	movs	r3, #1
 80099de:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 80099e0:	2300      	movs	r3, #0
 80099e2:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	7e1b      	ldrb	r3, [r3, #24]
 80099e8:	3b01      	subs	r3, #1
 80099ea:	2b0a      	cmp	r3, #10
 80099ec:	f200 8156 	bhi.w	8009c9c <USBH_HandleControl+0x2c8>
 80099f0:	a201      	add	r2, pc, #4	@ (adr r2, 80099f8 <USBH_HandleControl+0x24>)
 80099f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f6:	bf00      	nop
 80099f8:	08009a25 	.word	0x08009a25
 80099fc:	08009a3f 	.word	0x08009a3f
 8009a00:	08009aa9 	.word	0x08009aa9
 8009a04:	08009acf 	.word	0x08009acf
 8009a08:	08009b07 	.word	0x08009b07
 8009a0c:	08009b31 	.word	0x08009b31
 8009a10:	08009b83 	.word	0x08009b83
 8009a14:	08009ba5 	.word	0x08009ba5
 8009a18:	08009be1 	.word	0x08009be1
 8009a1c:	08009c07 	.word	0x08009c07
 8009a20:	08009c45 	.word	0x08009c45
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009a24:	687b      	ldr	r3, [r7, #4]
 8009a26:	f103 0110 	add.w	r1, r3, #16
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	795b      	ldrb	r3, [r3, #5]
 8009a2e:	461a      	mov	r2, r3
 8009a30:	6878      	ldr	r0, [r7, #4]
 8009a32:	f000 f943 	bl	8009cbc <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	2202      	movs	r2, #2
 8009a3a:	761a      	strb	r2, [r3, #24]
      break;
 8009a3c:	e139      	b.n	8009cb2 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	795b      	ldrb	r3, [r3, #5]
 8009a42:	4619      	mov	r1, r3
 8009a44:	6878      	ldr	r0, [r7, #4]
 8009a46:	f000 fcc5 	bl	800a3d4 <USBH_LL_GetURBState>
 8009a4a:	4603      	mov	r3, r0
 8009a4c:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009a4e:	7bbb      	ldrb	r3, [r7, #14]
 8009a50:	2b01      	cmp	r3, #1
 8009a52:	d11e      	bne.n	8009a92 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009a54:	687b      	ldr	r3, [r7, #4]
 8009a56:	7c1b      	ldrb	r3, [r3, #16]
 8009a58:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009a5c:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	8adb      	ldrh	r3, [r3, #22]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d00a      	beq.n	8009a7c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009a66:	7b7b      	ldrb	r3, [r7, #13]
 8009a68:	2b80      	cmp	r3, #128	@ 0x80
 8009a6a:	d103      	bne.n	8009a74 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	2203      	movs	r2, #3
 8009a70:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009a72:	e115      	b.n	8009ca0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	2205      	movs	r2, #5
 8009a78:	761a      	strb	r2, [r3, #24]
      break;
 8009a7a:	e111      	b.n	8009ca0 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009a7c:	7b7b      	ldrb	r3, [r7, #13]
 8009a7e:	2b80      	cmp	r3, #128	@ 0x80
 8009a80:	d103      	bne.n	8009a8a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	2209      	movs	r2, #9
 8009a86:	761a      	strb	r2, [r3, #24]
      break;
 8009a88:	e10a      	b.n	8009ca0 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009a8a:	687b      	ldr	r3, [r7, #4]
 8009a8c:	2207      	movs	r2, #7
 8009a8e:	761a      	strb	r2, [r3, #24]
      break;
 8009a90:	e106      	b.n	8009ca0 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009a92:	7bbb      	ldrb	r3, [r7, #14]
 8009a94:	2b04      	cmp	r3, #4
 8009a96:	d003      	beq.n	8009aa0 <USBH_HandleControl+0xcc>
 8009a98:	7bbb      	ldrb	r3, [r7, #14]
 8009a9a:	2b02      	cmp	r3, #2
 8009a9c:	f040 8100 	bne.w	8009ca0 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	220b      	movs	r2, #11
 8009aa4:	761a      	strb	r2, [r3, #24]
      break;
 8009aa6:	e0fb      	b.n	8009ca0 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009aae:	b29a      	uxth	r2, r3
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	6899      	ldr	r1, [r3, #8]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	899a      	ldrh	r2, [r3, #12]
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	791b      	ldrb	r3, [r3, #4]
 8009ac0:	6878      	ldr	r0, [r7, #4]
 8009ac2:	f000 f93a 	bl	8009d3a <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009ac6:	687b      	ldr	r3, [r7, #4]
 8009ac8:	2204      	movs	r2, #4
 8009aca:	761a      	strb	r2, [r3, #24]
      break;
 8009acc:	e0f1      	b.n	8009cb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	791b      	ldrb	r3, [r3, #4]
 8009ad2:	4619      	mov	r1, r3
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fc7d 	bl	800a3d4 <USBH_LL_GetURBState>
 8009ada:	4603      	mov	r3, r0
 8009adc:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ade:	7bbb      	ldrb	r3, [r7, #14]
 8009ae0:	2b01      	cmp	r3, #1
 8009ae2:	d102      	bne.n	8009aea <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	2209      	movs	r2, #9
 8009ae8:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009aea:	7bbb      	ldrb	r3, [r7, #14]
 8009aec:	2b05      	cmp	r3, #5
 8009aee:	d102      	bne.n	8009af6 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009af0:	2303      	movs	r3, #3
 8009af2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009af4:	e0d6      	b.n	8009ca4 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009af6:	7bbb      	ldrb	r3, [r7, #14]
 8009af8:	2b04      	cmp	r3, #4
 8009afa:	f040 80d3 	bne.w	8009ca4 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	220b      	movs	r2, #11
 8009b02:	761a      	strb	r2, [r3, #24]
      break;
 8009b04:	e0ce      	b.n	8009ca4 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	6899      	ldr	r1, [r3, #8]
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	899a      	ldrh	r2, [r3, #12]
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	795b      	ldrb	r3, [r3, #5]
 8009b12:	2001      	movs	r0, #1
 8009b14:	9000      	str	r0, [sp, #0]
 8009b16:	6878      	ldr	r0, [r7, #4]
 8009b18:	f000 f8ea 	bl	8009cf0 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b22:	b29a      	uxth	r2, r3
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2206      	movs	r2, #6
 8009b2c:	761a      	strb	r2, [r3, #24]
      break;
 8009b2e:	e0c0      	b.n	8009cb2 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	795b      	ldrb	r3, [r3, #5]
 8009b34:	4619      	mov	r1, r3
 8009b36:	6878      	ldr	r0, [r7, #4]
 8009b38:	f000 fc4c 	bl	800a3d4 <USBH_LL_GetURBState>
 8009b3c:	4603      	mov	r3, r0
 8009b3e:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009b40:	7bbb      	ldrb	r3, [r7, #14]
 8009b42:	2b01      	cmp	r3, #1
 8009b44:	d103      	bne.n	8009b4e <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	2207      	movs	r2, #7
 8009b4a:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009b4c:	e0ac      	b.n	8009ca8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009b4e:	7bbb      	ldrb	r3, [r7, #14]
 8009b50:	2b05      	cmp	r3, #5
 8009b52:	d105      	bne.n	8009b60 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	220c      	movs	r2, #12
 8009b58:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009b5a:	2303      	movs	r3, #3
 8009b5c:	73fb      	strb	r3, [r7, #15]
      break;
 8009b5e:	e0a3      	b.n	8009ca8 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009b60:	7bbb      	ldrb	r3, [r7, #14]
 8009b62:	2b02      	cmp	r3, #2
 8009b64:	d103      	bne.n	8009b6e <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009b66:	687b      	ldr	r3, [r7, #4]
 8009b68:	2205      	movs	r2, #5
 8009b6a:	761a      	strb	r2, [r3, #24]
      break;
 8009b6c:	e09c      	b.n	8009ca8 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009b6e:	7bbb      	ldrb	r3, [r7, #14]
 8009b70:	2b04      	cmp	r3, #4
 8009b72:	f040 8099 	bne.w	8009ca8 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 8009b76:	687b      	ldr	r3, [r7, #4]
 8009b78:	220b      	movs	r2, #11
 8009b7a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8009b7c:	2302      	movs	r3, #2
 8009b7e:	73fb      	strb	r3, [r7, #15]
      break;
 8009b80:	e092      	b.n	8009ca8 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	791b      	ldrb	r3, [r3, #4]
 8009b86:	2200      	movs	r2, #0
 8009b88:	2100      	movs	r1, #0
 8009b8a:	6878      	ldr	r0, [r7, #4]
 8009b8c:	f000 f8d5 	bl	8009d3a <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	761a      	strb	r2, [r3, #24]

      break;
 8009ba2:	e086      	b.n	8009cb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	791b      	ldrb	r3, [r3, #4]
 8009ba8:	4619      	mov	r1, r3
 8009baa:	6878      	ldr	r0, [r7, #4]
 8009bac:	f000 fc12 	bl	800a3d4 <USBH_LL_GetURBState>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009bb4:	7bbb      	ldrb	r3, [r7, #14]
 8009bb6:	2b01      	cmp	r3, #1
 8009bb8:	d105      	bne.n	8009bc6 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 8009bba:	687b      	ldr	r3, [r7, #4]
 8009bbc:	220d      	movs	r2, #13
 8009bbe:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8009bc0:	2300      	movs	r3, #0
 8009bc2:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009bc4:	e072      	b.n	8009cac <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 8009bc6:	7bbb      	ldrb	r3, [r7, #14]
 8009bc8:	2b04      	cmp	r3, #4
 8009bca:	d103      	bne.n	8009bd4 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	220b      	movs	r2, #11
 8009bd0:	761a      	strb	r2, [r3, #24]
      break;
 8009bd2:	e06b      	b.n	8009cac <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8009bd4:	7bbb      	ldrb	r3, [r7, #14]
 8009bd6:	2b05      	cmp	r3, #5
 8009bd8:	d168      	bne.n	8009cac <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 8009bda:	2303      	movs	r3, #3
 8009bdc:	73fb      	strb	r3, [r7, #15]
      break;
 8009bde:	e065      	b.n	8009cac <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	795b      	ldrb	r3, [r3, #5]
 8009be4:	2201      	movs	r2, #1
 8009be6:	9200      	str	r2, [sp, #0]
 8009be8:	2200      	movs	r2, #0
 8009bea:	2100      	movs	r1, #0
 8009bec:	6878      	ldr	r0, [r7, #4]
 8009bee:	f000 f87f 	bl	8009cf0 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009bf8:	b29a      	uxth	r2, r3
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	220a      	movs	r2, #10
 8009c02:	761a      	strb	r2, [r3, #24]
      break;
 8009c04:	e055      	b.n	8009cb2 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009c06:	687b      	ldr	r3, [r7, #4]
 8009c08:	795b      	ldrb	r3, [r3, #5]
 8009c0a:	4619      	mov	r1, r3
 8009c0c:	6878      	ldr	r0, [r7, #4]
 8009c0e:	f000 fbe1 	bl	800a3d4 <USBH_LL_GetURBState>
 8009c12:	4603      	mov	r3, r0
 8009c14:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 8009c16:	7bbb      	ldrb	r3, [r7, #14]
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d105      	bne.n	8009c28 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 8009c1c:	2300      	movs	r3, #0
 8009c1e:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	220d      	movs	r2, #13
 8009c24:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009c26:	e043      	b.n	8009cb0 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009c28:	7bbb      	ldrb	r3, [r7, #14]
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d103      	bne.n	8009c36 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 8009c2e:	687b      	ldr	r3, [r7, #4]
 8009c30:	2209      	movs	r2, #9
 8009c32:	761a      	strb	r2, [r3, #24]
      break;
 8009c34:	e03c      	b.n	8009cb0 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 8009c36:	7bbb      	ldrb	r3, [r7, #14]
 8009c38:	2b04      	cmp	r3, #4
 8009c3a:	d139      	bne.n	8009cb0 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 8009c3c:	687b      	ldr	r3, [r7, #4]
 8009c3e:	220b      	movs	r2, #11
 8009c40:	761a      	strb	r2, [r3, #24]
      break;
 8009c42:	e035      	b.n	8009cb0 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	7e5b      	ldrb	r3, [r3, #25]
 8009c48:	3301      	adds	r3, #1
 8009c4a:	b2da      	uxtb	r2, r3
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	765a      	strb	r2, [r3, #25]
 8009c50:	687b      	ldr	r3, [r7, #4]
 8009c52:	7e5b      	ldrb	r3, [r3, #25]
 8009c54:	2b02      	cmp	r3, #2
 8009c56:	d806      	bhi.n	8009c66 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2201      	movs	r2, #1
 8009c62:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 8009c64:	e025      	b.n	8009cb2 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8009c6c:	2106      	movs	r1, #6
 8009c6e:	6878      	ldr	r0, [r7, #4]
 8009c70:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	2200      	movs	r2, #0
 8009c76:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	795b      	ldrb	r3, [r3, #5]
 8009c7c:	4619      	mov	r1, r3
 8009c7e:	6878      	ldr	r0, [r7, #4]
 8009c80:	f000 f90c 	bl	8009e9c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	791b      	ldrb	r3, [r3, #4]
 8009c88:	4619      	mov	r1, r3
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f000 f906 	bl	8009e9c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 8009c96:	2302      	movs	r3, #2
 8009c98:	73fb      	strb	r3, [r7, #15]
      break;
 8009c9a:	e00a      	b.n	8009cb2 <USBH_HandleControl+0x2de>

    default:
      break;
 8009c9c:	bf00      	nop
 8009c9e:	e008      	b.n	8009cb2 <USBH_HandleControl+0x2de>
      break;
 8009ca0:	bf00      	nop
 8009ca2:	e006      	b.n	8009cb2 <USBH_HandleControl+0x2de>
      break;
 8009ca4:	bf00      	nop
 8009ca6:	e004      	b.n	8009cb2 <USBH_HandleControl+0x2de>
      break;
 8009ca8:	bf00      	nop
 8009caa:	e002      	b.n	8009cb2 <USBH_HandleControl+0x2de>
      break;
 8009cac:	bf00      	nop
 8009cae:	e000      	b.n	8009cb2 <USBH_HandleControl+0x2de>
      break;
 8009cb0:	bf00      	nop
  }

  return status;
 8009cb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3710      	adds	r7, #16
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b088      	sub	sp, #32
 8009cc0:	af04      	add	r7, sp, #16
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4613      	mov	r3, r2
 8009cc8:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009cca:	79f9      	ldrb	r1, [r7, #7]
 8009ccc:	2300      	movs	r3, #0
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	2308      	movs	r3, #8
 8009cd2:	9302      	str	r3, [sp, #8]
 8009cd4:	68bb      	ldr	r3, [r7, #8]
 8009cd6:	9301      	str	r3, [sp, #4]
 8009cd8:	2300      	movs	r3, #0
 8009cda:	9300      	str	r3, [sp, #0]
 8009cdc:	2300      	movs	r3, #0
 8009cde:	2200      	movs	r2, #0
 8009ce0:	68f8      	ldr	r0, [r7, #12]
 8009ce2:	f000 fb46 	bl	800a372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 8009ce6:	2300      	movs	r3, #0
}
 8009ce8:	4618      	mov	r0, r3
 8009cea:	3710      	adds	r7, #16
 8009cec:	46bd      	mov	sp, r7
 8009cee:	bd80      	pop	{r7, pc}

08009cf0 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8009cf0:	b580      	push	{r7, lr}
 8009cf2:	b088      	sub	sp, #32
 8009cf4:	af04      	add	r7, sp, #16
 8009cf6:	60f8      	str	r0, [r7, #12]
 8009cf8:	60b9      	str	r1, [r7, #8]
 8009cfa:	4611      	mov	r1, r2
 8009cfc:	461a      	mov	r2, r3
 8009cfe:	460b      	mov	r3, r1
 8009d00:	80fb      	strh	r3, [r7, #6]
 8009d02:	4613      	mov	r3, r2
 8009d04:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d0c:	2b00      	cmp	r3, #0
 8009d0e:	d001      	beq.n	8009d14 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8009d10:	2300      	movs	r3, #0
 8009d12:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d14:	7979      	ldrb	r1, [r7, #5]
 8009d16:	7e3b      	ldrb	r3, [r7, #24]
 8009d18:	9303      	str	r3, [sp, #12]
 8009d1a:	88fb      	ldrh	r3, [r7, #6]
 8009d1c:	9302      	str	r3, [sp, #8]
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	9301      	str	r3, [sp, #4]
 8009d22:	2301      	movs	r3, #1
 8009d24:	9300      	str	r3, [sp, #0]
 8009d26:	2300      	movs	r3, #0
 8009d28:	2200      	movs	r2, #0
 8009d2a:	68f8      	ldr	r0, [r7, #12]
 8009d2c:	f000 fb21 	bl	800a372 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 8009d30:	2300      	movs	r3, #0
}
 8009d32:	4618      	mov	r0, r3
 8009d34:	3710      	adds	r7, #16
 8009d36:	46bd      	mov	sp, r7
 8009d38:	bd80      	pop	{r7, pc}

08009d3a <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 8009d3a:	b580      	push	{r7, lr}
 8009d3c:	b088      	sub	sp, #32
 8009d3e:	af04      	add	r7, sp, #16
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	4611      	mov	r1, r2
 8009d46:	461a      	mov	r2, r3
 8009d48:	460b      	mov	r3, r1
 8009d4a:	80fb      	strh	r3, [r7, #6]
 8009d4c:	4613      	mov	r3, r2
 8009d4e:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d50:	7979      	ldrb	r1, [r7, #5]
 8009d52:	2300      	movs	r3, #0
 8009d54:	9303      	str	r3, [sp, #12]
 8009d56:	88fb      	ldrh	r3, [r7, #6]
 8009d58:	9302      	str	r3, [sp, #8]
 8009d5a:	68bb      	ldr	r3, [r7, #8]
 8009d5c:	9301      	str	r3, [sp, #4]
 8009d5e:	2301      	movs	r3, #1
 8009d60:	9300      	str	r3, [sp, #0]
 8009d62:	2300      	movs	r3, #0
 8009d64:	2201      	movs	r2, #1
 8009d66:	68f8      	ldr	r0, [r7, #12]
 8009d68:	f000 fb03 	bl	800a372 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009d6c:	2300      	movs	r3, #0

}
 8009d6e:	4618      	mov	r0, r3
 8009d70:	3710      	adds	r7, #16
 8009d72:	46bd      	mov	sp, r7
 8009d74:	bd80      	pop	{r7, pc}

08009d76 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 8009d76:	b580      	push	{r7, lr}
 8009d78:	b088      	sub	sp, #32
 8009d7a:	af04      	add	r7, sp, #16
 8009d7c:	60f8      	str	r0, [r7, #12]
 8009d7e:	60b9      	str	r1, [r7, #8]
 8009d80:	4611      	mov	r1, r2
 8009d82:	461a      	mov	r2, r3
 8009d84:	460b      	mov	r3, r1
 8009d86:	80fb      	strh	r3, [r7, #6]
 8009d88:	4613      	mov	r3, r2
 8009d8a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009d92:	2b00      	cmp	r3, #0
 8009d94:	d001      	beq.n	8009d9a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 8009d96:	2300      	movs	r3, #0
 8009d98:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009d9a:	7979      	ldrb	r1, [r7, #5]
 8009d9c:	7e3b      	ldrb	r3, [r7, #24]
 8009d9e:	9303      	str	r3, [sp, #12]
 8009da0:	88fb      	ldrh	r3, [r7, #6]
 8009da2:	9302      	str	r3, [sp, #8]
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	9301      	str	r3, [sp, #4]
 8009da8:	2301      	movs	r3, #1
 8009daa:	9300      	str	r3, [sp, #0]
 8009dac:	2302      	movs	r3, #2
 8009dae:	2200      	movs	r2, #0
 8009db0:	68f8      	ldr	r0, [r7, #12]
 8009db2:	f000 fade 	bl	800a372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 8009db6:	2300      	movs	r3, #0
}
 8009db8:	4618      	mov	r0, r3
 8009dba:	3710      	adds	r7, #16
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}

08009dc0 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8009dc0:	b580      	push	{r7, lr}
 8009dc2:	b088      	sub	sp, #32
 8009dc4:	af04      	add	r7, sp, #16
 8009dc6:	60f8      	str	r0, [r7, #12]
 8009dc8:	60b9      	str	r1, [r7, #8]
 8009dca:	4611      	mov	r1, r2
 8009dcc:	461a      	mov	r2, r3
 8009dce:	460b      	mov	r3, r1
 8009dd0:	80fb      	strh	r3, [r7, #6]
 8009dd2:	4613      	mov	r3, r2
 8009dd4:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 8009dd6:	7979      	ldrb	r1, [r7, #5]
 8009dd8:	2300      	movs	r3, #0
 8009dda:	9303      	str	r3, [sp, #12]
 8009ddc:	88fb      	ldrh	r3, [r7, #6]
 8009dde:	9302      	str	r3, [sp, #8]
 8009de0:	68bb      	ldr	r3, [r7, #8]
 8009de2:	9301      	str	r3, [sp, #4]
 8009de4:	2301      	movs	r3, #1
 8009de6:	9300      	str	r3, [sp, #0]
 8009de8:	2302      	movs	r3, #2
 8009dea:	2201      	movs	r2, #1
 8009dec:	68f8      	ldr	r0, [r7, #12]
 8009dee:	f000 fac0 	bl	800a372 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 8009df2:	2300      	movs	r3, #0
}
 8009df4:	4618      	mov	r0, r3
 8009df6:	3710      	adds	r7, #16
 8009df8:	46bd      	mov	sp, r7
 8009dfa:	bd80      	pop	{r7, pc}

08009dfc <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b086      	sub	sp, #24
 8009e00:	af04      	add	r7, sp, #16
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	4608      	mov	r0, r1
 8009e06:	4611      	mov	r1, r2
 8009e08:	461a      	mov	r2, r3
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	70fb      	strb	r3, [r7, #3]
 8009e0e:	460b      	mov	r3, r1
 8009e10:	70bb      	strb	r3, [r7, #2]
 8009e12:	4613      	mov	r3, r2
 8009e14:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 8009e16:	7878      	ldrb	r0, [r7, #1]
 8009e18:	78ba      	ldrb	r2, [r7, #2]
 8009e1a:	78f9      	ldrb	r1, [r7, #3]
 8009e1c:	8b3b      	ldrh	r3, [r7, #24]
 8009e1e:	9302      	str	r3, [sp, #8]
 8009e20:	7d3b      	ldrb	r3, [r7, #20]
 8009e22:	9301      	str	r3, [sp, #4]
 8009e24:	7c3b      	ldrb	r3, [r7, #16]
 8009e26:	9300      	str	r3, [sp, #0]
 8009e28:	4603      	mov	r3, r0
 8009e2a:	6878      	ldr	r0, [r7, #4]
 8009e2c:	f000 fa53 	bl	800a2d6 <USBH_LL_OpenPipe>

  return USBH_OK;
 8009e30:	2300      	movs	r3, #0
}
 8009e32:	4618      	mov	r0, r3
 8009e34:	3708      	adds	r7, #8
 8009e36:	46bd      	mov	sp, r7
 8009e38:	bd80      	pop	{r7, pc}

08009e3a <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 8009e3a:	b580      	push	{r7, lr}
 8009e3c:	b082      	sub	sp, #8
 8009e3e:	af00      	add	r7, sp, #0
 8009e40:	6078      	str	r0, [r7, #4]
 8009e42:	460b      	mov	r3, r1
 8009e44:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 8009e46:	78fb      	ldrb	r3, [r7, #3]
 8009e48:	4619      	mov	r1, r3
 8009e4a:	6878      	ldr	r0, [r7, #4]
 8009e4c:	f000 fa72 	bl	800a334 <USBH_LL_ClosePipe>

  return USBH_OK;
 8009e50:	2300      	movs	r3, #0
}
 8009e52:	4618      	mov	r0, r3
 8009e54:	3708      	adds	r7, #8
 8009e56:	46bd      	mov	sp, r7
 8009e58:	bd80      	pop	{r7, pc}

08009e5a <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 8009e5a:	b580      	push	{r7, lr}
 8009e5c:	b084      	sub	sp, #16
 8009e5e:	af00      	add	r7, sp, #0
 8009e60:	6078      	str	r0, [r7, #4]
 8009e62:	460b      	mov	r3, r1
 8009e64:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 8009e66:	6878      	ldr	r0, [r7, #4]
 8009e68:	f000 f836 	bl	8009ed8 <USBH_GetFreePipe>
 8009e6c:	4603      	mov	r3, r0
 8009e6e:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 8009e70:	89fb      	ldrh	r3, [r7, #14]
 8009e72:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8009e76:	4293      	cmp	r3, r2
 8009e78:	d00a      	beq.n	8009e90 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 8009e7a:	78fa      	ldrb	r2, [r7, #3]
 8009e7c:	89fb      	ldrh	r3, [r7, #14]
 8009e7e:	f003 030f 	and.w	r3, r3, #15
 8009e82:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009e86:	6879      	ldr	r1, [r7, #4]
 8009e88:	33e0      	adds	r3, #224	@ 0xe0
 8009e8a:	009b      	lsls	r3, r3, #2
 8009e8c:	440b      	add	r3, r1
 8009e8e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8009e90:	89fb      	ldrh	r3, [r7, #14]
 8009e92:	b2db      	uxtb	r3, r3
}
 8009e94:	4618      	mov	r0, r3
 8009e96:	3710      	adds	r7, #16
 8009e98:	46bd      	mov	sp, r7
 8009e9a:	bd80      	pop	{r7, pc}

08009e9c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8009e9c:	b480      	push	{r7}
 8009e9e:	b083      	sub	sp, #12
 8009ea0:	af00      	add	r7, sp, #0
 8009ea2:	6078      	str	r0, [r7, #4]
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 8009ea8:	78fb      	ldrb	r3, [r7, #3]
 8009eaa:	2b0f      	cmp	r3, #15
 8009eac:	d80d      	bhi.n	8009eca <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8009eae:	78fb      	ldrb	r3, [r7, #3]
 8009eb0:	687a      	ldr	r2, [r7, #4]
 8009eb2:	33e0      	adds	r3, #224	@ 0xe0
 8009eb4:	009b      	lsls	r3, r3, #2
 8009eb6:	4413      	add	r3, r2
 8009eb8:	685a      	ldr	r2, [r3, #4]
 8009eba:	78fb      	ldrb	r3, [r7, #3]
 8009ebc:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8009ec0:	6879      	ldr	r1, [r7, #4]
 8009ec2:	33e0      	adds	r3, #224	@ 0xe0
 8009ec4:	009b      	lsls	r3, r3, #2
 8009ec6:	440b      	add	r3, r1
 8009ec8:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 8009eca:	2300      	movs	r3, #0
}
 8009ecc:	4618      	mov	r0, r3
 8009ece:	370c      	adds	r7, #12
 8009ed0:	46bd      	mov	sp, r7
 8009ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ed6:	4770      	bx	lr

08009ed8 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 8009ed8:	b480      	push	{r7}
 8009eda:	b085      	sub	sp, #20
 8009edc:	af00      	add	r7, sp, #0
 8009ede:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	73fb      	strb	r3, [r7, #15]
 8009ee8:	e00f      	b.n	8009f0a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 8009eea:	7bfb      	ldrb	r3, [r7, #15]
 8009eec:	687a      	ldr	r2, [r7, #4]
 8009eee:	33e0      	adds	r3, #224	@ 0xe0
 8009ef0:	009b      	lsls	r3, r3, #2
 8009ef2:	4413      	add	r3, r2
 8009ef4:	685b      	ldr	r3, [r3, #4]
 8009ef6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d102      	bne.n	8009f04 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8009efe:	7bfb      	ldrb	r3, [r7, #15]
 8009f00:	b29b      	uxth	r3, r3
 8009f02:	e007      	b.n	8009f14 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 8009f04:	7bfb      	ldrb	r3, [r7, #15]
 8009f06:	3301      	adds	r3, #1
 8009f08:	73fb      	strb	r3, [r7, #15]
 8009f0a:	7bfb      	ldrb	r3, [r7, #15]
 8009f0c:	2b0f      	cmp	r3, #15
 8009f0e:	d9ec      	bls.n	8009eea <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8009f10:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 8009f14:	4618      	mov	r0, r3
 8009f16:	3714      	adds	r7, #20
 8009f18:	46bd      	mov	sp, r7
 8009f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f1e:	4770      	bx	lr

08009f20 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 8009f20:	b580      	push	{r7, lr}
 8009f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 8009f24:	2201      	movs	r2, #1
 8009f26:	490e      	ldr	r1, [pc, #56]	@ (8009f60 <MX_USB_HOST_Init+0x40>)
 8009f28:	480e      	ldr	r0, [pc, #56]	@ (8009f64 <MX_USB_HOST_Init+0x44>)
 8009f2a:	f7fe fb15 	bl	8008558 <USBH_Init>
 8009f2e:	4603      	mov	r3, r0
 8009f30:	2b00      	cmp	r3, #0
 8009f32:	d001      	beq.n	8009f38 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 8009f34:	f7f6 feaa 	bl	8000c8c <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 8009f38:	490b      	ldr	r1, [pc, #44]	@ (8009f68 <MX_USB_HOST_Init+0x48>)
 8009f3a:	480a      	ldr	r0, [pc, #40]	@ (8009f64 <MX_USB_HOST_Init+0x44>)
 8009f3c:	f7fe fbb9 	bl	80086b2 <USBH_RegisterClass>
 8009f40:	4603      	mov	r3, r0
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d001      	beq.n	8009f4a <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 8009f46:	f7f6 fea1 	bl	8000c8c <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 8009f4a:	4806      	ldr	r0, [pc, #24]	@ (8009f64 <MX_USB_HOST_Init+0x44>)
 8009f4c:	f7fe fc3d 	bl	80087ca <USBH_Start>
 8009f50:	4603      	mov	r3, r0
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d001      	beq.n	8009f5a <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 8009f56:	f7f6 fe99 	bl	8000c8c <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 8009f5a:	bf00      	nop
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	08009f81 	.word	0x08009f81
 8009f64:	200002d0 	.word	0x200002d0
 8009f68:	2000000c 	.word	0x2000000c

08009f6c <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 8009f70:	4802      	ldr	r0, [pc, #8]	@ (8009f7c <MX_USB_HOST_Process+0x10>)
 8009f72:	f7fe fc3b 	bl	80087ec <USBH_Process>
}
 8009f76:	bf00      	nop
 8009f78:	bd80      	pop	{r7, pc}
 8009f7a:	bf00      	nop
 8009f7c:	200002d0 	.word	0x200002d0

08009f80 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 8009f80:	b480      	push	{r7}
 8009f82:	b083      	sub	sp, #12
 8009f84:	af00      	add	r7, sp, #0
 8009f86:	6078      	str	r0, [r7, #4]
 8009f88:	460b      	mov	r3, r1
 8009f8a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 8009f8c:	78fb      	ldrb	r3, [r7, #3]
 8009f8e:	3b01      	subs	r3, #1
 8009f90:	2b04      	cmp	r3, #4
 8009f92:	d819      	bhi.n	8009fc8 <USBH_UserProcess+0x48>
 8009f94:	a201      	add	r2, pc, #4	@ (adr r2, 8009f9c <USBH_UserProcess+0x1c>)
 8009f96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f9a:	bf00      	nop
 8009f9c:	08009fc9 	.word	0x08009fc9
 8009fa0:	08009fb9 	.word	0x08009fb9
 8009fa4:	08009fc9 	.word	0x08009fc9
 8009fa8:	08009fc1 	.word	0x08009fc1
 8009fac:	08009fb1 	.word	0x08009fb1
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8009fb0:	4b09      	ldr	r3, [pc, #36]	@ (8009fd8 <USBH_UserProcess+0x58>)
 8009fb2:	2203      	movs	r2, #3
 8009fb4:	701a      	strb	r2, [r3, #0]
  break;
 8009fb6:	e008      	b.n	8009fca <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8009fb8:	4b07      	ldr	r3, [pc, #28]	@ (8009fd8 <USBH_UserProcess+0x58>)
 8009fba:	2202      	movs	r2, #2
 8009fbc:	701a      	strb	r2, [r3, #0]
  break;
 8009fbe:	e004      	b.n	8009fca <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8009fc0:	4b05      	ldr	r3, [pc, #20]	@ (8009fd8 <USBH_UserProcess+0x58>)
 8009fc2:	2201      	movs	r2, #1
 8009fc4:	701a      	strb	r2, [r3, #0]
  break;
 8009fc6:	e000      	b.n	8009fca <USBH_UserProcess+0x4a>

  default:
  break;
 8009fc8:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 8009fca:	bf00      	nop
 8009fcc:	370c      	adds	r7, #12
 8009fce:	46bd      	mov	sp, r7
 8009fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009fd4:	4770      	bx	lr
 8009fd6:	bf00      	nop
 8009fd8:	200006a8 	.word	0x200006a8

08009fdc <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 8009fdc:	b580      	push	{r7, lr}
 8009fde:	b08a      	sub	sp, #40	@ 0x28
 8009fe0:	af00      	add	r7, sp, #0
 8009fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8009fe4:	f107 0314 	add.w	r3, r7, #20
 8009fe8:	2200      	movs	r2, #0
 8009fea:	601a      	str	r2, [r3, #0]
 8009fec:	605a      	str	r2, [r3, #4]
 8009fee:	609a      	str	r2, [r3, #8]
 8009ff0:	60da      	str	r2, [r3, #12]
 8009ff2:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8009ffc:	d147      	bne.n	800a08e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8009ffe:	2300      	movs	r3, #0
 800a000:	613b      	str	r3, [r7, #16]
 800a002:	4b25      	ldr	r3, [pc, #148]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a004:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a006:	4a24      	ldr	r2, [pc, #144]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a008:	f043 0301 	orr.w	r3, r3, #1
 800a00c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a00e:	4b22      	ldr	r3, [pc, #136]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a010:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a012:	f003 0301 	and.w	r3, r3, #1
 800a016:	613b      	str	r3, [r7, #16]
 800a018:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a01a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a01e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a020:	2300      	movs	r3, #0
 800a022:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a024:	2300      	movs	r3, #0
 800a026:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a028:	f107 0314 	add.w	r3, r7, #20
 800a02c:	4619      	mov	r1, r3
 800a02e:	481b      	ldr	r0, [pc, #108]	@ (800a09c <HAL_HCD_MspInit+0xc0>)
 800a030:	f7f7 fdc6 	bl	8001bc0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a034:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a03a:	2302      	movs	r3, #2
 800a03c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a03e:	2300      	movs	r3, #0
 800a040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a042:	2300      	movs	r3, #0
 800a044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a046:	230a      	movs	r3, #10
 800a048:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a04a:	f107 0314 	add.w	r3, r7, #20
 800a04e:	4619      	mov	r1, r3
 800a050:	4812      	ldr	r0, [pc, #72]	@ (800a09c <HAL_HCD_MspInit+0xc0>)
 800a052:	f7f7 fdb5 	bl	8001bc0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a056:	4b10      	ldr	r3, [pc, #64]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a058:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a05a:	4a0f      	ldr	r2, [pc, #60]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a05c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a060:	6353      	str	r3, [r2, #52]	@ 0x34
 800a062:	2300      	movs	r3, #0
 800a064:	60fb      	str	r3, [r7, #12]
 800a066:	4b0c      	ldr	r3, [pc, #48]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a06a:	4a0b      	ldr	r2, [pc, #44]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a06c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a070:	6453      	str	r3, [r2, #68]	@ 0x44
 800a072:	4b09      	ldr	r3, [pc, #36]	@ (800a098 <HAL_HCD_MspInit+0xbc>)
 800a074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a07a:	60fb      	str	r3, [r7, #12]
 800a07c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a07e:	2200      	movs	r2, #0
 800a080:	2100      	movs	r1, #0
 800a082:	2043      	movs	r0, #67	@ 0x43
 800a084:	f7f7 fa7b 	bl	800157e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a088:	2043      	movs	r0, #67	@ 0x43
 800a08a:	f7f7 fa94 	bl	80015b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a08e:	bf00      	nop
 800a090:	3728      	adds	r7, #40	@ 0x28
 800a092:	46bd      	mov	sp, r7
 800a094:	bd80      	pop	{r7, pc}
 800a096:	bf00      	nop
 800a098:	40023800 	.word	0x40023800
 800a09c:	40020000 	.word	0x40020000

0800a0a0 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0a0:	b580      	push	{r7, lr}
 800a0a2:	b082      	sub	sp, #8
 800a0a4:	af00      	add	r7, sp, #0
 800a0a6:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0ae:	4618      	mov	r0, r3
 800a0b0:	f7fe ff73 	bl	8008f9a <USBH_LL_IncTimer>
}
 800a0b4:	bf00      	nop
 800a0b6:	3708      	adds	r7, #8
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}

0800a0bc <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0bc:	b580      	push	{r7, lr}
 800a0be:	b082      	sub	sp, #8
 800a0c0:	af00      	add	r7, sp, #0
 800a0c2:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0ca:	4618      	mov	r0, r3
 800a0cc:	f7fe ffab 	bl	8009026 <USBH_LL_Connect>
}
 800a0d0:	bf00      	nop
 800a0d2:	3708      	adds	r7, #8
 800a0d4:	46bd      	mov	sp, r7
 800a0d6:	bd80      	pop	{r7, pc}

0800a0d8 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a0d8:	b580      	push	{r7, lr}
 800a0da:	b082      	sub	sp, #8
 800a0dc:	af00      	add	r7, sp, #0
 800a0de:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a0e6:	4618      	mov	r0, r3
 800a0e8:	f7fe ffb4 	bl	8009054 <USBH_LL_Disconnect>
}
 800a0ec:	bf00      	nop
 800a0ee:	3708      	adds	r7, #8
 800a0f0:	46bd      	mov	sp, r7
 800a0f2:	bd80      	pop	{r7, pc}

0800a0f4 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a0f4:	b480      	push	{r7}
 800a0f6:	b083      	sub	sp, #12
 800a0f8:	af00      	add	r7, sp, #0
 800a0fa:	6078      	str	r0, [r7, #4]
 800a0fc:	460b      	mov	r3, r1
 800a0fe:	70fb      	strb	r3, [r7, #3]
 800a100:	4613      	mov	r3, r2
 800a102:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a104:	bf00      	nop
 800a106:	370c      	adds	r7, #12
 800a108:	46bd      	mov	sp, r7
 800a10a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a10e:	4770      	bx	lr

0800a110 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a110:	b580      	push	{r7, lr}
 800a112:	b082      	sub	sp, #8
 800a114:	af00      	add	r7, sp, #0
 800a116:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a11e:	4618      	mov	r0, r3
 800a120:	f7fe ff65 	bl	8008fee <USBH_LL_PortEnabled>
}
 800a124:	bf00      	nop
 800a126:	3708      	adds	r7, #8
 800a128:	46bd      	mov	sp, r7
 800a12a:	bd80      	pop	{r7, pc}

0800a12c <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a134:	687b      	ldr	r3, [r7, #4]
 800a136:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a13a:	4618      	mov	r0, r3
 800a13c:	f7fe ff65 	bl	800900a <USBH_LL_PortDisabled>
}
 800a140:	bf00      	nop
 800a142:	3708      	adds	r7, #8
 800a144:	46bd      	mov	sp, r7
 800a146:	bd80      	pop	{r7, pc}

0800a148 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a148:	b580      	push	{r7, lr}
 800a14a:	b082      	sub	sp, #8
 800a14c:	af00      	add	r7, sp, #0
 800a14e:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a156:	2b01      	cmp	r3, #1
 800a158:	d12a      	bne.n	800a1b0 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a15a:	4a18      	ldr	r2, [pc, #96]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	4a15      	ldr	r2, [pc, #84]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a166:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a16a:	4b14      	ldr	r3, [pc, #80]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a16c:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a170:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a172:	4b12      	ldr	r3, [pc, #72]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a174:	2208      	movs	r2, #8
 800a176:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a178:	4b10      	ldr	r3, [pc, #64]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a17a:	2201      	movs	r2, #1
 800a17c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a17e:	4b0f      	ldr	r3, [pc, #60]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a180:	2200      	movs	r2, #0
 800a182:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a184:	4b0d      	ldr	r3, [pc, #52]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a186:	2202      	movs	r2, #2
 800a188:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a18a:	4b0c      	ldr	r3, [pc, #48]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a18c:	2200      	movs	r2, #0
 800a18e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a190:	480a      	ldr	r0, [pc, #40]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a192:	f7f7 feee 	bl	8001f72 <HAL_HCD_Init>
 800a196:	4603      	mov	r3, r0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d001      	beq.n	800a1a0 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a19c:	f7f6 fd76 	bl	8000c8c <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a1a0:	4806      	ldr	r0, [pc, #24]	@ (800a1bc <USBH_LL_Init+0x74>)
 800a1a2:	f7f8 fb4f 	bl	8002844 <HAL_HCD_GetCurrentFrame>
 800a1a6:	4603      	mov	r3, r0
 800a1a8:	4619      	mov	r1, r3
 800a1aa:	6878      	ldr	r0, [r7, #4]
 800a1ac:	f7fe fee6 	bl	8008f7c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a1b0:	2300      	movs	r3, #0
}
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	3708      	adds	r7, #8
 800a1b6:	46bd      	mov	sp, r7
 800a1b8:	bd80      	pop	{r7, pc}
 800a1ba:	bf00      	nop
 800a1bc:	200006ac 	.word	0x200006ac

0800a1c0 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a1c0:	b580      	push	{r7, lr}
 800a1c2:	b084      	sub	sp, #16
 800a1c4:	af00      	add	r7, sp, #0
 800a1c6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a1cc:	2300      	movs	r3, #0
 800a1ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a1d6:	4618      	mov	r0, r3
 800a1d8:	f7f8 fabc 	bl	8002754 <HAL_HCD_Start>
 800a1dc:	4603      	mov	r3, r0
 800a1de:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a1e0:	7bfb      	ldrb	r3, [r7, #15]
 800a1e2:	4618      	mov	r0, r3
 800a1e4:	f000 f95e 	bl	800a4a4 <USBH_Get_USB_Status>
 800a1e8:	4603      	mov	r3, r0
 800a1ea:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a1ec:	7bbb      	ldrb	r3, [r7, #14]
}
 800a1ee:	4618      	mov	r0, r3
 800a1f0:	3710      	adds	r7, #16
 800a1f2:	46bd      	mov	sp, r7
 800a1f4:	bd80      	pop	{r7, pc}

0800a1f6 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a1f6:	b580      	push	{r7, lr}
 800a1f8:	b084      	sub	sp, #16
 800a1fa:	af00      	add	r7, sp, #0
 800a1fc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a1fe:	2300      	movs	r3, #0
 800a200:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a202:	2300      	movs	r3, #0
 800a204:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a20c:	4618      	mov	r0, r3
 800a20e:	f7f8 fac4 	bl	800279a <HAL_HCD_Stop>
 800a212:	4603      	mov	r3, r0
 800a214:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a216:	7bfb      	ldrb	r3, [r7, #15]
 800a218:	4618      	mov	r0, r3
 800a21a:	f000 f943 	bl	800a4a4 <USBH_Get_USB_Status>
 800a21e:	4603      	mov	r3, r0
 800a220:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a222:	7bbb      	ldrb	r3, [r7, #14]
}
 800a224:	4618      	mov	r0, r3
 800a226:	3710      	adds	r7, #16
 800a228:	46bd      	mov	sp, r7
 800a22a:	bd80      	pop	{r7, pc}

0800a22c <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a22c:	b580      	push	{r7, lr}
 800a22e:	b084      	sub	sp, #16
 800a230:	af00      	add	r7, sp, #0
 800a232:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a234:	2301      	movs	r3, #1
 800a236:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a23e:	4618      	mov	r0, r3
 800a240:	f7f8 fb0e 	bl	8002860 <HAL_HCD_GetCurrentSpeed>
 800a244:	4603      	mov	r3, r0
 800a246:	2b02      	cmp	r3, #2
 800a248:	d00c      	beq.n	800a264 <USBH_LL_GetSpeed+0x38>
 800a24a:	2b02      	cmp	r3, #2
 800a24c:	d80d      	bhi.n	800a26a <USBH_LL_GetSpeed+0x3e>
 800a24e:	2b00      	cmp	r3, #0
 800a250:	d002      	beq.n	800a258 <USBH_LL_GetSpeed+0x2c>
 800a252:	2b01      	cmp	r3, #1
 800a254:	d003      	beq.n	800a25e <USBH_LL_GetSpeed+0x32>
 800a256:	e008      	b.n	800a26a <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a258:	2300      	movs	r3, #0
 800a25a:	73fb      	strb	r3, [r7, #15]
    break;
 800a25c:	e008      	b.n	800a270 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a25e:	2301      	movs	r3, #1
 800a260:	73fb      	strb	r3, [r7, #15]
    break;
 800a262:	e005      	b.n	800a270 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a264:	2302      	movs	r3, #2
 800a266:	73fb      	strb	r3, [r7, #15]
    break;
 800a268:	e002      	b.n	800a270 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a26a:	2301      	movs	r3, #1
 800a26c:	73fb      	strb	r3, [r7, #15]
    break;
 800a26e:	bf00      	nop
  }
  return  speed;
 800a270:	7bfb      	ldrb	r3, [r7, #15]
}
 800a272:	4618      	mov	r0, r3
 800a274:	3710      	adds	r7, #16
 800a276:	46bd      	mov	sp, r7
 800a278:	bd80      	pop	{r7, pc}

0800a27a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a27a:	b580      	push	{r7, lr}
 800a27c:	b084      	sub	sp, #16
 800a27e:	af00      	add	r7, sp, #0
 800a280:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a282:	2300      	movs	r3, #0
 800a284:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a286:	2300      	movs	r3, #0
 800a288:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a290:	4618      	mov	r0, r3
 800a292:	f7f8 fa9f 	bl	80027d4 <HAL_HCD_ResetPort>
 800a296:	4603      	mov	r3, r0
 800a298:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a29a:	7bfb      	ldrb	r3, [r7, #15]
 800a29c:	4618      	mov	r0, r3
 800a29e:	f000 f901 	bl	800a4a4 <USBH_Get_USB_Status>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a2a6:	7bbb      	ldrb	r3, [r7, #14]
}
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	3710      	adds	r7, #16
 800a2ac:	46bd      	mov	sp, r7
 800a2ae:	bd80      	pop	{r7, pc}

0800a2b0 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a2b0:	b580      	push	{r7, lr}
 800a2b2:	b082      	sub	sp, #8
 800a2b4:	af00      	add	r7, sp, #0
 800a2b6:	6078      	str	r0, [r7, #4]
 800a2b8:	460b      	mov	r3, r1
 800a2ba:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a2c2:	78fa      	ldrb	r2, [r7, #3]
 800a2c4:	4611      	mov	r1, r2
 800a2c6:	4618      	mov	r0, r3
 800a2c8:	f7f8 faa7 	bl	800281a <HAL_HCD_HC_GetXferCount>
 800a2cc:	4603      	mov	r3, r0
}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3708      	adds	r7, #8
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a2d6:	b590      	push	{r4, r7, lr}
 800a2d8:	b089      	sub	sp, #36	@ 0x24
 800a2da:	af04      	add	r7, sp, #16
 800a2dc:	6078      	str	r0, [r7, #4]
 800a2de:	4608      	mov	r0, r1
 800a2e0:	4611      	mov	r1, r2
 800a2e2:	461a      	mov	r2, r3
 800a2e4:	4603      	mov	r3, r0
 800a2e6:	70fb      	strb	r3, [r7, #3]
 800a2e8:	460b      	mov	r3, r1
 800a2ea:	70bb      	strb	r3, [r7, #2]
 800a2ec:	4613      	mov	r3, r2
 800a2ee:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a2f4:	2300      	movs	r3, #0
 800a2f6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a2fe:	787c      	ldrb	r4, [r7, #1]
 800a300:	78ba      	ldrb	r2, [r7, #2]
 800a302:	78f9      	ldrb	r1, [r7, #3]
 800a304:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a306:	9302      	str	r3, [sp, #8]
 800a308:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a30c:	9301      	str	r3, [sp, #4]
 800a30e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a312:	9300      	str	r3, [sp, #0]
 800a314:	4623      	mov	r3, r4
 800a316:	f7f7 fe93 	bl	8002040 <HAL_HCD_HC_Init>
 800a31a:	4603      	mov	r3, r0
 800a31c:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a31e:	7bfb      	ldrb	r3, [r7, #15]
 800a320:	4618      	mov	r0, r3
 800a322:	f000 f8bf 	bl	800a4a4 <USBH_Get_USB_Status>
 800a326:	4603      	mov	r3, r0
 800a328:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a32a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a32c:	4618      	mov	r0, r3
 800a32e:	3714      	adds	r7, #20
 800a330:	46bd      	mov	sp, r7
 800a332:	bd90      	pop	{r4, r7, pc}

0800a334 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b084      	sub	sp, #16
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a340:	2300      	movs	r3, #0
 800a342:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a344:	2300      	movs	r3, #0
 800a346:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a348:	687b      	ldr	r3, [r7, #4]
 800a34a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a34e:	78fa      	ldrb	r2, [r7, #3]
 800a350:	4611      	mov	r1, r2
 800a352:	4618      	mov	r0, r3
 800a354:	f7f7 ff2c 	bl	80021b0 <HAL_HCD_HC_Halt>
 800a358:	4603      	mov	r3, r0
 800a35a:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a35c:	7bfb      	ldrb	r3, [r7, #15]
 800a35e:	4618      	mov	r0, r3
 800a360:	f000 f8a0 	bl	800a4a4 <USBH_Get_USB_Status>
 800a364:	4603      	mov	r3, r0
 800a366:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a368:	7bbb      	ldrb	r3, [r7, #14]
}
 800a36a:	4618      	mov	r0, r3
 800a36c:	3710      	adds	r7, #16
 800a36e:	46bd      	mov	sp, r7
 800a370:	bd80      	pop	{r7, pc}

0800a372 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a372:	b590      	push	{r4, r7, lr}
 800a374:	b089      	sub	sp, #36	@ 0x24
 800a376:	af04      	add	r7, sp, #16
 800a378:	6078      	str	r0, [r7, #4]
 800a37a:	4608      	mov	r0, r1
 800a37c:	4611      	mov	r1, r2
 800a37e:	461a      	mov	r2, r3
 800a380:	4603      	mov	r3, r0
 800a382:	70fb      	strb	r3, [r7, #3]
 800a384:	460b      	mov	r3, r1
 800a386:	70bb      	strb	r3, [r7, #2]
 800a388:	4613      	mov	r3, r2
 800a38a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a38c:	2300      	movs	r3, #0
 800a38e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a390:	2300      	movs	r3, #0
 800a392:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a39a:	787c      	ldrb	r4, [r7, #1]
 800a39c:	78ba      	ldrb	r2, [r7, #2]
 800a39e:	78f9      	ldrb	r1, [r7, #3]
 800a3a0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a3a4:	9303      	str	r3, [sp, #12]
 800a3a6:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a3a8:	9302      	str	r3, [sp, #8]
 800a3aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a3ac:	9301      	str	r3, [sp, #4]
 800a3ae:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a3b2:	9300      	str	r3, [sp, #0]
 800a3b4:	4623      	mov	r3, r4
 800a3b6:	f7f7 ff1f 	bl	80021f8 <HAL_HCD_HC_SubmitRequest>
 800a3ba:	4603      	mov	r3, r0
 800a3bc:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a3be:	7bfb      	ldrb	r3, [r7, #15]
 800a3c0:	4618      	mov	r0, r3
 800a3c2:	f000 f86f 	bl	800a4a4 <USBH_Get_USB_Status>
 800a3c6:	4603      	mov	r3, r0
 800a3c8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a3ca:	7bbb      	ldrb	r3, [r7, #14]
}
 800a3cc:	4618      	mov	r0, r3
 800a3ce:	3714      	adds	r7, #20
 800a3d0:	46bd      	mov	sp, r7
 800a3d2:	bd90      	pop	{r4, r7, pc}

0800a3d4 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a3d4:	b580      	push	{r7, lr}
 800a3d6:	b082      	sub	sp, #8
 800a3d8:	af00      	add	r7, sp, #0
 800a3da:	6078      	str	r0, [r7, #4]
 800a3dc:	460b      	mov	r3, r1
 800a3de:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a3e6:	78fa      	ldrb	r2, [r7, #3]
 800a3e8:	4611      	mov	r1, r2
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7f8 fa00 	bl	80027f0 <HAL_HCD_HC_GetURBState>
 800a3f0:	4603      	mov	r3, r0
}
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	3708      	adds	r7, #8
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}

0800a3fa <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a3fa:	b580      	push	{r7, lr}
 800a3fc:	b082      	sub	sp, #8
 800a3fe:	af00      	add	r7, sp, #0
 800a400:	6078      	str	r0, [r7, #4]
 800a402:	460b      	mov	r3, r1
 800a404:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d103      	bne.n	800a418 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a410:	78fb      	ldrb	r3, [r7, #3]
 800a412:	4618      	mov	r0, r3
 800a414:	f000 f872 	bl	800a4fc <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a418:	20c8      	movs	r0, #200	@ 0xc8
 800a41a:	f7f6 ffb1 	bl	8001380 <HAL_Delay>
  return USBH_OK;
 800a41e:	2300      	movs	r3, #0
}
 800a420:	4618      	mov	r0, r3
 800a422:	3708      	adds	r7, #8
 800a424:	46bd      	mov	sp, r7
 800a426:	bd80      	pop	{r7, pc}

0800a428 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a428:	b480      	push	{r7}
 800a42a:	b085      	sub	sp, #20
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	6078      	str	r0, [r7, #4]
 800a430:	460b      	mov	r3, r1
 800a432:	70fb      	strb	r3, [r7, #3]
 800a434:	4613      	mov	r3, r2
 800a436:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a43e:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a440:	78fa      	ldrb	r2, [r7, #3]
 800a442:	68f9      	ldr	r1, [r7, #12]
 800a444:	4613      	mov	r3, r2
 800a446:	011b      	lsls	r3, r3, #4
 800a448:	1a9b      	subs	r3, r3, r2
 800a44a:	009b      	lsls	r3, r3, #2
 800a44c:	440b      	add	r3, r1
 800a44e:	3317      	adds	r3, #23
 800a450:	781b      	ldrb	r3, [r3, #0]
 800a452:	2b00      	cmp	r3, #0
 800a454:	d00a      	beq.n	800a46c <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a456:	78fa      	ldrb	r2, [r7, #3]
 800a458:	68f9      	ldr	r1, [r7, #12]
 800a45a:	4613      	mov	r3, r2
 800a45c:	011b      	lsls	r3, r3, #4
 800a45e:	1a9b      	subs	r3, r3, r2
 800a460:	009b      	lsls	r3, r3, #2
 800a462:	440b      	add	r3, r1
 800a464:	333c      	adds	r3, #60	@ 0x3c
 800a466:	78ba      	ldrb	r2, [r7, #2]
 800a468:	701a      	strb	r2, [r3, #0]
 800a46a:	e009      	b.n	800a480 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a46c:	78fa      	ldrb	r2, [r7, #3]
 800a46e:	68f9      	ldr	r1, [r7, #12]
 800a470:	4613      	mov	r3, r2
 800a472:	011b      	lsls	r3, r3, #4
 800a474:	1a9b      	subs	r3, r3, r2
 800a476:	009b      	lsls	r3, r3, #2
 800a478:	440b      	add	r3, r1
 800a47a:	333d      	adds	r3, #61	@ 0x3d
 800a47c:	78ba      	ldrb	r2, [r7, #2]
 800a47e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a480:	2300      	movs	r3, #0
}
 800a482:	4618      	mov	r0, r3
 800a484:	3714      	adds	r7, #20
 800a486:	46bd      	mov	sp, r7
 800a488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a48c:	4770      	bx	lr

0800a48e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a48e:	b580      	push	{r7, lr}
 800a490:	b082      	sub	sp, #8
 800a492:	af00      	add	r7, sp, #0
 800a494:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a496:	6878      	ldr	r0, [r7, #4]
 800a498:	f7f6 ff72 	bl	8001380 <HAL_Delay>
}
 800a49c:	bf00      	nop
 800a49e:	3708      	adds	r7, #8
 800a4a0:	46bd      	mov	sp, r7
 800a4a2:	bd80      	pop	{r7, pc}

0800a4a4 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a4a4:	b480      	push	{r7}
 800a4a6:	b085      	sub	sp, #20
 800a4a8:	af00      	add	r7, sp, #0
 800a4aa:	4603      	mov	r3, r0
 800a4ac:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a4ae:	2300      	movs	r3, #0
 800a4b0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a4b2:	79fb      	ldrb	r3, [r7, #7]
 800a4b4:	2b03      	cmp	r3, #3
 800a4b6:	d817      	bhi.n	800a4e8 <USBH_Get_USB_Status+0x44>
 800a4b8:	a201      	add	r2, pc, #4	@ (adr r2, 800a4c0 <USBH_Get_USB_Status+0x1c>)
 800a4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a4be:	bf00      	nop
 800a4c0:	0800a4d1 	.word	0x0800a4d1
 800a4c4:	0800a4d7 	.word	0x0800a4d7
 800a4c8:	0800a4dd 	.word	0x0800a4dd
 800a4cc:	0800a4e3 	.word	0x0800a4e3
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a4d0:	2300      	movs	r3, #0
 800a4d2:	73fb      	strb	r3, [r7, #15]
    break;
 800a4d4:	e00b      	b.n	800a4ee <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a4d6:	2302      	movs	r3, #2
 800a4d8:	73fb      	strb	r3, [r7, #15]
    break;
 800a4da:	e008      	b.n	800a4ee <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a4dc:	2301      	movs	r3, #1
 800a4de:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e0:	e005      	b.n	800a4ee <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a4e2:	2302      	movs	r3, #2
 800a4e4:	73fb      	strb	r3, [r7, #15]
    break;
 800a4e6:	e002      	b.n	800a4ee <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a4ec:	bf00      	nop
  }
  return usb_status;
 800a4ee:	7bfb      	ldrb	r3, [r7, #15]
}
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	3714      	adds	r7, #20
 800a4f4:	46bd      	mov	sp, r7
 800a4f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fa:	4770      	bx	lr

0800a4fc <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a4fc:	b580      	push	{r7, lr}
 800a4fe:	b084      	sub	sp, #16
 800a500:	af00      	add	r7, sp, #0
 800a502:	4603      	mov	r3, r0
 800a504:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a506:	79fb      	ldrb	r3, [r7, #7]
 800a508:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a50a:	79fb      	ldrb	r3, [r7, #7]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d102      	bne.n	800a516 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a510:	2300      	movs	r3, #0
 800a512:	73fb      	strb	r3, [r7, #15]
 800a514:	e001      	b.n	800a51a <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a516:	2301      	movs	r3, #1
 800a518:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a51a:	7bfb      	ldrb	r3, [r7, #15]
 800a51c:	461a      	mov	r2, r3
 800a51e:	2101      	movs	r1, #1
 800a520:	4803      	ldr	r0, [pc, #12]	@ (800a530 <MX_DriverVbusFS+0x34>)
 800a522:	f7f7 fce9 	bl	8001ef8 <HAL_GPIO_WritePin>
}
 800a526:	bf00      	nop
 800a528:	3710      	adds	r7, #16
 800a52a:	46bd      	mov	sp, r7
 800a52c:	bd80      	pop	{r7, pc}
 800a52e:	bf00      	nop
 800a530:	40020800 	.word	0x40020800

0800a534 <malloc>:
 800a534:	4b02      	ldr	r3, [pc, #8]	@ (800a540 <malloc+0xc>)
 800a536:	4601      	mov	r1, r0
 800a538:	6818      	ldr	r0, [r3, #0]
 800a53a:	f000 b82d 	b.w	800a598 <_malloc_r>
 800a53e:	bf00      	nop
 800a540:	2000002c 	.word	0x2000002c

0800a544 <free>:
 800a544:	4b02      	ldr	r3, [pc, #8]	@ (800a550 <free+0xc>)
 800a546:	4601      	mov	r1, r0
 800a548:	6818      	ldr	r0, [r3, #0]
 800a54a:	f000 b8f5 	b.w	800a738 <_free_r>
 800a54e:	bf00      	nop
 800a550:	2000002c 	.word	0x2000002c

0800a554 <sbrk_aligned>:
 800a554:	b570      	push	{r4, r5, r6, lr}
 800a556:	4e0f      	ldr	r6, [pc, #60]	@ (800a594 <sbrk_aligned+0x40>)
 800a558:	460c      	mov	r4, r1
 800a55a:	6831      	ldr	r1, [r6, #0]
 800a55c:	4605      	mov	r5, r0
 800a55e:	b911      	cbnz	r1, 800a566 <sbrk_aligned+0x12>
 800a560:	f000 f8ae 	bl	800a6c0 <_sbrk_r>
 800a564:	6030      	str	r0, [r6, #0]
 800a566:	4621      	mov	r1, r4
 800a568:	4628      	mov	r0, r5
 800a56a:	f000 f8a9 	bl	800a6c0 <_sbrk_r>
 800a56e:	1c43      	adds	r3, r0, #1
 800a570:	d103      	bne.n	800a57a <sbrk_aligned+0x26>
 800a572:	f04f 34ff 	mov.w	r4, #4294967295
 800a576:	4620      	mov	r0, r4
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	1cc4      	adds	r4, r0, #3
 800a57c:	f024 0403 	bic.w	r4, r4, #3
 800a580:	42a0      	cmp	r0, r4
 800a582:	d0f8      	beq.n	800a576 <sbrk_aligned+0x22>
 800a584:	1a21      	subs	r1, r4, r0
 800a586:	4628      	mov	r0, r5
 800a588:	f000 f89a 	bl	800a6c0 <_sbrk_r>
 800a58c:	3001      	adds	r0, #1
 800a58e:	d1f2      	bne.n	800a576 <sbrk_aligned+0x22>
 800a590:	e7ef      	b.n	800a572 <sbrk_aligned+0x1e>
 800a592:	bf00      	nop
 800a594:	20000a8c 	.word	0x20000a8c

0800a598 <_malloc_r>:
 800a598:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a59c:	1ccd      	adds	r5, r1, #3
 800a59e:	f025 0503 	bic.w	r5, r5, #3
 800a5a2:	3508      	adds	r5, #8
 800a5a4:	2d0c      	cmp	r5, #12
 800a5a6:	bf38      	it	cc
 800a5a8:	250c      	movcc	r5, #12
 800a5aa:	2d00      	cmp	r5, #0
 800a5ac:	4606      	mov	r6, r0
 800a5ae:	db01      	blt.n	800a5b4 <_malloc_r+0x1c>
 800a5b0:	42a9      	cmp	r1, r5
 800a5b2:	d904      	bls.n	800a5be <_malloc_r+0x26>
 800a5b4:	230c      	movs	r3, #12
 800a5b6:	6033      	str	r3, [r6, #0]
 800a5b8:	2000      	movs	r0, #0
 800a5ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a5be:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a694 <_malloc_r+0xfc>
 800a5c2:	f000 f869 	bl	800a698 <__malloc_lock>
 800a5c6:	f8d8 3000 	ldr.w	r3, [r8]
 800a5ca:	461c      	mov	r4, r3
 800a5cc:	bb44      	cbnz	r4, 800a620 <_malloc_r+0x88>
 800a5ce:	4629      	mov	r1, r5
 800a5d0:	4630      	mov	r0, r6
 800a5d2:	f7ff ffbf 	bl	800a554 <sbrk_aligned>
 800a5d6:	1c43      	adds	r3, r0, #1
 800a5d8:	4604      	mov	r4, r0
 800a5da:	d158      	bne.n	800a68e <_malloc_r+0xf6>
 800a5dc:	f8d8 4000 	ldr.w	r4, [r8]
 800a5e0:	4627      	mov	r7, r4
 800a5e2:	2f00      	cmp	r7, #0
 800a5e4:	d143      	bne.n	800a66e <_malloc_r+0xd6>
 800a5e6:	2c00      	cmp	r4, #0
 800a5e8:	d04b      	beq.n	800a682 <_malloc_r+0xea>
 800a5ea:	6823      	ldr	r3, [r4, #0]
 800a5ec:	4639      	mov	r1, r7
 800a5ee:	4630      	mov	r0, r6
 800a5f0:	eb04 0903 	add.w	r9, r4, r3
 800a5f4:	f000 f864 	bl	800a6c0 <_sbrk_r>
 800a5f8:	4581      	cmp	r9, r0
 800a5fa:	d142      	bne.n	800a682 <_malloc_r+0xea>
 800a5fc:	6821      	ldr	r1, [r4, #0]
 800a5fe:	1a6d      	subs	r5, r5, r1
 800a600:	4629      	mov	r1, r5
 800a602:	4630      	mov	r0, r6
 800a604:	f7ff ffa6 	bl	800a554 <sbrk_aligned>
 800a608:	3001      	adds	r0, #1
 800a60a:	d03a      	beq.n	800a682 <_malloc_r+0xea>
 800a60c:	6823      	ldr	r3, [r4, #0]
 800a60e:	442b      	add	r3, r5
 800a610:	6023      	str	r3, [r4, #0]
 800a612:	f8d8 3000 	ldr.w	r3, [r8]
 800a616:	685a      	ldr	r2, [r3, #4]
 800a618:	bb62      	cbnz	r2, 800a674 <_malloc_r+0xdc>
 800a61a:	f8c8 7000 	str.w	r7, [r8]
 800a61e:	e00f      	b.n	800a640 <_malloc_r+0xa8>
 800a620:	6822      	ldr	r2, [r4, #0]
 800a622:	1b52      	subs	r2, r2, r5
 800a624:	d420      	bmi.n	800a668 <_malloc_r+0xd0>
 800a626:	2a0b      	cmp	r2, #11
 800a628:	d917      	bls.n	800a65a <_malloc_r+0xc2>
 800a62a:	1961      	adds	r1, r4, r5
 800a62c:	42a3      	cmp	r3, r4
 800a62e:	6025      	str	r5, [r4, #0]
 800a630:	bf18      	it	ne
 800a632:	6059      	strne	r1, [r3, #4]
 800a634:	6863      	ldr	r3, [r4, #4]
 800a636:	bf08      	it	eq
 800a638:	f8c8 1000 	streq.w	r1, [r8]
 800a63c:	5162      	str	r2, [r4, r5]
 800a63e:	604b      	str	r3, [r1, #4]
 800a640:	4630      	mov	r0, r6
 800a642:	f000 f82f 	bl	800a6a4 <__malloc_unlock>
 800a646:	f104 000b 	add.w	r0, r4, #11
 800a64a:	1d23      	adds	r3, r4, #4
 800a64c:	f020 0007 	bic.w	r0, r0, #7
 800a650:	1ac2      	subs	r2, r0, r3
 800a652:	bf1c      	itt	ne
 800a654:	1a1b      	subne	r3, r3, r0
 800a656:	50a3      	strne	r3, [r4, r2]
 800a658:	e7af      	b.n	800a5ba <_malloc_r+0x22>
 800a65a:	6862      	ldr	r2, [r4, #4]
 800a65c:	42a3      	cmp	r3, r4
 800a65e:	bf0c      	ite	eq
 800a660:	f8c8 2000 	streq.w	r2, [r8]
 800a664:	605a      	strne	r2, [r3, #4]
 800a666:	e7eb      	b.n	800a640 <_malloc_r+0xa8>
 800a668:	4623      	mov	r3, r4
 800a66a:	6864      	ldr	r4, [r4, #4]
 800a66c:	e7ae      	b.n	800a5cc <_malloc_r+0x34>
 800a66e:	463c      	mov	r4, r7
 800a670:	687f      	ldr	r7, [r7, #4]
 800a672:	e7b6      	b.n	800a5e2 <_malloc_r+0x4a>
 800a674:	461a      	mov	r2, r3
 800a676:	685b      	ldr	r3, [r3, #4]
 800a678:	42a3      	cmp	r3, r4
 800a67a:	d1fb      	bne.n	800a674 <_malloc_r+0xdc>
 800a67c:	2300      	movs	r3, #0
 800a67e:	6053      	str	r3, [r2, #4]
 800a680:	e7de      	b.n	800a640 <_malloc_r+0xa8>
 800a682:	230c      	movs	r3, #12
 800a684:	6033      	str	r3, [r6, #0]
 800a686:	4630      	mov	r0, r6
 800a688:	f000 f80c 	bl	800a6a4 <__malloc_unlock>
 800a68c:	e794      	b.n	800a5b8 <_malloc_r+0x20>
 800a68e:	6005      	str	r5, [r0, #0]
 800a690:	e7d6      	b.n	800a640 <_malloc_r+0xa8>
 800a692:	bf00      	nop
 800a694:	20000a90 	.word	0x20000a90

0800a698 <__malloc_lock>:
 800a698:	4801      	ldr	r0, [pc, #4]	@ (800a6a0 <__malloc_lock+0x8>)
 800a69a:	f000 b84b 	b.w	800a734 <__retarget_lock_acquire_recursive>
 800a69e:	bf00      	nop
 800a6a0:	20000bd0 	.word	0x20000bd0

0800a6a4 <__malloc_unlock>:
 800a6a4:	4801      	ldr	r0, [pc, #4]	@ (800a6ac <__malloc_unlock+0x8>)
 800a6a6:	f000 b846 	b.w	800a736 <__retarget_lock_release_recursive>
 800a6aa:	bf00      	nop
 800a6ac:	20000bd0 	.word	0x20000bd0

0800a6b0 <memset>:
 800a6b0:	4402      	add	r2, r0
 800a6b2:	4603      	mov	r3, r0
 800a6b4:	4293      	cmp	r3, r2
 800a6b6:	d100      	bne.n	800a6ba <memset+0xa>
 800a6b8:	4770      	bx	lr
 800a6ba:	f803 1b01 	strb.w	r1, [r3], #1
 800a6be:	e7f9      	b.n	800a6b4 <memset+0x4>

0800a6c0 <_sbrk_r>:
 800a6c0:	b538      	push	{r3, r4, r5, lr}
 800a6c2:	4d06      	ldr	r5, [pc, #24]	@ (800a6dc <_sbrk_r+0x1c>)
 800a6c4:	2300      	movs	r3, #0
 800a6c6:	4604      	mov	r4, r0
 800a6c8:	4608      	mov	r0, r1
 800a6ca:	602b      	str	r3, [r5, #0]
 800a6cc:	f7f6 fd74 	bl	80011b8 <_sbrk>
 800a6d0:	1c43      	adds	r3, r0, #1
 800a6d2:	d102      	bne.n	800a6da <_sbrk_r+0x1a>
 800a6d4:	682b      	ldr	r3, [r5, #0]
 800a6d6:	b103      	cbz	r3, 800a6da <_sbrk_r+0x1a>
 800a6d8:	6023      	str	r3, [r4, #0]
 800a6da:	bd38      	pop	{r3, r4, r5, pc}
 800a6dc:	20000bcc 	.word	0x20000bcc

0800a6e0 <__errno>:
 800a6e0:	4b01      	ldr	r3, [pc, #4]	@ (800a6e8 <__errno+0x8>)
 800a6e2:	6818      	ldr	r0, [r3, #0]
 800a6e4:	4770      	bx	lr
 800a6e6:	bf00      	nop
 800a6e8:	2000002c 	.word	0x2000002c

0800a6ec <__libc_init_array>:
 800a6ec:	b570      	push	{r4, r5, r6, lr}
 800a6ee:	4d0d      	ldr	r5, [pc, #52]	@ (800a724 <__libc_init_array+0x38>)
 800a6f0:	4c0d      	ldr	r4, [pc, #52]	@ (800a728 <__libc_init_array+0x3c>)
 800a6f2:	1b64      	subs	r4, r4, r5
 800a6f4:	10a4      	asrs	r4, r4, #2
 800a6f6:	2600      	movs	r6, #0
 800a6f8:	42a6      	cmp	r6, r4
 800a6fa:	d109      	bne.n	800a710 <__libc_init_array+0x24>
 800a6fc:	4d0b      	ldr	r5, [pc, #44]	@ (800a72c <__libc_init_array+0x40>)
 800a6fe:	4c0c      	ldr	r4, [pc, #48]	@ (800a730 <__libc_init_array+0x44>)
 800a700:	f000 f864 	bl	800a7cc <_init>
 800a704:	1b64      	subs	r4, r4, r5
 800a706:	10a4      	asrs	r4, r4, #2
 800a708:	2600      	movs	r6, #0
 800a70a:	42a6      	cmp	r6, r4
 800a70c:	d105      	bne.n	800a71a <__libc_init_array+0x2e>
 800a70e:	bd70      	pop	{r4, r5, r6, pc}
 800a710:	f855 3b04 	ldr.w	r3, [r5], #4
 800a714:	4798      	blx	r3
 800a716:	3601      	adds	r6, #1
 800a718:	e7ee      	b.n	800a6f8 <__libc_init_array+0xc>
 800a71a:	f855 3b04 	ldr.w	r3, [r5], #4
 800a71e:	4798      	blx	r3
 800a720:	3601      	adds	r6, #1
 800a722:	e7f2      	b.n	800a70a <__libc_init_array+0x1e>
 800a724:	0800a810 	.word	0x0800a810
 800a728:	0800a810 	.word	0x0800a810
 800a72c:	0800a810 	.word	0x0800a810
 800a730:	0800a814 	.word	0x0800a814

0800a734 <__retarget_lock_acquire_recursive>:
 800a734:	4770      	bx	lr

0800a736 <__retarget_lock_release_recursive>:
 800a736:	4770      	bx	lr

0800a738 <_free_r>:
 800a738:	b538      	push	{r3, r4, r5, lr}
 800a73a:	4605      	mov	r5, r0
 800a73c:	2900      	cmp	r1, #0
 800a73e:	d041      	beq.n	800a7c4 <_free_r+0x8c>
 800a740:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a744:	1f0c      	subs	r4, r1, #4
 800a746:	2b00      	cmp	r3, #0
 800a748:	bfb8      	it	lt
 800a74a:	18e4      	addlt	r4, r4, r3
 800a74c:	f7ff ffa4 	bl	800a698 <__malloc_lock>
 800a750:	4a1d      	ldr	r2, [pc, #116]	@ (800a7c8 <_free_r+0x90>)
 800a752:	6813      	ldr	r3, [r2, #0]
 800a754:	b933      	cbnz	r3, 800a764 <_free_r+0x2c>
 800a756:	6063      	str	r3, [r4, #4]
 800a758:	6014      	str	r4, [r2, #0]
 800a75a:	4628      	mov	r0, r5
 800a75c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a760:	f7ff bfa0 	b.w	800a6a4 <__malloc_unlock>
 800a764:	42a3      	cmp	r3, r4
 800a766:	d908      	bls.n	800a77a <_free_r+0x42>
 800a768:	6820      	ldr	r0, [r4, #0]
 800a76a:	1821      	adds	r1, r4, r0
 800a76c:	428b      	cmp	r3, r1
 800a76e:	bf01      	itttt	eq
 800a770:	6819      	ldreq	r1, [r3, #0]
 800a772:	685b      	ldreq	r3, [r3, #4]
 800a774:	1809      	addeq	r1, r1, r0
 800a776:	6021      	streq	r1, [r4, #0]
 800a778:	e7ed      	b.n	800a756 <_free_r+0x1e>
 800a77a:	461a      	mov	r2, r3
 800a77c:	685b      	ldr	r3, [r3, #4]
 800a77e:	b10b      	cbz	r3, 800a784 <_free_r+0x4c>
 800a780:	42a3      	cmp	r3, r4
 800a782:	d9fa      	bls.n	800a77a <_free_r+0x42>
 800a784:	6811      	ldr	r1, [r2, #0]
 800a786:	1850      	adds	r0, r2, r1
 800a788:	42a0      	cmp	r0, r4
 800a78a:	d10b      	bne.n	800a7a4 <_free_r+0x6c>
 800a78c:	6820      	ldr	r0, [r4, #0]
 800a78e:	4401      	add	r1, r0
 800a790:	1850      	adds	r0, r2, r1
 800a792:	4283      	cmp	r3, r0
 800a794:	6011      	str	r1, [r2, #0]
 800a796:	d1e0      	bne.n	800a75a <_free_r+0x22>
 800a798:	6818      	ldr	r0, [r3, #0]
 800a79a:	685b      	ldr	r3, [r3, #4]
 800a79c:	6053      	str	r3, [r2, #4]
 800a79e:	4408      	add	r0, r1
 800a7a0:	6010      	str	r0, [r2, #0]
 800a7a2:	e7da      	b.n	800a75a <_free_r+0x22>
 800a7a4:	d902      	bls.n	800a7ac <_free_r+0x74>
 800a7a6:	230c      	movs	r3, #12
 800a7a8:	602b      	str	r3, [r5, #0]
 800a7aa:	e7d6      	b.n	800a75a <_free_r+0x22>
 800a7ac:	6820      	ldr	r0, [r4, #0]
 800a7ae:	1821      	adds	r1, r4, r0
 800a7b0:	428b      	cmp	r3, r1
 800a7b2:	bf04      	itt	eq
 800a7b4:	6819      	ldreq	r1, [r3, #0]
 800a7b6:	685b      	ldreq	r3, [r3, #4]
 800a7b8:	6063      	str	r3, [r4, #4]
 800a7ba:	bf04      	itt	eq
 800a7bc:	1809      	addeq	r1, r1, r0
 800a7be:	6021      	streq	r1, [r4, #0]
 800a7c0:	6054      	str	r4, [r2, #4]
 800a7c2:	e7ca      	b.n	800a75a <_free_r+0x22>
 800a7c4:	bd38      	pop	{r3, r4, r5, pc}
 800a7c6:	bf00      	nop
 800a7c8:	20000a90 	.word	0x20000a90

0800a7cc <_init>:
 800a7cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7ce:	bf00      	nop
 800a7d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7d2:	bc08      	pop	{r3}
 800a7d4:	469e      	mov	lr, r3
 800a7d6:	4770      	bx	lr

0800a7d8 <_fini>:
 800a7d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7da:	bf00      	nop
 800a7dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a7de:	bc08      	pop	{r3}
 800a7e0:	469e      	mov	lr, r3
 800a7e2:	4770      	bx	lr
